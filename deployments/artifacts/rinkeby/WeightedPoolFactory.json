{
  "address": "0x3b5dBD2bFbE5eFA86dD51Af24436A9B3c25caE40",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emergencyPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emergencyPeriodCheckExtension",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7773941e6ef2c796447724c2f8ec4ef87888bac152976453bc51d2ef788deae6",
  "receipt": {
    "to": null,
    "from": "0x34039007932688bCF393FFa32b14E52109C44552",
    "contractAddress": "0x3b5dBD2bFbE5eFA86dD51Af24436A9B3c25caE40",
    "transactionIndex": 4,
    "gasUsed": "5192798",
    "logsBloom": "0x
    "blockHash": "0x70e37d8cac7966abb32bc8e21cb93066cf829a0dc06cd9f2b0dc600966747e05",
    "transactionHash": "0x7773941e6ef2c796447724c2f8ec4ef87888bac152976453bc51d2ef788deae6",
    "logs": [],
    "blockNumber": 8269794,
    "cumulativeGasUsed": "5548940",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xba1c01474A7598c2B49015FdaFc67DdF06ce15f7"
  ],
  "solcInputHash": "0a4fdc9962a9ccfb07bf1f8e7d3a38b7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyPeriodCheckExtension\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(string,string,address[],uint256[],uint256,uint256,uint256)\":{\"details\":\"Deploys a new `WeightedPool`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/weighted/WeightedPoolFactory.sol\":\"WeightedPoolFactory\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x482b6d82ba1c9c73758ae15068a438361d4187b7a4e342db17ef0f828cb5e21a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/lib/helpers/Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nabstract contract Authentication {\\n    /**\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\n     */\\n    modifier authenticate() {\\n        _authenticateCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\n     */\\n    function _authenticateCaller() internal view {\\n        // Each external function is dynamically assigned a role ID as the hash of the contract address\\n        // and the function selector.\\n        bytes32 roleId = keccak256(abi.encodePacked(address(this), msg.sig));\\n        require(_canPerform(roleId, msg.sender), \\\"SENDER_NOT_ALLOWED\\\");\\n    }\\n\\n    function _canPerform(bytes32 roleId, address user) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x24d84aff0d043b010ac460ea002f66f995764031716969370b2356cd32498951\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/EmergencyPeriod.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable not-rely-on-time\\ncontract EmergencyPeriod {\\n    uint256 private constant _MAX_EMERGENCY_PERIOD = 90 days;\\n    uint256 private constant _MAX_EMERGENCY_PERIOD_CHECK_EXT = 30 days;\\n\\n    bool private _emergencyPeriodActive;\\n    uint256 internal immutable _emergencyPeriodEndDate;\\n    uint256 internal immutable _emergencyPeriodCheckEndDate;\\n\\n    event EmergencyPeriodChanged(bool active);\\n\\n    modifier noEmergencyPeriod() {\\n        _ensureInactiveEmergencyPeriod();\\n        _;\\n    }\\n\\n    constructor(uint256 emergencyPeriod, uint256 emergencyPeriodCheckExtension) {\\n        require(emergencyPeriod <= _MAX_EMERGENCY_PERIOD, \\\"MAX_EMERGENCY_PERIOD\\\");\\n        require(emergencyPeriodCheckExtension <= _MAX_EMERGENCY_PERIOD_CHECK_EXT, \\\"MAX_EMERGENCY_PERIOD_CHECK_EXT\\\");\\n\\n        _emergencyPeriodEndDate = block.timestamp + emergencyPeriod;\\n        _emergencyPeriodCheckEndDate = block.timestamp + emergencyPeriod + emergencyPeriodCheckExtension;\\n    }\\n\\n    function getEmergencyPeriod()\\n        external\\n        view\\n        returns (\\n            bool active,\\n            uint256 endDate,\\n            uint256 checkEndDate\\n        )\\n    {\\n        return (!_isEmergencyPeriodInactive(), _emergencyPeriodEndDate, _emergencyPeriodCheckEndDate);\\n    }\\n\\n    function _setEmergencyPeriod(bool active) internal {\\n        require(block.timestamp < _emergencyPeriodEndDate, \\\"EMERGENCY_PERIOD_FINISHED\\\");\\n        _emergencyPeriodActive = active;\\n        emit EmergencyPeriodChanged(active);\\n    }\\n\\n    function _ensureInactiveEmergencyPeriod() internal view {\\n        require(_isEmergencyPeriodInactive(), \\\"EMERGENCY_PERIOD_ON\\\");\\n    }\\n\\n    function _isEmergencyPeriodInactive() internal view returns (bool) {\\n        return (block.timestamp >= _emergencyPeriodCheckEndDate) || !_emergencyPeriodActive;\\n    }\\n}\\n\",\"keccak256\":\"0x908aae52794b3bf7b1ccf2560464d3a2a50973aef598d55dce093969070fd0a3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/InputHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../vault/interfaces/IAsset.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        require(a == b, \\\"INPUT_LENGTH_MISMATCH\\\");\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        require(a == b && b == c, \\\"INPUT_LENGTH_MISMATCH\\\");\\n    }\\n\\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            require(previous < current, \\\"UNSORTED_ARRAY\\\");\\n            previous = current;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbe2ba081549a464270ad28360966d89ccbfda05285f0073225968ae1340b7617\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../lib/math/LogExpMath.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        require(b <= a, \\\"SUB_OVERFLOW\\\");\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (ONE / 2);\\n        require(c1 >= c0, \\\"MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / ONE;\\n        return c2;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        require(a == 0 || product / a == b, \\\"MUL_OVERFLOW\\\");\\n\\n        return product / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        require(a == 0 || product / a == b, \\\"MUL_OVERFLOW\\\");\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n        uint256 c0 = a * ONE;\\n        require(a == 0 || c0 / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"DIV_INTERNAL\\\"); // add require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return LogExpMath.pow(x, y);\\n    }\\n\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 result = LogExpMath.pow(x, y);\\n        if (result == 0) {\\n            return 0;\\n        }\\n        return sub(sub(result, mulDown(result, MAX_POW_RELATIVE_ERROR)), 1);\\n    }\\n\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 result = LogExpMath.pow(x, y);\\n        return add(add(result, mulUp(result, MAX_POW_RELATIVE_ERROR)), 1);\\n    }\\n\\n    /**\\n     * @dev Tells the complement of a given value capped to zero to avoid overflow\\n     */\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return x >= ONE ? 0 : sub(ONE, x);\\n    }\\n}\\n\",\"keccak256\":\"0x49e44b3a5a3c1ca0429a415c3f4c21d59dad8dcda12e36fb3fc93eaad749e779\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General internal License for more details.\\n\\n// You should have received a copy of the GNU General internal License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// There's plenty of linter errors caused by this file, we'll eventually\\n// revisit it to make it more readable, verfiable and testable.\\n/* solhint-disable */\\n\\n/**\\n * @title Ethereum library for logarithm and exponential functions with 18 decimal precision.\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    int256 constant DECIMALS = 1e18;\\n    int256 constant DOUBLE_DECIMALS = DECIMALS * DECIMALS;\\n    int256 constant PRECISION = 10**20;\\n    int256 constant DOUBLE_PRECISION = PRECISION * PRECISION;\\n    int256 constant PRECISION_LOG_UNDER_BOUND = DECIMALS - 10**17;\\n    int256 constant PRECISION_LOG_UPPER_BOUND = DECIMALS + 10**17;\\n    int256 constant EXPONENT_LB = -41446531673892822312;\\n    int256 constant EXPONENT_UB = 130700829182905140221;\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(PRECISION);\\n\\n    int256 constant x0 = 128000000000000000000; //2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; //e\\u02c6(x0)\\n    int256 constant x1 = 64000000000000000000; //2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; //e\\u02c6(x1)\\n    int256 constant x2 = 3200000000000000000000; //2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; //e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; //2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; //e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; //2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; //e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; //2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; //e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; //2\\u02c61\\n    int256 constant a6 = 738905609893065022723; //e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; //2\\u02c60\\n    int256 constant a7 = 271828182845904523536; //e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; //2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; //e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; //2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; //e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; //2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; //e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; //2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; //e\\u02c6(x11)\\n\\n    /**\\n     * Calculate the natural exponentiation of a number with 18 decimals precision.\\n     * @param x Exponent with 18 decimal places.\\n     * @notice Max x is log((2^255 - 1) / 10^20) = 130.700829182905140221\\n     * @notice Min x log(0.000000000000000001) = -41.446531673892822312\\n     * @return e\\u02c6x\\n     */\\n    function n_exp(int256 x) internal pure returns (int256) {\\n        require(x >= EXPONENT_LB && x <= EXPONENT_UB, \\\"OUT_OF_BOUNDS\\\");\\n\\n        if (x < 0) return (DOUBLE_DECIMALS / n_exp(-x));\\n        int256 ans = PRECISION;\\n        int256 last = 1;\\n        if (x >= x0) {\\n            last = a0;\\n            x -= x0;\\n        }\\n        if (x >= x1) {\\n            last *= a1;\\n            x -= x1;\\n        }\\n        x *= 100;\\n        if (x >= x2) {\\n            ans = (ans * a2) / PRECISION;\\n            x -= x2;\\n        }\\n        if (x >= x3) {\\n            ans = (ans * a3) / PRECISION;\\n            x -= x3;\\n        }\\n        if (x >= x4) {\\n            ans = (ans * a4) / PRECISION;\\n            x -= x4;\\n        }\\n        if (x >= x5) {\\n            ans = (ans * a5) / PRECISION;\\n            x -= x5;\\n        }\\n        if (x >= x6) {\\n            ans = (ans * a6) / PRECISION;\\n            x -= x6;\\n        }\\n        if (x >= x7) {\\n            ans = (ans * a7) / PRECISION;\\n            x -= x7;\\n        }\\n        if (x >= x8) {\\n            ans = (ans * a8) / PRECISION;\\n            x -= x8;\\n        }\\n        if (x >= x9) {\\n            ans = (ans * a9) / PRECISION;\\n            x -= x9;\\n        }\\n        int256 s = PRECISION;\\n        int256 t = x;\\n        s += t;\\n        t = ((t * x) / 2) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 3) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 4) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 5) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 6) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 7) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 8) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 9) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 10) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 11) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 12) / PRECISION;\\n        s += t;\\n        return (((ans * s) / PRECISION) * last) / 100;\\n    }\\n\\n    /**\\n     * Calculate the natural logarithm of a number with 18 decimals precision.\\n     * @param a Positive number with 18 decimal places.\\n     * @return ln(x)\\n     */\\n    function n_log(int256 a) internal pure returns (int256) {\\n        require(a > 0, \\\"OUT_OF_BOUNDS\\\");\\n        if (a < DECIMALS) return (-n_log(DOUBLE_DECIMALS / a));\\n        int256 ans = 0;\\n        if (a >= a0 * DECIMALS) {\\n            ans += x0;\\n            a /= a0;\\n        }\\n        if (a >= a1 * DECIMALS) {\\n            ans += x1;\\n            a /= a1;\\n        }\\n        a *= 100;\\n        ans *= 100;\\n        if (a >= a2) {\\n            ans += x2;\\n            a = (a * PRECISION) / a2;\\n        }\\n        if (a >= a3) {\\n            ans += x3;\\n            a = (a * PRECISION) / a3;\\n        }\\n        if (a >= a4) {\\n            ans += x4;\\n            a = (a * PRECISION) / a4;\\n        }\\n        if (a >= a5) {\\n            ans += x5;\\n            a = (a * PRECISION) / a5;\\n        }\\n        if (a >= a6) {\\n            ans += x6;\\n            a = (a * PRECISION) / a6;\\n        }\\n        if (a >= a7) {\\n            ans += x7;\\n            a = (a * PRECISION) / a7;\\n        }\\n        if (a >= a8) {\\n            ans += x8;\\n            a = (a * PRECISION) / a8;\\n        }\\n        if (a >= a9) {\\n            ans += x9;\\n            a = (a * PRECISION) / a9;\\n        }\\n        if (a >= a10) {\\n            ans += x10;\\n            a = (a * PRECISION) / a10;\\n        }\\n        if (a >= a11) {\\n            ans += x11;\\n            a = (a * PRECISION) / a11;\\n        }\\n        int256 z = (PRECISION * (a - PRECISION)) / (a + PRECISION);\\n        int256 s = z;\\n        int256 z_squared = (z * z) / PRECISION;\\n        int256 t = (z * z_squared) / PRECISION;\\n        s += t / 3;\\n        t = (t * z_squared) / PRECISION;\\n        s += t / 5;\\n        t = (t * z_squared) / PRECISION;\\n        s += t / 7;\\n        t = (t * z_squared) / PRECISION;\\n        s += t / 9;\\n        t = (t * z_squared) / PRECISION;\\n        s += t / 11;\\n        return (ans + 2 * s) / 100;\\n    }\\n\\n    /**\\n     * Computes x to the power of y for numbers with 18 decimals precision.\\n     * @param x Base with 18 decimal places.\\n     * @param y Exponent with 18 decimal places.\\n     * @notice Must fulfil: -41.446531673892822312  < (log(x) * y) <  130.700829182905140221\\n     * @return x\\u02c6y\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            return uint256(DECIMALS);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        require(x < 2**255, \\\"X_OUT_OF_BOUNDS\\\"); // uint256 can be casted to a positive int256\\n        require(y < MILD_EXPONENT_BOUND, \\\"Y_OUT_OF_BOUNDS\\\");\\n        int256 x_int256 = int256(x);\\n        int256 y_int256 = int256(y);\\n        int256 logx_times_y;\\n        if (PRECISION_LOG_UNDER_BOUND < x_int256 && x_int256 < PRECISION_LOG_UPPER_BOUND) {\\n            int256 logbase = n_log_36(x_int256);\\n            logx_times_y = ((logbase / DECIMALS) * y_int256 + ((logbase % DECIMALS) * y_int256) / DECIMALS);\\n        } else {\\n            logx_times_y = n_log(x_int256) * y_int256;\\n        }\\n        require(\\n            EXPONENT_LB * DECIMALS <= logx_times_y && logx_times_y <= EXPONENT_UB * DECIMALS,\\n            \\\"PRODUCT_OUT_OF_BOUNDS\\\"\\n        );\\n        logx_times_y /= DECIMALS;\\n        return uint256(n_exp(logx_times_y));\\n    }\\n\\n    /**\\n     * Computes log of a number in base of another number, both numbers with 18 decimals precision.\\n     * @param arg Argument with 18 decimal places.\\n     * @param base Base with 18 decimal places.\\n     * @notice Must fulfil: -41.446531673892822312  < (log(x) * y) <  130.700829182905140221\\n     * @return log[base](arg)\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        int256 logbase;\\n        if (PRECISION_LOG_UNDER_BOUND < base && base < PRECISION_LOG_UPPER_BOUND) {\\n            logbase = n_log_36(base);\\n        } else {\\n            logbase = n_log(base) * DECIMALS;\\n        }\\n        int256 logarg;\\n        if (PRECISION_LOG_UNDER_BOUND < arg && arg < PRECISION_LOG_UPPER_BOUND) {\\n            logarg = n_log_36(arg);\\n        } else {\\n            logarg = n_log(arg) * DECIMALS;\\n        }\\n        return (logarg * DECIMALS) / logbase;\\n    }\\n\\n    /**\\n     * Private function to calculate the natural logarithm of a number with 36 decimals precision.\\n     * @param a Positive number with 18 decimal places.\\n     * @return ln(x)\\n     */\\n    function n_log_36(int256 a) private pure returns (int256) {\\n        a *= DECIMALS;\\n        int256 z = (DOUBLE_DECIMALS * (a - DOUBLE_DECIMALS)) / (a + DOUBLE_DECIMALS);\\n        int256 s = z;\\n        int256 z_squared = (z * z) / DOUBLE_DECIMALS;\\n        int256 t = (z * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 3;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 5;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 7;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 9;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 11;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 13;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 15;\\n        return 2 * s;\\n    }\\n}\\n\",\"keccak256\":\"0xa6ac1786981dfbfb539f246dda4b8a79bca2f55636f667ebad8d0a13e6585c10\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_OVERFLOW\\\");\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SUB_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        require(a == 0 || c / a == b, \\\"MUL_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0b7373da776d4f690a6838703f1a06e9148d07984280ad96b611167a28834a7c\",\"license\":\"MIT\"},\"contracts/pools/BalancerPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../lib/math/Math.sol\\\";\\n\\n/**\\n * @title Highly opinionated token implementation\\n * @author Balancer Labs\\n * @dev\\n * - Includes functions to increase and decrease allowance as a workaround\\n *   for the well-known issue with `approve`:\\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n *   decreased by calls to transferFrom\\n * - Lets a token holder use `transferFrom` to send their own tokens,\\n *   without first setting allowance\\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\\n */\\ncontract BalancerPoolToken is IERC20 {\\n    using Math for uint256;\\n\\n    // State variables\\n\\n    uint8 private constant _DECIMALS = 18;\\n\\n    mapping(address => uint256) private _balance;\\n    mapping(address => mapping(address => uint256)) private _allowance;\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // Function declarations\\n\\n    constructor(string memory tokenName, string memory tokenSymbol) {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    // External functions\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balance[account];\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _setAllowance(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function increaseApproval(address spender, uint256 amount) external returns (bool) {\\n        _setAllowance(msg.sender, spender, _allowance[msg.sender][spender].add(amount));\\n\\n        return true;\\n    }\\n\\n    function decreaseApproval(address spender, uint256 amount) external returns (bool) {\\n        uint256 currentAllowance = _allowance[msg.sender][spender];\\n\\n        if (amount >= currentAllowance) {\\n            _setAllowance(msg.sender, spender, 0);\\n        } else {\\n            _setAllowance(msg.sender, spender, currentAllowance.sub(amount));\\n        }\\n\\n        return true;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _move(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = _allowance[sender][msg.sender];\\n        require(msg.sender == sender || currentAllowance >= amount, \\\"INSUFFICIENT_ALLOWANCE\\\");\\n\\n        _move(sender, recipient, amount);\\n\\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\\n            require(currentAllowance >= amount, \\\"INSUFFICIENT_ALLOWANCE\\\");\\n            _setAllowance(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    // Public functions\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _DECIMALS;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    // Internal functions\\n\\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\\n        _balance[recipient] = _balance[recipient].add(amount);\\n        _totalSupply = _totalSupply.add(amount);\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function _burnPoolTokens(address sender, uint256 amount) internal {\\n        uint256 currentBalance = _balance[sender];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n\\n        _balance[sender] = currentBalance - amount;\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(sender, address(0), amount);\\n    }\\n\\n    function _move(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentBalance = _balance[sender];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n\\n        _balance[sender] = currentBalance - amount;\\n        _balance[recipient] = _balance[recipient].add(amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // Private functions\\n\\n    function _setAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        _allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x06cf3bd774a93637bd43f47412b135e1206954f2be4fb67fe8ef832b325a231e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BaseMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BasePool.sol\\\";\\nimport \\\"../vault/interfaces/IMinimalSwapInfoPool.sol\\\";\\n\\nabstract contract BaseMinimalSwapInfoPool is IMinimalSwapInfoPool, BasePool {\\n    constructor(\\n        IVault vault,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256 swapFee,\\n        uint256 emergencyPeriod,\\n        uint256 emergencyPeriodCheckExtension\\n    )\\n        BasePool(\\n            vault,\\n            tokens.length == 2 ? IVault.PoolSpecialization.TWO_TOKEN : IVault.PoolSpecialization.MINIMAL_SWAP_INFO,\\n            name,\\n            symbol,\\n            tokens,\\n            swapFee,\\n            emergencyPeriod,\\n            emergencyPeriodCheckExtension\\n        )\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // Swap Hooks\\n\\n    function onSwapGivenIn(\\n        IPoolSwapStructs.SwapRequestGivenIn memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view override returns (uint256) {\\n        // Fees are subtracted before scaling happens, to reduce complexity of rounding direction analysis.\\n        swapRequest.amountIn = _subtractSwapFee(swapRequest.amountIn);\\n\\n        uint256 scalingFactorTokenIn = _scalingFactor(swapRequest.tokenIn);\\n        uint256 scalingFactorTokenOut = _scalingFactor(swapRequest.tokenOut);\\n\\n        // All token amounts are upscaled.\\n        currentBalanceTokenIn = _upscale(currentBalanceTokenIn, scalingFactorTokenIn);\\n        currentBalanceTokenOut = _upscale(currentBalanceTokenOut, scalingFactorTokenOut);\\n        swapRequest.amountIn = _upscale(swapRequest.amountIn, scalingFactorTokenIn);\\n\\n        uint256 amountOut = _onSwapGivenIn(swapRequest, currentBalanceTokenIn, currentBalanceTokenOut);\\n\\n        // amountOut tokens are exiting the Pool, so we round down.\\n        return _downscaleDown(amountOut, scalingFactorTokenOut);\\n    }\\n\\n    function onSwapGivenOut(\\n        IPoolSwapStructs.SwapRequestGivenOut memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view override returns (uint256) {\\n        uint256 scalingFactorTokenIn = _scalingFactor(swapRequest.tokenIn);\\n        uint256 scalingFactorTokenOut = _scalingFactor(swapRequest.tokenOut);\\n\\n        // All token amounts are upscaled.\\n        currentBalanceTokenIn = _upscale(currentBalanceTokenIn, scalingFactorTokenIn);\\n        currentBalanceTokenOut = _upscale(currentBalanceTokenOut, scalingFactorTokenOut);\\n        swapRequest.amountOut = _upscale(swapRequest.amountOut, scalingFactorTokenOut);\\n\\n        uint256 amountIn = _onSwapGivenOut(swapRequest, currentBalanceTokenIn, currentBalanceTokenOut);\\n\\n        // amountIn are tokens entering the Pool, so we round up.\\n        amountIn = _downscaleUp(amountIn, scalingFactorTokenIn);\\n\\n        // Fees are added after scaling happens, to reduce complexity of rounding direction analysis.\\n        return _addSwapFee(amountIn);\\n    }\\n\\n    function _onSwapGivenIn(\\n        IPoolSwapStructs.SwapRequestGivenIn memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    function _onSwapGivenOut(\\n        IPoolSwapStructs.SwapRequestGivenOut memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x84378c9c0dbc7f1975a23d2f46931d590414f1442e6a2c84ce20d96b8542e21b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../lib/math/FixedPoint.sol\\\";\\nimport \\\"../lib/helpers/InputHelpers.sol\\\";\\n\\nimport \\\"./BalancerPoolToken.sol\\\";\\nimport \\\"./BasePoolAuthorization.sol\\\";\\nimport \\\"../vault/interfaces/IVault.sol\\\";\\nimport \\\"../vault/interfaces/IBasePool.sol\\\";\\nimport \\\"../lib/helpers/EmergencyPeriod.sol\\\";\\n\\n// This contract relies on tons of immutable state variables to\\n// perform efficient lookup, without resorting to storage reads.\\n// solhint-disable max-states-count\\n\\n/**\\n * @dev Reference implementation for the base layer of a Pool contract that manges a single Pool with an immutable set\\n * of registered tokens, no Asset Managers, and an immutable swap fee.\\n *\\n * Because this contract doesn't implement the swap hooks, derived contracts should likely inherit from BaseGeneralPool\\n * or BaseMinimalSwapInfoPool instead.\\n */\\nabstract contract BasePool is IBasePool, BasePoolAuthorization, BalancerPoolToken, EmergencyPeriod {\\n    using FixedPoint for uint256;\\n\\n    uint256 private constant _MIN_TOKENS = 2;\\n    uint256 private constant _MAX_TOKENS = 7;\\n\\n    // 1e16 = 1%, 1e18 = 100%\\n    uint256 private constant _MAX_SWAP_FEE = 10e16;\\n\\n    uint256 private constant _MINIMUM_BPT = 10**3;\\n\\n    uint256 internal _swapFee;\\n\\n    IVault internal immutable _vault;\\n    bytes32 internal immutable _poolId;\\n    uint256 internal immutable _totalTokens;\\n\\n    IERC20 internal immutable _token0;\\n    IERC20 internal immutable _token1;\\n    IERC20 internal immutable _token2;\\n    IERC20 internal immutable _token3;\\n    IERC20 internal immutable _token4;\\n    IERC20 internal immutable _token5;\\n    IERC20 internal immutable _token6;\\n\\n    // Scaling factors for each token\\n    uint256 internal immutable _scalingFactor0;\\n    uint256 internal immutable _scalingFactor1;\\n    uint256 internal immutable _scalingFactor2;\\n    uint256 internal immutable _scalingFactor3;\\n    uint256 internal immutable _scalingFactor4;\\n    uint256 internal immutable _scalingFactor5;\\n    uint256 internal immutable _scalingFactor6;\\n\\n    constructor(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256 swapFee,\\n        uint256 emergencyPeriod,\\n        uint256 emergencyPeriodCheckExtension\\n    )\\n        BasePoolAuthorization()\\n        BalancerPoolToken(name, symbol)\\n        EmergencyPeriod(emergencyPeriod, emergencyPeriodCheckExtension)\\n    {\\n        require(tokens.length >= _MIN_TOKENS, \\\"MIN_TOKENS\\\");\\n        require(tokens.length <= _MAX_TOKENS, \\\"MAX_TOKENS\\\");\\n\\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\\n        // Also, since these Pools will register tokens only once, we can ensure the Pool tokens will follow the same\\n        // order. We rely on this property to make Pools simpler to write, as it lets us assume that the\\n        // order of token-specific parameters (such as token weights) will not change.\\n        InputHelpers.ensureArrayIsSorted(tokens);\\n\\n        require(swapFee <= _MAX_SWAP_FEE, \\\"MAX_SWAP_FEE\\\");\\n\\n        bytes32 poolId = vault.registerPool(specialization);\\n\\n        // Pass in zero addresses for Asset Managers\\n        vault.registerTokens(poolId, tokens, new address[](tokens.length));\\n\\n        // Set immutable state variables - these cannot be read from during construction\\n\\n        _vault = vault;\\n        _poolId = poolId;\\n        _swapFee = swapFee;\\n        _totalTokens = tokens.length;\\n\\n        // Immutable variables cannot be initialized inside an if statement, so we must do conditional assignments\\n\\n        _token0 = tokens.length > 0 ? tokens[0] : IERC20(0);\\n        _token1 = tokens.length > 1 ? tokens[1] : IERC20(0);\\n        _token2 = tokens.length > 2 ? tokens[2] : IERC20(0);\\n        _token3 = tokens.length > 3 ? tokens[3] : IERC20(0);\\n        _token4 = tokens.length > 4 ? tokens[4] : IERC20(0);\\n        _token5 = tokens.length > 5 ? tokens[5] : IERC20(0);\\n        _token6 = tokens.length > 6 ? tokens[6] : IERC20(0);\\n\\n        _scalingFactor0 = tokens.length > 0 ? _computeScalingFactor(tokens[0]) : 0;\\n        _scalingFactor1 = tokens.length > 1 ? _computeScalingFactor(tokens[1]) : 0;\\n        _scalingFactor2 = tokens.length > 2 ? _computeScalingFactor(tokens[2]) : 0;\\n        _scalingFactor3 = tokens.length > 3 ? _computeScalingFactor(tokens[3]) : 0;\\n        _scalingFactor4 = tokens.length > 4 ? _computeScalingFactor(tokens[4]) : 0;\\n        _scalingFactor5 = tokens.length > 5 ? _computeScalingFactor(tokens[5]) : 0;\\n        _scalingFactor6 = tokens.length > 6 ? _computeScalingFactor(tokens[6]) : 0;\\n    }\\n\\n    // Getters / Setters\\n\\n    function getVault() external view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    function getPoolId() external view returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function getSwapFee() external view returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external authenticate {\\n        require(swapFee <= _MAX_SWAP_FEE, \\\"MAX_SWAP_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setEmergencyPeriod(bool active) external authenticate {\\n        _setEmergencyPeriod(active);\\n    }\\n\\n    // Join / Exit Hooks\\n\\n    modifier onlyVault(bytes32 poolId) {\\n        require(msg.sender == address(_vault), \\\"CALLER_NOT_VAULT\\\");\\n        require(poolId == _poolId, \\\"INVALID_POOL_ID\\\");\\n        _;\\n    }\\n\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        uint256[] memory scalingFactors = _scalingFactors();\\n        _upscaleArray(currentBalances, scalingFactors);\\n\\n        if (totalSupply() == 0) {\\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(poolId, sender, recipient, userData);\\n\\n            // On initialization, we lock _MINIMUM_BPT by minting it for the zero address. This BPT acts as a minimum\\n            // as it will never be burned, which reduces potential issues with rounding, and also prevents the Pool from\\n            // ever being fully drained.\\n            require(bptAmountOut >= _MINIMUM_BPT, \\\"MINIMUM_BPT\\\");\\n            _mintPoolTokens(address(0), _MINIMUM_BPT);\\n            _mintPoolTokens(recipient, bptAmountOut - _MINIMUM_BPT);\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n\\n            return (amountsIn, new uint256[](_totalTokens));\\n        } else {\\n            (uint256 bptAmountOut, uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts) = _onJoinPool(\\n                poolId,\\n                sender,\\n                recipient,\\n                currentBalances,\\n                latestBlockNumberUsed,\\n                protocolSwapFeePercentage,\\n                userData\\n            );\\n\\n            _mintPoolTokens(recipient, bptAmountOut);\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n            // dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\\n            _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\\n\\n            return (amountsIn, dueProtocolFeeAmounts);\\n        }\\n    }\\n\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn) {\\n        return\\n            _queryAction(\\n                poolId,\\n                sender,\\n                recipient,\\n                currentBalances,\\n                latestBlockNumberUsed,\\n                protocolSwapFeePercentage,\\n                userData,\\n                _onJoinPool,\\n                _downscaleUpArray\\n            );\\n    }\\n\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        uint256[] memory scalingFactors = _scalingFactors();\\n        _upscaleArray(currentBalances, scalingFactors);\\n\\n        (uint256 bptAmountIn, uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts) = _onExitPool(\\n            poolId,\\n            sender,\\n            recipient,\\n            currentBalances,\\n            latestBlockNumberUsed,\\n            protocolSwapFeePercentage,\\n            userData\\n        );\\n\\n        _burnPoolTokens(sender, bptAmountIn);\\n\\n        // Both amountsOut and dueProtocolFees are amounts exiting the Pool, so we round down.\\n        _downscaleDownArray(amountsOut, scalingFactors);\\n        _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\\n\\n        return (amountsOut, dueProtocolFeeAmounts);\\n    }\\n\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut) {\\n        return\\n            _queryAction(\\n                poolId,\\n                sender,\\n                recipient,\\n                currentBalances,\\n                latestBlockNumberUsed,\\n                protocolSwapFeePercentage,\\n                userData,\\n                _onExitPool,\\n                _downscaleDownArray\\n            );\\n    }\\n\\n    function _onInitializePool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        bytes memory userData\\n    ) internal virtual returns (uint256, uint256[] memory);\\n\\n    function _onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function _onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function _addSwapFee(uint256 amount) internal view returns (uint256) {\\n        // This returns amount + fees, so we round up (favoring fees).\\n        return amount.divUp(_swapFee.complement());\\n    }\\n\\n    function _subtractSwapFee(uint256 amount) internal view returns (uint256) {\\n        // Round up, favoring fees.\\n        uint256 fees = amount.mulUp(_swapFee);\\n        return amount.sub(fees);\\n    }\\n\\n    /**\\n     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\\n     * it had 18 decimals.\\n     */\\n    function _computeScalingFactor(IERC20 token) private view returns (uint256) {\\n        // Tokens that don't implement the `decimals` method are not supported.\\n        uint256 tokenDecimals = ERC20(address(token)).decimals();\\n\\n        // Tokens with more than 18 decimals are not supported.\\n        uint256 decimalsDifference = Math.sub(18, tokenDecimals);\\n        return 10**decimalsDifference;\\n    }\\n\\n    function _scalingFactor(IERC20 token) internal view returns (uint256) {\\n        // prettier-ignore\\n        if (token == _token0) { return _scalingFactor0; }\\n        else if (token == _token1) { return _scalingFactor1; }\\n        else if (token == _token2) { return _scalingFactor2; }\\n        else if (token == _token3) { return _scalingFactor3; }\\n        else if (token == _token4) { return _scalingFactor4; }\\n        else if (token == _token5) { return _scalingFactor5; }\\n        else if (token == _token6) { return _scalingFactor6; }\\n        else {\\n            revert(\\\"INVALID_TOKEN\\\");\\n        }\\n    }\\n\\n    function _scalingFactors() internal view returns (uint256[] memory) {\\n        uint256[] memory scalingFactors = new uint256[](_totalTokens);\\n\\n        // prettier-ignore\\n        {\\n            if (_totalTokens > 0) { scalingFactors[0] = _scalingFactor0; } else { return scalingFactors; }\\n            if (_totalTokens > 1) { scalingFactors[1] = _scalingFactor1; } else { return scalingFactors; }\\n            if (_totalTokens > 2) { scalingFactors[2] = _scalingFactor2; } else { return scalingFactors; }\\n            if (_totalTokens > 3) { scalingFactors[3] = _scalingFactor3; } else { return scalingFactors; }\\n            if (_totalTokens > 4) { scalingFactors[4] = _scalingFactor4; } else { return scalingFactors; }\\n            if (_totalTokens > 5) { scalingFactors[5] = _scalingFactor5; } else { return scalingFactors; }\\n            if (_totalTokens > 6) { scalingFactors[6] = _scalingFactor6; } else { return scalingFactors; }\\n        }\\n\\n        return scalingFactors;\\n    }\\n\\n    function _upscale(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.mul(amount, scalingFactor);\\n    }\\n\\n    function _upscaleArray(uint256[] memory amount, uint256[] memory scalingFactors) internal view {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            amount[i] = Math.mul(amount[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _downscaleDown(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.divDown(amount, scalingFactor);\\n    }\\n\\n    function _downscaleDownArray(uint256[] memory amount, uint256[] memory scalingFactors) internal view {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            amount[i] = Math.divDown(amount[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _downscaleUp(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.divUp(amount, scalingFactor);\\n    }\\n\\n    function _downscaleUpArray(uint256[] memory amount, uint256[] memory scalingFactors) internal view {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            amount[i] = Math.divUp(amount[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _getAuthorizer() internal view override returns (IAuthorizer) {\\n        return _vault.getAuthorizer();\\n    }\\n\\n    function _queryAction(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        function(bytes32, address, address, uint256[] memory, uint256, uint256, bytes memory)\\n            internal\\n            returns (uint256, uint256[] memory, uint256[] memory) _action,\\n        function(uint256[] memory, uint256[] memory) internal view _downscaleArray\\n    ) private returns (uint256, uint256[] memory) {\\n        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed\\n        // explanation.\\n\\n        if (msg.sender != address(this)) {\\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\\n            // the preceding if statement will be executed instead.\\n\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = address(this).call(msg.data);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // This call should always revert to decode the bpt and token amounts from the revert reason\\n                switch success\\n                    case 0 {\\n                        // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\\n                        // stored there as we take full control of the execution and then immediately return.\\n\\n                        // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\\n                        // there was another revert reason and we should forward it.\\n                        returndatacopy(0, 0, 0x04)\\n                        let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n\\n                        // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\\n                        if eq(eq(error, 0x43adbafb00000000000000000000000000000000000000000000000000000000), 0) {\\n                            returndatacopy(0, 0, returndatasize())\\n                            revert(0, returndatasize())\\n                        }\\n\\n                        // The returndata contains the signature, followed by the raw memory representation of the\\n                        // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded\\n                        // representation of these.\\n                        // An ABI-encoded response will include one additional field to indicate the starting offset of\\n                        // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the\\n                        // returndata.\\n                        //\\n                        // In returndata:\\n                        // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]\\n                        //\\n                        // We now need to return (ABI-encoded values):\\n                        // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]\\n\\n                        // We copy 32 bytes for the `bptAmount` from returndata into memory.\\n                        // Note that we skip the first 4 bytes for the error signature\\n                        returndatacopy(0, 0x04, 32)\\n\\n                        // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after\\n                        // the initial 64 bytes.\\n                        mstore(0x20, 64)\\n\\n                        // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.\\n                        // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also\\n                        // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.\\n                        returndatacopy(0x40, 0x24, sub(returndatasize(), 36))\\n\\n                        // We finally return the ABI-encoded uint256 and the array, which has a total length equal to\\n                        // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the\\n                        // error signature.\\n                        return(0, add(returndatasize(), 28))\\n                    }\\n                    default {\\n                        // This call should always revert, but we fail nonetheless if that didn't happen\\n                        invalid()\\n                    }\\n            }\\n        } else {\\n            uint256[] memory scalingFactors = _scalingFactors();\\n            _upscaleArray(currentBalances, scalingFactors);\\n\\n            (uint256 bptAmount, uint256[] memory tokenAmounts, ) = _action(\\n                poolId,\\n                sender,\\n                recipient,\\n                currentBalances,\\n                latestBlockNumberUsed,\\n                protocolSwapFeePercentage,\\n                userData\\n            );\\n\\n            _downscaleArray(tokenAmounts, scalingFactors);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of\\n                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values\\n                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32\\n                let size := mul(mload(tokenAmounts), 32)\\n\\n                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there\\n                // will be at least one available slot due to how the memory scratch space works.\\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\\n                let start := sub(tokenAmounts, 0x20)\\n                mstore(start, bptAmount)\\n\\n                // We send one extra value for the error signature \\\"QueryError(uint256,uint256[])\\\" which is 0x43adbafb\\n                // We use the previous slot to `bptAmount`.\\n                mstore(sub(start, 0x20), 0x0000000000000000000000000000000000000000000000000000000043adbafb)\\n                start := sub(start, 0x04)\\n\\n                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return\\n                // the `bptAmount`, the array 's length, and the error signature.\\n                revert(start, add(size, 68))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1047900fe49552f4fc1710c8dc135da6f7003b683251ae5ebd1cf9f5d807c111\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BasePoolAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../lib/helpers/Authentication.sol\\\";\\nimport \\\"../vault/interfaces/IAuthorizer.sol\\\";\\n\\n/**\\n * @dev Base authorization layer implementation for pools. It shares the same concept as the one defined for the Vault.\\n * It's built on top of OpenZeppelin's Access Control, which allows to define specific roles to control the access of\\n * external accounts to the different functionalities of the contract.\\n */\\nabstract contract BasePoolAuthorization is Authentication {\\n    function getAuthorizer() external view returns (IAuthorizer) {\\n        return _getAuthorizer();\\n    }\\n\\n    function _canPerform(bytes32 roleId, address account) internal view override returns (bool) {\\n        return _getAuthorizer().hasRole(roleId, account);\\n    }\\n\\n    function _getAuthorizer() internal view virtual returns (IAuthorizer);\\n}\\n\",\"keccak256\":\"0x258ebbdfec83ef47f76782e50ecad46b9c554c4c8e7b9e27c185162d06a82397\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BasePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../vault/interfaces/IVault.sol\\\";\\nimport \\\"../vault/interfaces/IBasePool.sol\\\";\\n\\nabstract contract BasePoolFactory {\\n    IVault public immutable vault;\\n\\n    event PoolRegistered(address indexed pool);\\n\\n    constructor(IVault _vault) {\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @dev Registers a new created pool. Emits a `PoolRegistered` event.\\n     */\\n    function _register(address pool) internal {\\n        emit PoolRegistered(pool);\\n    }\\n}\\n\",\"keccak256\":\"0x5e51d1183988123f02d367c4d45e488c9287ccf42adea3bd118a998557d668cc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/weighted/WeightedMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../lib/math/FixedPoint.sol\\\";\\nimport \\\"../../lib/helpers/InputHelpers.sol\\\";\\n\\n// This is a contract to emulate file-level functions. Convert to a library\\n// after the migration to solc v0.7.1.\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\ncontract WeightedMath {\\n    using FixedPoint for uint256;\\n\\n    // Pool limits that arise from this math (and the imposed 100/1 maximum weight ratio)\\n    uint256 internal constant _MIN_WEIGHT = 0.01e18;\\n\\n    uint256 internal constant _MAX_IN_RATIO = 0.3e18;\\n    uint256 internal constant _MAX_OUT_RATIO = 0.3e18;\\n\\n    uint256 internal constant _MAX_INVARIANT_RATIO = 3e18;\\n    uint256 internal constant _MIN_INVARIANT_RATIO = 0.7e18;\\n\\n    function _calculateInvariant(uint256[] memory normalizedWeights, uint256[] memory balances)\\n        internal\\n        pure\\n        returns (uint256 invariant)\\n    {\\n        /**********************************************************************************************\\n        // invariant               _____                                                             //\\n        // wi = weight index i      | |      wi                                                      //\\n        // bi = balance index i     | |  bi ^   = i                                                  //\\n        // i = invariant                                                                             //\\n        **********************************************************************************************/\\n        InputHelpers.ensureInputLengthMatch(normalizedWeights.length, balances.length);\\n\\n        invariant = FixedPoint.ONE;\\n        for (uint8 i = 0; i < normalizedWeights.length; i++) {\\n            invariant = invariant.mul(FixedPoint.pow(balances[i], normalizedWeights[i]));\\n        }\\n    }\\n\\n    // Computes how many tokens can be taken out of a pool if `tokenAmountIn` are sent, given the\\n    // current balances and weights.\\n    function _calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn\\n    ) internal pure returns (uint256) {\\n        /**********************************************************************************************\\n        // outGivenIn                                                                                //\\n        // aO = tokenAmountOut                                                                       //\\n        // bO = tokenBalanceOut                                                                      //\\n        // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n        // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n        // wI = tokenWeightIn               \\\\      \\\\       ( bI + aI )         /              /      //\\n        // wO = tokenWeightOut                                                                       //\\n        **********************************************************************************************/\\n\\n        // Amount out, so we round down overall.\\n\\n        // The multiplication rounds down, and the subtrahend (power) rounds up (so the base rounds up too).\\n        // Because bI / (bI + aI) <= 1, the exponent rounds down.\\n\\n        uint256 newBalance = tokenBalanceIn.add(tokenAmountIn);\\n        uint256 base = tokenBalanceIn.divUp(newBalance);\\n        uint256 exponent = tokenWeightIn.divDown(tokenWeightOut);\\n        uint256 power = FixedPoint.powUp(base, exponent);\\n\\n        return tokenBalanceOut.mulDown(power.complement());\\n    }\\n\\n    // Computes how many tokens must be sent to a pool in order to take `tokenAmountOut`, given the\\n    // current balances and weights.\\n    function _calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut\\n    ) internal pure returns (uint256) {\\n        /**********************************************************************************************\\n        // inGivenOut                                                                                //\\n        // aO = tokenAmountOut                                                                       //\\n        // bO = tokenBalanceOut                                                                      //\\n        // bI = tokenBalanceIn              /  /            bO             \\\\    (wO / wI)      \\\\     //\\n        // aI = tokenAmountIn    aI = bI * |  | --------------------------  | ^            - 1  |    //\\n        // wI = tokenWeightIn               \\\\  \\\\       ( bO - aO )         /                   /     //\\n        // wO = tokenWeightOut                                                                       //\\n        **********************************************************************************************/\\n\\n        // Amount in, so we round up overall.\\n\\n        // The multiplication rounds up, and the power rounds up (so the base rounds up too).\\n        // Because b0 / (b0 - a0) >= 1, the exponent rounds up.\\n\\n        uint256 base = tokenBalanceOut.divUp(tokenBalanceOut.sub(tokenAmountOut));\\n        uint256 exponent = tokenWeightOut.divUp(tokenWeightIn);\\n        uint256 power = FixedPoint.powUp(base, exponent);\\n\\n        uint256 ratio = power.sub(FixedPoint.ONE);\\n\\n        return tokenBalanceIn.mulUp(ratio);\\n    }\\n\\n    function _calcBptOutGivenExactTokensIn(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        // BPT out, so we round down overall.\\n\\n        // First loop to calculate the weighted balance ratio\\n        // The increment `amountIn` represents for each token, as a quotient of new and current balances,\\n        // not accounting swap fees\\n        uint256[] memory tokenBalanceRatiosWithoutFee = new uint256[](amountsIn.length);\\n        // The weighted sum of token balance rations sans fee\\n        uint256 weightedBalanceRatio = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            tokenBalanceRatiosWithoutFee[i] = balances[i].add(amountsIn[i]).divDown(balances[i]);\\n            weightedBalanceRatio = weightedBalanceRatio.add(\\n                tokenBalanceRatiosWithoutFee[i].mulDown(normalizedWeights[i])\\n            );\\n        }\\n\\n        //Second loop to calculate new amounts in taking into account the fee on the % excess\\n        // The growth of the invariant caused by the join, as a quotient of the new value and the current one\\n        uint256 invariantRatio = FixedPoint.ONE;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            // Percentage of the amount supplied that will be swapped for other tokens in the pool\\n            uint256 tokenBalancePercentageExcess;\\n            // Some tokens might have amounts supplied in excess of a 'balanced' join: these are identified if\\n            // the token's balance ratio sans fee is larger than the weighted balance ratio, and swap fees charged\\n            // on the amount to swap\\n            if (weightedBalanceRatio >= tokenBalanceRatiosWithoutFee[i]) {\\n                tokenBalancePercentageExcess = 0;\\n            } else {\\n                tokenBalancePercentageExcess = tokenBalanceRatiosWithoutFee[i].sub(weightedBalanceRatio).divUp(\\n                    tokenBalanceRatiosWithoutFee[i].sub(FixedPoint.ONE)\\n                );\\n            }\\n\\n            uint256 swapFeeExcess = swapFee.mulUp(tokenBalancePercentageExcess);\\n\\n            uint256 amountInAfterFee = amountsIn[i].mulDown(swapFeeExcess.complement());\\n\\n            uint256 tokenBalanceRatio = FixedPoint.ONE.add(amountInAfterFee.divDown(balances[i]));\\n\\n            invariantRatio = invariantRatio.mulDown(FixedPoint.powDown(tokenBalanceRatio, normalizedWeights[i]));\\n        }\\n\\n        return bptTotalSupply.mulDown(invariantRatio.sub(FixedPoint.ONE));\\n    }\\n\\n    function _calcTokenInGivenExactBptOut(\\n        uint256 tokenBalance,\\n        uint256 tokenNormalizedWeight,\\n        uint256 bptAmountOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        /******************************************************************************************\\n        // tokenInForExactBPTOut                                                                 //\\n        // a = tokenAmountIn                                                                     //\\n        // b = tokenBalance                 /  /    totalBPT + bptOut      \\\\    (1 / w)       \\\\  //\\n        // bptOut = bptAmountOut   a = b * |  | --------------------------  | ^          - 1  |  //\\n        // bpt = totalBPT                   \\\\  \\\\       totalBPT            /                  /  //\\n        // w = tokenWeight                                                                       //\\n        ******************************************************************************************/\\n\\n        // Token in, so we round up overall.\\n\\n        // Calculate the factor by which the invariant will increase after minting BPTAmountOut\\n        uint256 invariantRatio = bptTotalSupply.add(bptAmountOut).divUp(bptTotalSupply);\\n\\n        // Calculate by how much the token balance has to increase to cause invariantRatio\\n        uint256 tokenBalanceRatio = FixedPoint.powUp(invariantRatio, FixedPoint.ONE.divUp(tokenNormalizedWeight));\\n        uint256 tokenBalancePercentageExcess = tokenNormalizedWeight.complement();\\n        uint256 amountInAfterFee = tokenBalance.mulUp(tokenBalanceRatio.sub(FixedPoint.ONE));\\n\\n        uint256 swapFeeExcess = swapFee.mulUp(tokenBalancePercentageExcess);\\n\\n        return amountInAfterFee.divUp(swapFeeExcess.complement());\\n    }\\n\\n    function _calcBptInGivenExactTokensOut(\\n        uint256[] memory balances,\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory amountsOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        // BPT in, so we round up overall.\\n\\n        // First loop to calculate the weighted balance ratio\\n        uint256[] memory tokenBalanceRatiosWithoutFee = new uint256[](amountsOut.length);\\n        uint256 weightedBalanceRatio = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            tokenBalanceRatiosWithoutFee[i] = balances[i].sub(amountsOut[i]).divUp(balances[i]);\\n            weightedBalanceRatio = weightedBalanceRatio.add(\\n                tokenBalanceRatiosWithoutFee[i].mulUp(normalizedWeights[i])\\n            );\\n        }\\n\\n        //Second loop to calculate new amounts in taking into account the fee on the % excess\\n        uint256 invariantRatio = FixedPoint.ONE;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            uint256 tokenBalancePercentageExcess;\\n            uint256 tokenBalanceRatio;\\n            // For each ratioSansFee, compare with the total weighted ratio (weightedBalanceRatio) and\\n            // decrease the fee from what goes above it\\n            if (weightedBalanceRatio <= tokenBalanceRatiosWithoutFee[i]) {\\n                tokenBalancePercentageExcess = 0;\\n            } else {\\n                tokenBalancePercentageExcess = weightedBalanceRatio.sub(tokenBalanceRatiosWithoutFee[i]).divUp(\\n                    tokenBalanceRatiosWithoutFee[i].complement()\\n                );\\n            }\\n\\n            uint256 swapFeeExcess = swapFee.mulUp(tokenBalancePercentageExcess);\\n\\n            uint256 amountOutBeforeFee = amountsOut[i].divUp(swapFeeExcess.complement());\\n\\n            tokenBalanceRatio = amountOutBeforeFee.divUp(balances[i]).complement();\\n\\n            invariantRatio = invariantRatio.mulDown(FixedPoint.powDown(tokenBalanceRatio, normalizedWeights[i]));\\n        }\\n\\n        return bptTotalSupply.mulUp(invariantRatio.complement());\\n    }\\n\\n    function _calcTokenOutGivenExactBptIn(\\n        uint256 tokenBalance,\\n        uint256 tokenNormalizedWeight,\\n        uint256 bptAmountIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        /*****************************************************************************************\\n        // exactBPTInForTokenOut                                                                //\\n        // a = tokenAmountOut                                                                   //\\n        // b = tokenBalance                /      /    totalBPT - bptIn       \\\\    (1 / w)  \\\\   //\\n        // bptIn = bptAmountIn    a = b * |  1 - | --------------------------  | ^           |  //\\n        // bpt = totalBPT                  \\\\      \\\\       totalBPT            /             /   //\\n        // w = tokenWeight                                                                      //\\n        *****************************************************************************************/\\n\\n        // Token out, so we round down overall.\\n\\n        // Calculate the factor by which the invariant will decrease after burning BPTAmountIn\\n        uint256 invariantRatio = bptTotalSupply.sub(bptAmountIn).divUp(bptTotalSupply);\\n\\n        // Calculate by how much the token balance has to increase to cause invariantRatio\\n        uint256 tokenBalanceRatio = FixedPoint.powUp(invariantRatio, FixedPoint.ONE.divUp(tokenNormalizedWeight));\\n        uint256 tokenBalancePercentageExcess = tokenNormalizedWeight.complement();\\n\\n        //Because of rounding up, tokenBalanceRatio can be greater than one\\n        uint256 amountOutBeforeFee = tokenBalance.mulDown(tokenBalanceRatio.complement());\\n\\n        uint256 swapFeeExcess = swapFee.mulUp(tokenBalancePercentageExcess);\\n\\n        return amountOutBeforeFee.mulDown(swapFeeExcess.complement());\\n    }\\n\\n    function _calcTokensOutGivenExactBptIn(\\n        uint256[] memory currentBalances,\\n        uint256 bptAmountIn,\\n        uint256 totalBPT\\n    ) internal pure returns (uint256[] memory) {\\n        /**********************************************************************************************\\n        // exactBPTInForTokensOut                                                                    //\\n        // (per token)                                                                               //\\n        // aO = tokenAmountOut             /        bptIn         \\\\                                  //\\n        // b = tokenBalance      a0 = b * | ---------------------  |                                 //\\n        // bptIn = bptAmountIn             \\\\       totalBPT       /                                  //\\n        // bpt = totalBPT                                                                            //\\n        **********************************************************************************************/\\n\\n        // Since we're computing an amount out, we round down overall. This means rounding down on both the\\n        // multiplication and division.\\n\\n        uint256 bptRatio = bptAmountIn.divDown(totalBPT);\\n\\n        uint256[] memory amountsOut = new uint256[](currentBalances.length);\\n        for (uint256 i = 0; i < currentBalances.length; i++) {\\n            amountsOut[i] = currentBalances[i].mulDown(bptRatio);\\n        }\\n\\n        return amountsOut;\\n    }\\n\\n    function _calcDueTokenProtocolSwapFee(\\n        uint256 balance,\\n        uint256 normalizedWeight,\\n        uint256 previousInvariant,\\n        uint256 currentInvariant,\\n        uint256 protocolSwapFeePercentage\\n    ) internal pure returns (uint256) {\\n        /*********************************************************************************\\n        /*  protocolSwapFee * balanceToken * ( 1 - (previousInvariant / currentInvariant) ^ (1 / weightToken))\\n        *********************************************************************************/\\n\\n        // We round down to prevent issues in the Pool's accounting, even if it means paying slightly less protocol fees\\n        // to the Vault.\\n\\n        // Fee percentage and balance multiplications round down, while the subtrahend (power) rounds up (as does the\\n        // base). Because previousInvariant / currentInvariant <= 1, the exponent rounds down.\\n\\n        if (currentInvariant < previousInvariant) {\\n            // This should never happen, but this acts as a safeguard to prevent the Pool from entering a locked state\\n            // in which joins and exits revert while computing accumulated swap fees.\\n            return 0;\\n        }\\n\\n        uint256 base = previousInvariant.divUp(currentInvariant);\\n        uint256 exponent = FixedPoint.ONE.divDown(normalizedWeight);\\n\\n        uint256 power = FixedPoint.powUp(base, exponent);\\n\\n        uint256 tokenAccruedFees = balance.mulDown(power.complement());\\n        return tokenAccruedFees.mulDown(protocolSwapFeePercentage);\\n    }\\n}\\n\",\"keccak256\":\"0x0a8fe1dbb56ff88d38a0f4470792cbdd02867f6c2c1d602abfbb3ef19fadb8ef\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/weighted/WeightedPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../lib/math/FixedPoint.sol\\\";\\nimport \\\"../../lib/helpers/InputHelpers.sol\\\";\\n\\nimport \\\"../BaseMinimalSwapInfoPool.sol\\\";\\n\\nimport \\\"./WeightedMath.sol\\\";\\nimport \\\"./WeightedPoolUserDataHelpers.sol\\\";\\n\\n// This contract relies on tons of immutable state variables to\\n// perform efficient lookup, without resorting to storage reads.\\n// solhint-disable max-states-count\\n\\ncontract WeightedPool is BaseMinimalSwapInfoPool, WeightedMath {\\n    using FixedPoint for uint256;\\n    using WeightedPoolUserDataHelpers for bytes;\\n\\n    // The protocol fees will be always charged using the token associated to the max weight in the pool.\\n    // Since these Pools will register tokens only once, we can assume this index will be constant.\\n    uint256 private immutable _maxWeightTokenIndex;\\n\\n    uint256 private immutable _normalizedWeight0;\\n    uint256 private immutable _normalizedWeight1;\\n    uint256 private immutable _normalizedWeight2;\\n    uint256 private immutable _normalizedWeight3;\\n    uint256 private immutable _normalizedWeight4;\\n    uint256 private immutable _normalizedWeight5;\\n    uint256 private immutable _normalizedWeight6;\\n\\n    uint256 private _lastInvariant;\\n\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\n\\n    constructor(\\n        IVault vault,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256[] memory weights,\\n        uint256 swapFee,\\n        uint256 emergencyPeriod,\\n        uint256 emergencyPeriodCheckExtension\\n    ) BaseMinimalSwapInfoPool(vault, name, symbol, tokens, swapFee, emergencyPeriod, emergencyPeriodCheckExtension) {\\n        InputHelpers.ensureInputLengthMatch(weights.length, tokens.length);\\n\\n        // Check valid weights and compute normalized weights\\n        uint256 sumWeights = 0;\\n        for (uint8 i = 0; i < weights.length; i++) {\\n            sumWeights = sumWeights.add(weights[i]);\\n        }\\n\\n        uint256 maxWeightTokenIndex = 0;\\n        uint256 maxNormalizedWeight = 0;\\n        uint256[] memory normalizedWeights = new uint256[](weights.length);\\n\\n        for (uint8 i = 0; i < normalizedWeights.length; i++) {\\n            uint256 normalizedWeight = weights[i].div(sumWeights);\\n            require(normalizedWeight >= _MIN_WEIGHT, \\\"MIN_WEIGHT\\\");\\n            normalizedWeights[i] = normalizedWeight;\\n\\n            if (normalizedWeight > maxNormalizedWeight) {\\n                maxWeightTokenIndex = i;\\n                maxNormalizedWeight = normalizedWeight;\\n            }\\n        }\\n\\n        _maxWeightTokenIndex = maxWeightTokenIndex;\\n        _normalizedWeight0 = weights.length > 0 ? normalizedWeights[0] : 0;\\n        _normalizedWeight1 = weights.length > 1 ? normalizedWeights[1] : 0;\\n        _normalizedWeight2 = weights.length > 2 ? normalizedWeights[2] : 0;\\n        _normalizedWeight3 = weights.length > 3 ? normalizedWeights[3] : 0;\\n        _normalizedWeight4 = weights.length > 4 ? normalizedWeights[4] : 0;\\n        _normalizedWeight5 = weights.length > 5 ? normalizedWeights[5] : 0;\\n        _normalizedWeight6 = weights.length > 6 ? normalizedWeights[6] : 0;\\n    }\\n\\n    function _normalizedWeight(IERC20 token) internal view virtual returns (uint256) {\\n        // prettier-ignore\\n        if (token == _token0) { return _normalizedWeight0; }\\n        else if (token == _token1) { return _normalizedWeight1; }\\n        else if (token == _token2) { return _normalizedWeight2; }\\n        else if (token == _token3) { return _normalizedWeight3; }\\n        else if (token == _token4) { return _normalizedWeight4; }\\n        else if (token == _token5) { return _normalizedWeight5; }\\n        else if (token == _token6) { return _normalizedWeight6; }\\n        else {\\n            revert(\\\"INVALID_TOKEN\\\");\\n        }\\n    }\\n\\n    function _normalizedWeights() internal view virtual returns (uint256[] memory) {\\n        uint256[] memory normalizedWeights = new uint256[](_totalTokens);\\n\\n        // prettier-ignore\\n        {\\n            if (_totalTokens > 0) { normalizedWeights[0] = _normalizedWeight0; } else { return normalizedWeights; }\\n            if (_totalTokens > 1) { normalizedWeights[1] = _normalizedWeight1; } else { return normalizedWeights; }\\n            if (_totalTokens > 2) { normalizedWeights[2] = _normalizedWeight2; } else { return normalizedWeights; }\\n            if (_totalTokens > 3) { normalizedWeights[3] = _normalizedWeight3; } else { return normalizedWeights; }\\n            if (_totalTokens > 4) { normalizedWeights[4] = _normalizedWeight4; } else { return normalizedWeights; }\\n            if (_totalTokens > 5) { normalizedWeights[5] = _normalizedWeight5; } else { return normalizedWeights; }\\n            if (_totalTokens > 6) { normalizedWeights[6] = _normalizedWeight6; } else { return normalizedWeights; }\\n        }\\n\\n        return normalizedWeights;\\n    }\\n\\n    function getLastInvariant() external view returns (uint256) {\\n        return _lastInvariant;\\n    }\\n\\n    function getInvariant() external view returns (uint256) {\\n        (, uint256[] memory balances) = _vault.getPoolTokens(_poolId);\\n        uint256[] memory normalizedWeights = _normalizedWeights();\\n        return WeightedMath._calculateInvariant(normalizedWeights, balances);\\n    }\\n\\n    function getNormalizedWeights() external view returns (uint256[] memory) {\\n        return _normalizedWeights();\\n    }\\n\\n    // Base Pool handlers\\n\\n    // Swap\\n\\n    function _onSwapGivenIn(\\n        IPoolSwapStructs.SwapRequestGivenIn memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) internal view virtual override noEmergencyPeriod returns (uint256) {\\n        require(swapRequest.amountIn <= currentBalanceTokenIn.mul(_MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        return\\n            WeightedMath._calcOutGivenIn(\\n                currentBalanceTokenIn,\\n                _normalizedWeight(swapRequest.tokenIn),\\n                currentBalanceTokenOut,\\n                _normalizedWeight(swapRequest.tokenOut),\\n                swapRequest.amountIn\\n            );\\n    }\\n\\n    function _onSwapGivenOut(\\n        IPoolSwapStructs.SwapRequestGivenOut memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) internal view virtual override noEmergencyPeriod returns (uint256) {\\n        require(swapRequest.amountOut <= currentBalanceTokenOut.mul(_MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        return\\n            WeightedMath._calcInGivenOut(\\n                currentBalanceTokenIn,\\n                _normalizedWeight(swapRequest.tokenIn),\\n                currentBalanceTokenOut,\\n                _normalizedWeight(swapRequest.tokenOut),\\n                swapRequest.amountOut\\n            );\\n    }\\n\\n    // Initialize\\n\\n    function _onInitializePool(\\n        bytes32,\\n        address,\\n        address,\\n        bytes memory userData\\n    ) internal virtual override noEmergencyPeriod returns (uint256, uint256[] memory) {\\n        WeightedPool.JoinKind kind = userData.joinKind();\\n        require(kind == WeightedPool.JoinKind.INIT, \\\"UNINITIALIZED\\\");\\n\\n        uint256[] memory amountsIn = userData.initialAmountsIn();\\n        require(amountsIn.length == _totalTokens, \\\"ERR_AMOUNTS_IN_LENGTH\\\");\\n        _upscaleArray(amountsIn, _scalingFactors());\\n\\n        uint256[] memory normalizedWeights = _normalizedWeights();\\n\\n        uint256 invariantAfterJoin = WeightedMath._calculateInvariant(normalizedWeights, amountsIn);\\n\\n        uint256 bptAmountOut = Math.mul(invariantAfterJoin, _totalTokens);\\n\\n        _lastInvariant = invariantAfterJoin;\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    // Join\\n\\n    function _onJoinPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory currentBalances,\\n        uint256,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        override\\n        noEmergencyPeriod\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        uint256[] memory normalizedWeights = _normalizedWeights();\\n\\n        // Due protocol swap fees are computed by measuring the growth of the invariant from the previous join or exit\\n        // event and now - the invariant's growth is due exclusively to swap fees.\\n        uint256 invariantBeforeJoin = WeightedMath._calculateInvariant(normalizedWeights, currentBalances);\\n\\n        uint256[] memory dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(\\n            currentBalances,\\n            normalizedWeights,\\n            _lastInvariant,\\n            invariantBeforeJoin,\\n            protocolSwapFeePercentage\\n        );\\n\\n        // Update current balances by subtracting the protocol due fee amounts\\n        _subtractToCurrentBalances(currentBalances, dueProtocolFeeAmounts);\\n        (uint256 bptAmountOut, uint256[] memory amountsIn) = _doJoin(currentBalances, normalizedWeights, userData);\\n\\n        // Update the invariant with the balances the Pool will have after the join, in order to compute the due\\n        // protocol swap fees in future joins and exits.\\n        _lastInvariant = _invariantAfterJoin(currentBalances, amountsIn, normalizedWeights);\\n\\n        return (bptAmountOut, amountsIn, dueProtocolFeeAmounts);\\n    }\\n\\n    function _doJoin(\\n        uint256[] memory currentBalances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        JoinKind kind = userData.joinKind();\\n\\n        if (kind == JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\n            return _joinExactTokensInForBPTOut(currentBalances, normalizedWeights, userData);\\n        } else if (kind == JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {\\n            return _joinTokenInForExactBPTOut(currentBalances, normalizedWeights, userData);\\n        } else {\\n            revert(\\\"UNHANDLED_JOIN_KIND\\\");\\n        }\\n    }\\n\\n    function _joinExactTokensInForBPTOut(\\n        uint256[] memory currentBalances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        (uint256[] memory amountsIn, uint256 minBPTAmountIn) = userData.exactTokensInForBptOut();\\n        require(amountsIn.length == _totalTokens, \\\"ERR_AMOUNTS_IN_LENGTH\\\");\\n        _upscaleArray(amountsIn, _scalingFactors());\\n\\n        uint256 bptAmountOut = WeightedMath._calcBptOutGivenExactTokensIn(\\n            currentBalances,\\n            normalizedWeights,\\n            amountsIn,\\n            totalSupply(),\\n            _swapFee\\n        );\\n\\n        require(bptAmountOut >= minBPTAmountIn, \\\"BPT_OUT_MIN_AMOUNT\\\");\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function _joinTokenInForExactBPTOut(\\n        uint256[] memory currentBalances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();\\n\\n        uint256 bptTotalSupply = totalSupply();\\n\\n        //Verifies that invariant ratio is not greater than max\\n        uint256 invariantRatio = bptTotalSupply.add(bptAmountOut).div(bptTotalSupply);\\n        require(invariantRatio <= _MAX_INVARIANT_RATIO, \\\"MAX_OUT_BPT_FOR_TOKEN_IN\\\");\\n\\n        uint256[] memory amountsIn = new uint256[](_totalTokens);\\n        amountsIn[tokenIndex] = WeightedMath._calcTokenInGivenExactBptOut(\\n            currentBalances[tokenIndex],\\n            normalizedWeights[tokenIndex],\\n            bptAmountOut,\\n            bptTotalSupply,\\n            _swapFee\\n        );\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    // Exit\\n\\n    function _onExitPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory currentBalances,\\n        uint256,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        uint256[] memory normalizedWeights = _normalizedWeights();\\n\\n        // Due protocol swap fees are computed by measuring the growth of the invariant from the previous join or exit\\n        // event and now - the invariant's growth is due exclusively to swap fees.\\n        uint256 invariantBeforeExit = WeightedMath._calculateInvariant(normalizedWeights, currentBalances);\\n        uint256[] memory dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(\\n            currentBalances,\\n            normalizedWeights,\\n            _lastInvariant,\\n            invariantBeforeExit,\\n            protocolSwapFeePercentage\\n        );\\n\\n        // Update current balances by subtracting the protocol due fee amounts\\n        _subtractToCurrentBalances(currentBalances, dueProtocolFeeAmounts);\\n        (uint256 bptAmountIn, uint256[] memory amountsOut) = _doExit(currentBalances, normalizedWeights, userData);\\n\\n        // Update the invariant with the balances the Pool will have after the exit, in order to compute the due\\n        // protocol swap fees in future joins and exits.\\n        _lastInvariant = _invariantAfterExit(currentBalances, amountsOut, normalizedWeights);\\n\\n        return (bptAmountIn, amountsOut, dueProtocolFeeAmounts);\\n    }\\n\\n    function _doExit(\\n        uint256[] memory currentBalances,\\n        uint256[] memory normalizedWeights,\\n        bytes memory userData\\n    ) private view returns (uint256, uint256[] memory) {\\n        ExitKind kind = userData.exitKind();\\n\\n        if (kind == ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {\\n            return _exitExactBPTInForTokenOut(normalizedWeights, currentBalances, userData);\\n        } else if (kind == ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\\n            return _exitExactBPTInForTokensOut(currentBalances, userData);\\n        } else if (kind == ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {\\n            return _exitBPTInForExactTokensOut(normalizedWeights, currentBalances, userData);\\n        } else {\\n            revert(\\\"UNHANDLED_EXIT_KIND\\\");\\n        }\\n    }\\n\\n    function _exitExactBPTInForTokenOut(\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory currentBalances,\\n        bytes memory userData\\n    ) private view noEmergencyPeriod returns (uint256, uint256[] memory) {\\n        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();\\n        require(tokenIndex < _totalTokens, \\\"OUT_OF_BOUNDS\\\");\\n\\n        uint256 bptTotalSupply = totalSupply();\\n\\n        // Verifies that invariant ratio is not lower than min\\n        uint256 invariantRatio = bptTotalSupply.sub(bptAmountIn).div(bptTotalSupply);\\n        require(invariantRatio >= _MIN_INVARIANT_RATIO, \\\"MIN_BPT_IN_FOR_TOKEN_OUT\\\");\\n\\n        // We exit in a single token, so we initialize amountsOut with zeros\\n        uint256[] memory amountsOut = new uint256[](_totalTokens);\\n\\n        // And then assign the result to the selected token\\n        amountsOut[tokenIndex] = WeightedMath._calcTokenOutGivenExactBptIn(\\n            currentBalances[tokenIndex],\\n            normalizedWeights[tokenIndex],\\n            bptAmountIn,\\n            totalSupply(),\\n            _swapFee\\n        );\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    /**\\n     * @dev Note we are not tagging this function with `noEmergencyPeriod` to allow users exit in a proportional\\n     * manner in case there is an emergency in the pool. This operation should never be restricted.\\n     */\\n    function _exitExactBPTInForTokensOut(uint256[] memory currentBalances, bytes memory userData)\\n        private\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        uint256 bptAmountIn = userData.exactBptInForTokensOut();\\n\\n        uint256[] memory amountsOut = WeightedMath._calcTokensOutGivenExactBptIn(\\n            currentBalances,\\n            bptAmountIn,\\n            totalSupply()\\n        );\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function _exitBPTInForExactTokensOut(\\n        uint256[] memory normalizedWeights,\\n        uint256[] memory currentBalances,\\n        bytes memory userData\\n    ) private view noEmergencyPeriod returns (uint256, uint256[] memory) {\\n        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();\\n        InputHelpers.ensureInputLengthMatch(amountsOut.length, _totalTokens);\\n        _upscaleArray(amountsOut, _scalingFactors());\\n\\n        uint256 bptAmountIn = WeightedMath._calcBptInGivenExactTokensOut(\\n            currentBalances,\\n            normalizedWeights,\\n            amountsOut,\\n            totalSupply(),\\n            _swapFee\\n        );\\n        require(bptAmountIn <= maxBPTAmountIn, \\\"BPT_IN_MAX_AMOUNT\\\");\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    // Helpers\\n\\n    function _getDueProtocolFeeAmounts(\\n        uint256[] memory currentBalances,\\n        uint256[] memory normalizedWeights,\\n        uint256 previousInvariant,\\n        uint256 currentInvariant,\\n        uint256 protocolSwapFeePercentage\\n    ) private view returns (uint256[] memory) {\\n        // Initialize with zeros\\n        uint256[] memory dueProtocolFeeAmounts = new uint256[](_totalTokens);\\n\\n        // Verifies that invariant ratio is not lower than min.\\n        // If lower than min, protocol fees will charge up to the min ratio allowed.\\n        uint256 invariantRatio = previousInvariant.divUp(currentInvariant);\\n        if (invariantRatio <= _MIN_INVARIANT_RATIO) {\\n            currentInvariant = previousInvariant.divUp(_MIN_INVARIANT_RATIO);\\n        }\\n\\n        // The protocol swap fee are always paid using the token with the largest weight in the pool.\\n        // As this is then token that will probably have the largest balance in the pool, we can\\n        // make sure this process won't unbalance the pool in a considerable way.\\n        dueProtocolFeeAmounts[_maxWeightTokenIndex] = WeightedMath._calcDueTokenProtocolSwapFee(\\n            currentBalances[_maxWeightTokenIndex],\\n            normalizedWeights[_maxWeightTokenIndex],\\n            previousInvariant,\\n            currentInvariant,\\n            protocolSwapFeePercentage\\n        );\\n\\n        return dueProtocolFeeAmounts;\\n    }\\n\\n    function _invariantAfterJoin(\\n        uint256[] memory currentBalances,\\n        uint256[] memory amountsOut,\\n        uint256[] memory normalizedWeights\\n    ) private view returns (uint256) {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            currentBalances[i] = currentBalances[i].add(amountsOut[i]);\\n        }\\n\\n        return WeightedMath._calculateInvariant(normalizedWeights, currentBalances);\\n    }\\n\\n    function _invariantAfterExit(\\n        uint256[] memory currentBalances,\\n        uint256[] memory amountsOut,\\n        uint256[] memory normalizedWeights\\n    ) private view returns (uint256) {\\n        _subtractToCurrentBalances(currentBalances, amountsOut);\\n        return WeightedMath._calculateInvariant(normalizedWeights, currentBalances);\\n    }\\n\\n    function _subtractToCurrentBalances(uint256[] memory currentBalances, uint256[] memory amounts) private view {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            currentBalances[i] = currentBalances[i].sub(amounts[i]);\\n        }\\n    }\\n\\n    // This function returns the appreciation of one BPT relative to the\\n    // underlying tokens. This starts at 1 when the pool is initialized and grows over time\\n    // It's the equivalent to Curve's get_virtual_price() function\\n    function getRate() public view override returns (uint256) {\\n        (, uint256[] memory balances) = _vault.getPoolTokens(_poolId);\\n        return\\n            Math.mul(WeightedMath._calculateInvariant(_normalizedWeights(), balances), _totalTokens).div(totalSupply());\\n    }\\n}\\n\",\"keccak256\":\"0x19d3d083d3e409e7f362e4c8e7c0233344048d6931707eb7da836eddbecc3900\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/weighted/WeightedPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../vault/interfaces/IVault.sol\\\";\\n\\nimport \\\"../BasePoolFactory.sol\\\";\\n\\nimport \\\"./WeightedPool.sol\\\";\\n\\ncontract WeightedPoolFactory is BasePoolFactory {\\n    constructor(IVault _vault) BasePoolFactory(_vault) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Deploys a new `WeightedPool`.\\n     */\\n    function create(\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256[] memory weights,\\n        uint256 swapFee,\\n        uint256 emergencyPeriod,\\n        uint256 emergencyPeriodCheckExtension\\n    ) external returns (address) {\\n        address pool = address(\\n            new WeightedPool(\\n                vault,\\n                name,\\n                symbol,\\n                tokens,\\n                weights,\\n                swapFee,\\n                emergencyPeriod,\\n                emergencyPeriodCheckExtension\\n            )\\n        );\\n        _register(pool);\\n        return pool;\\n    }\\n}\\n\",\"keccak256\":\"0x34483095a29bf6fbe4410cb72897eb9ccf8cc171820e49e4d8e4111c7c185d7e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/weighted/WeightedPoolUserDataHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./WeightedPool.sol\\\";\\n\\nlibrary WeightedPoolUserDataHelpers {\\n    function joinKind(bytes memory self) internal pure returns (WeightedPool.JoinKind) {\\n        return abi.decode(self, (WeightedPool.JoinKind));\\n    }\\n\\n    function exitKind(bytes memory self) internal pure returns (WeightedPool.ExitKind) {\\n        return abi.decode(self, (WeightedPool.ExitKind));\\n    }\\n\\n    function initialAmountsIn(bytes memory self) internal pure returns (uint256[] memory amountsIn) {\\n        (, amountsIn) = abi.decode(self, (WeightedPool.JoinKind, uint256[]));\\n    }\\n\\n    function exactTokensInForBptOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountIn)\\n    {\\n        (, amountsIn, minBPTAmountIn) = abi.decode(self, (WeightedPool.JoinKind, uint256[], uint256));\\n    }\\n\\n    function tokenInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut, uint256 tokenIndex) {\\n        (, bptAmountOut, tokenIndex) = abi.decode(self, (WeightedPool.JoinKind, uint256, uint256));\\n    }\\n\\n    function exactBptInForTokenOut(bytes memory self) internal pure returns (uint256 bptAmountIn, uint256 tokenIndex) {\\n        (, bptAmountIn, tokenIndex) = abi.decode(self, (WeightedPool.ExitKind, uint256, uint256));\\n    }\\n\\n    function exactBptInForTokensOut(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (WeightedPool.ExitKind, uint256));\\n    }\\n\\n    function bptInForExactTokensOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsOut, uint256 maxBPTAmountIn)\\n    {\\n        (, amountsOut, maxBPTAmountIn) = abi.decode(self, (WeightedPool.ExitKind, uint256[], uint256));\\n    }\\n}\\n\",\"keccak256\":\"0xec8b6cbbecf4c3c78cbbfd56ef52840e4a627601523fdba6e4112e51ec95e6a8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either either token contracts that adhere to the IERC20 interface,\\n * or a sentinel value that represents ETH (the zero address). We're just relying on the fact that `interface` can be\\n * used to declare new address-like types.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0xe03ae91bfc280018445aa57c176a315a0e6989b1653319f15186de65fb72fb24\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthorizer {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x998d8893c0ab3bbeec0ad091efb7f97d44fb68c5c58a38d61ab801eec514391c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\n\\n/**\\n * @dev Interface all Pool contracts should implement. Note that this is not the complete Pool contract interface, as it\\n * is missing the swap hooks: Pool contracts should instead inherit from either IGeneralPool or IMinimalSwapInfoPool.\\n */\\ninterface IBasePool {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to join this Pool. Returns how many tokens the user\\n     * should provide for each registered token, as well as how many protocol fees the Pool owes to the Vault. After\\n     * returning, the Vault will take tokens from the `sender` and add it to the Pool's balance, as well as collect\\n     * reported protocol fees. The current protocol swap fee percentage is provided to help compute this value.\\n     *\\n     * Due protocol fees are reported and charged on join events so that new users join the Pool free of debt.\\n     *\\n     * `sender` is the account performing the join (from whom tokens will be withdrawn), and `recipient` an account\\n     * designated to receive any benefits (typically pool shares). `currentBalances` contains the total token balances\\n     * for each token the Pool registered in the Vault, in the same order as `IVault.getPoolTokens` would return.\\n     *\\n     * `latestBlockNumberUsed` is the last block number in which any of the Pool's registered tokens last changed its\\n     * balance. This can be used to implement price oracles that are resilient to 'sandwich' attacks.\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] calldata currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFee,\\n        bytes calldata userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to exit this Pool. Returns how many tokens the Vault\\n     * should deduct from the Pool, as well as how many protocol fees the Pool owes to the Vault. After returning, the\\n     * Vault will take tokens from the Pool's balance and add grant them to `recipient`, as well as collect reported\\n     * protocol fees. The current protocol swap fee percentage is provided to help compute this value.\\n     *\\n     * Due protocol fees are reported and charged on exit events so that users exit the Pool having paid all debt.\\n     *\\n     * `sender` is the account performing the exit (typically the holder of pool shares), and `recipient` the account to\\n     * which the Vault will grant tokens. `currentBalances` contains the total token balances for each token the Pool\\n     * registered in the Vault, in the same order as `IVault.getPoolTokens` would return.\\n     *\\n     * `latestBlockNumberUsed` is the last block number in which any of the Pool's registered tokens last changed its\\n     * balance. This can be used to implement price oracles that are resilient to 'sandwich' attacks.\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] calldata currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFee,\\n        bytes calldata userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev This function returns the appreciation of one BPT relative to the\\n     * underlying tokens. This starts at 1 when the pool is created and grows over time\\n     * It's the equivalent to Curve's get_virtual_price() function\\n     */\\n    function getRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x50aff9c877780f6c35028c71146cad30605468479fa2ae81acaab792abe22f25\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanReceiver {\\n    function receiveFlashLoan(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata feeAmounts,\\n        bytes calldata receiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7e8edb04c4eb005a04e90b41f70ac354b7516bbd44fd00f5b923650a483b06f1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface contracts for Pools with the minimal swap info or two token specialization settings should implement.\\n */\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.batchSwapGivenIn` to swap with this Pool. Returns the number\\n     * of tokens the Pool will grant to the user as part of the swap.\\n     *\\n     * This can be often implemented by a `view` function, since many pricing algorithms don't need to track state\\n     * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n     * indeed the Vault.\\n     */\\n    function onSwapGivenIn(\\n        IPoolSwapStructs.SwapRequestGivenIn calldata swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amountOut);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.batchSwapGivenOut` to swap with this Pool. Returns the number\\n     * of tokens the user must grant to the Pool as part of the swap.\\n     *\\n     * This can be often implemented by a `view` function, since many pricing algorithms don't need to track state\\n     * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n     * indeed the Vault.\\n     */\\n    function onSwapGivenOut(\\n        IPoolSwapStructs.SwapRequestGivenOut calldata swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xc2e761a68c16277dcbbfacda8b2449276cf8a2c93273508465f4429ca07f63c0\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n\\n    // This data structure represents a request for a token swap, where the amount received by the Pool is known.\\n    //\\n    // `tokenIn` and `tokenOut` are the tokens the Pool will receive and send, respectively. `amountIn` is the number of\\n    // `tokenIn` tokens that the Pool will receive.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    // `from` is the origin address where funds the Pool receives are coming from, and `to` is the destination address\\n    // where the funds the Pool sends are going to.\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequestGivenIn {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amountIn;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 latestBlockNumberUsed;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    // This data structure represents a request for a token swap, where the amount sent by the Pool is known.\\n    //\\n    // `tokenIn` and `tokenOut` are the tokens the Pool will receive and send, respectively. `amountOut` is the number\\n    // of `tokenOut` tokens that the Pool will send.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    // `from` is the origin address where funds the Pool receives are coming from, and `to` is the destination address\\n    // where the funds the Pool sends are going to.\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequestGivenOut {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amountOut;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 latestBlockNumberUsed;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xb999b96973b8dc6435d0fcfafbdd4a05bdecf25d8752552f8311ae055f96d46f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanReceiver.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n    // The only exception to this are relayers. A relayer is an account (typically a contract) that can use the Internal\\n    // Balance and Vault allowance of other accounts. For an account to be able to wield this power, two things must\\n    // happen:\\n    //  - it must be allowed by the Authorizer to call the functions where it intends to use this permission\\n    //  - it must be allowed by each individual user to act in their stead\\n    // This combined requirements means users cannot be tricked into allowing malicious relayers (because they will not\\n    // have been allowed by the Authorizer), nor can a malicious Authorizer allow malicious relayers to drain user funds\\n    // (unless the user then allows this malicious relayer).\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     */\\n    function changeAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Returns true if `user` has allowed `relayer` as a relayer for them.\\n     */\\n    function hasAllowedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for the caller if `allowed` is true, and disallows it otherwise.\\n     */\\n    function changeRelayerAllowance(address relayer, bool allowed) external;\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where it is known as Internal Balance. This Internal Balance can be\\n    // withdrawn or transferred, and it can also be used when joining Pools or performing swaps, with greatly reduced\\n    // gas costs. Swaps and Pool exits can also be made to deposit to Internal Balance.\\n    //\\n    // Internal Balance functions feature batching, which means each call can be used to perform multiple operations of\\n    // the same kind (deposit, withdraw or transfer) at once.\\n\\n    /**\\n     * @dev Data for Internal Balance deposits and withdrawals, which include the possibility for ETH to be sent and\\n     * received without manual WETH wrapping or unwrapping.\\n     */\\n    struct AssetBalanceTransfer {\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    /**\\n     * @dev Data for Internal Balance transfers, which are limited to ERC20 tokens.\\n     */\\n    struct TokenBalanceTransfer {\\n        IERC20 token;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Deposits `amount` assets from each `sender` address into Internal Balances of the corresponding `recipient`\\n     * accounts. The senders must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n     *\\n     * If any of the senders doesn't match the contract caller, then it must be a relayer for them.\\n     *\\n     * ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call. It will be\\n     * wrapped into WETH and deposited as that token. Any ETH amount remaining will be sent back to the caller (not the\\n     * sender, which is relevant for relayers).\\n     *\\n     * Reverts if ETH was forwarded but not used in any transfer.\\n     */\\n    function depositToInternalBalance(AssetBalanceTransfer[] memory transfers) external payable;\\n\\n    /**\\n     * @dev Withdraws `amount` assets from each `sender` address' Internal Balance to the corresponding `recipient`\\n     * accounts. The senders must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n     *\\n     * If any of the senders doesn't match the contract caller, then it must be a relayer for them.\\n     *\\n     * ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n     * it to the recipient.\\n     *\\n     * This charges protocol withdrawal fees.\\n     */\\n    function withdrawFromInternalBalance(AssetBalanceTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Transfers tokens from the internal balance of each `sender` address to Internal Balances of each\\n     * `recipient`.\\n     *\\n     * This does not charge protocol withdrawal fees.\\n     */\\n    function transferInternalBalance(TokenBalanceTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Transfers tokens from each `sender` address to the corresponding `recipient` accounts, making use of the\\n     * Vault's allowance. This action is equivalent to an Internal Balance deposit followed immediately by a withdrawal,\\n     * except withdraw fees are not charged.\\n     *\\n     * Typically, this function will only be called by relayers, letting them leverage the allowance users have already\\n     * given to the Vault.\\n     */\\n    function transferToExternalBalance(TokenBalanceTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either due to calls to the Internal Balance functions, or\\n     * due to interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will be reflected here\\n     * as having used WETH.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for lower swap gas costs at the cost of reduced\\n    // functionality:\\n    //\\n    //  - general: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // and these increase with the number of registered tokens.\\n    //\\n    //  - minimal swap info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer v1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - two tokens: only allows two tokens to be registered. This achieves the lowest possible swap gas costs. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers a the caller as a Pool with a chosen specialization setting. Returns the Pool's ID, which is used\\n     * in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed.\\n     *\\n     * The caller is expected to be a smart contract that implements one of `IGeneralPool` or `IMinimalSwapInfoPool`.\\n     * This contract is known as the Pool's contract. Note that the same caller may register itself as multiple Pools\\n     * with unique Pool IDs, or in other words, multiple Pools may have the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 poolId);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for each token. Asset Managers can manage a Pool's tokens by withdrawing and depositing them directly\\n     * (via `withdrawFromPoolBalance` and `depositToPoolBalance`), and even set them to arbitrary amounts\\n     * (`updateManagedBalance`). They are therefore expected to be highly secured smart contracts with sound design\\n     * principles, and the decision to add an Asset Manager should not be made lightly.\\n     *\\n     * Pools can not set an Asset Manager by setting them to the zero address. Once an Asset Manager is set, it cannot\\n     * be changed, except by deregistering the associated token and registering again with a different Manager.\\n     *\\n     * Emits `TokensRegistered` events.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] calldata tokens,\\n        address[] calldata assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] calldata tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens and total balance for each.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps.\\n     */\\n    function getPoolTokens(bytes32 poolId) external view returns (IERC20[] memory tokens, uint256[] memory balances);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and reported by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of\\n     * `cash` and `managed`.\\n     *\\n     * `blockNumber` is the number of the block in which `token`'s balance was last modified (via either a join, exit,\\n     * swap, or Asset Management interactions). This value is useful to avoid so-called 'sandwich attacks', for example\\n     * when developing price oracles.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 blockNumber,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `maxAmountsIn` arrays must have the same length, and each entry in these indicates the maximum\\n     * token amount to send for each token contract. The amounts to send are decided by the Pool and not the Vault: it\\n     * just enforces these maximums.\\n     *\\n     * `tokens` must have the same length and order as the one returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any).\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implements\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to obtain). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolJoined` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IAsset[] memory assets,\\n        uint256[] memory maxAmountsIn,\\n        bool fromInternalBalance,\\n        bytes memory userData\\n    ) external payable;\\n\\n    /**\\n     * @dev Emitted when a user joins a Pool by calling `joinPool`.\\n     */\\n    event PoolJoined(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        uint256[] amountsIn,\\n        uint256[] protocolFees\\n    );\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdraw is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * `tokens` must have the same length and order as the one returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed, charging protocol withdraw fees.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * Pools are free to implement any arbitrary logic in the `IPool.onExitPool` hook, and may require additional\\n     * information (such as the number of Pool shares to provide). This can be encoded in the `userData` argument, which\\n     * is ignored by the Vault and passed directly to the Pool.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implements\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolExited` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        IAsset[] memory assets,\\n        uint256[] memory minAmountsOut,\\n        bool toInternalBalance,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a user exits a pool by calling `exitPool`.\\n     */\\n    event PoolExited(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        uint256[] amountsOut,\\n        uint256[] protocolFees\\n    );\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `batchSwapGivenIn` and `batchSwapGivenOut` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // Both swap functions are batched, meaning they perform multiple of swaps in sequence. In each individual swap,\\n    // tokens of one kind are sent from the sender to the Pool (this is the 'token in'), and tokens of one\\n    // other kind are sent from the Pool to the sender in exchange (this is the 'token out'). More complex swaps, such\\n    // as one token in to multiple tokens out can be achieved by batching together individual swaps.\\n    //\\n    // Additionally, it is possible to chain swaps by using the output of one of them as the input for the other, as\\n    // well as the opposite. This extended swap is known as a 'multihop' swap, since it 'hops' through a number of\\n    // intermediate tokens before arriving at the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that it is possible to e.g. under certain conditions perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (but\\n    // updating the Pool's internal balances).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or minimum\\n    // amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mecanism, the IAsset sentinel value (the zero address) must be passed\\n    // in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the same\\n    // swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used both when sending and receiving tokens.\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In individual each swap, the amount of tokens sent to\\n     * the Pool is determined by the caller. For swaps where the amount of tokens received from the Pool is instead\\n     * determined, see `batchSwapGivenOut`.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same\\n     * index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token and amount to send to this Pool, and the token to receive from it (but not the amount). This will\\n     * be determined by the Pool's pricing algorithm once the Vault calls the `onSwapGivenIn` hook on it.\\n     *\\n     * Multihop swaps can be executed by passing an `amountIn` value of zero for a swap. This will cause the amount out\\n     * of the previous swap to be used as the amount in of the current one. In such a scenario, `tokenIn` must equal the\\n     * previous swap's `tokenOut`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value (the zero address) for ETH. Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped or\\n     * unwrapped using WETH by the Vault.\\n     *\\n     * Internal Balance usage and recipient are determined by the `funds` struct.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwapGivenIn(\\n        SwapIn[] calldata swaps,\\n        IAsset[] memory assets,\\n        FundManagement calldata funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwapGivenIn`. The tokens in and out are indexed in the\\n     * `assets` array passed to that function, where an ETH asset is translated into WETH.\\n     *\\n     * If `amountIn` is zero, the multihop mechanism is used to determine the actual amount based on the amount out from\\n     * the previous swap.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwapGivenIn` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SwapIn {\\n        bytes32 poolId;\\n        uint256 tokenInIndex;\\n        uint256 tokenOutIndex;\\n        uint256 amountIn;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In individual each swap, the amount of tokens\\n     * received from the Pool is determined by the caller. For swaps where the amount of tokens sent to the Pool is\\n     * instead determined, see `batchSwapGivenIn`.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same\\n     * index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token and amount to receive from this Pool, and the token to send to it (but not the amount). This will\\n     * be determined by the Pool's pricing algorithm once the Vault calls the `onSwapGivenOut` hook on it.\\n     *\\n     * Multihop swaps can be executed by passing an `amountOut` value of zero for a swap. This will cause the amount in\\n     * of the previous swap to be used as the amount out of the current one. In such a scenario, `tokenOut` must equal\\n     * the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value (the zero address) for ETH. Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped or\\n     * unwrapped using WETH by the Vault.\\n     *\\n     * Internal Balance usage and recipient are determined by the `funds` struct.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwapGivenOut(\\n        SwapOut[] calldata swaps,\\n        IAsset[] memory assets,\\n        FundManagement calldata funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwapGivenOut`. The tokens in and out are indexed in the\\n     * `assets` array passed to that function, where an ETH asset is translated into WETH.\\n     *\\n     * If `amountOut` is zero, the multihop mechanism is used to determine the actual amount based on the amount in from\\n     * the previous swap.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwapGivenOut` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SwapOut {\\n        bytes32 poolId;\\n        uint256 tokenInIndex;\\n        uint256 tokenOutIndex;\\n        uint256 amountOut;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `batchSwapGivenIn` and `batchSwapGivenOut`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 tokensIn,\\n        uint256 tokensOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are sent to the Vault from the `sender`'s account, and sent to `recipient`.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so with trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwapGivenIn` or `batchSwapGivenOut`, returning an array of Vault asset deltas.\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwapGivenIn` or `batchSwapGivenOut` call would receive, except the\\n     * `SwapRequest` struct is used instead, and the `kind` argument specifies whether the swap is given in or given\\n     * out.\\n     *\\n     * Unlike `batchSwapGivenIn` and `batchSwapGivenOut`, this function performs no checks on the sender nor recipient\\n     * field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without\\n     * needing to hold tokens, approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        SwapRequest[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    // This struct is identical in layout to SwapIn and SwapOut, except the 'amountIn/Out' field is named 'amount'.\\n    struct SwapRequest {\\n        bytes32 poolId;\\n        uint256 tokenInIndex;\\n        uint256 tokenOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `receiver` and executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the amount to\\n     * loan for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'receiverData' field is ignored by the Vault, and forwarded as-is to `receiver` as part of the\\n     * `receiveFlashLoan` call.\\n     */\\n    function flashLoan(\\n        IFlashLoanReceiver receiver,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata receiverData\\n    ) external;\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous, as they can not only steal a Pool's tokens\\n    // but also manipulate its prices. However, a properly designed Asset Manager smart contract can be used to the\\n    // Pool's benefit, for example by lending unused tokens at an interest, or using them to participate in voting\\n    // protocols.\\n\\n    struct AssetManagerTransfer {\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Returns the Pool's Asset Managers for the given `tokens`. Asset Managers can manage a Pool's assets\\n     * by taking them out of the Vault via `withdrawFromPoolBalance`, `depositToPoolBalance` and `updateManagedBalance`.\\n     */\\n    function getPoolAssetManagers(bytes32 poolId, IERC20[] memory tokens)\\n        external\\n        view\\n        returns (address[] memory assetManagers);\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset manager withdraws or deposits token balance via `withdrawFromPoolBalance`\\n     * or `depositToPoolBalance`.\\n     */\\n    event PoolBalanceChanged(bytes32 indexed poolId, address indexed assetManager, IERC20 indexed token, int256 amount);\\n\\n    /**\\n     * @dev Called by a Pool's Asset Manager to withdraw tokens from the Vault. This decreases\\n     * the Pool's cash but increases its managed balance, leaving the total balance unchanged.\\n     * Array input allows asset managers to manage multiple tokens for a pool in a single transaction.\\n     */\\n    function withdrawFromPoolBalance(bytes32 poolId, AssetManagerTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Called by a Pool's Asset Manager to deposit tokens into the Vault. This increases the Pool's cash,\\n     * but decreases its managed balance, leaving the total balance unchanged. The Asset Manager must have approved\\n     * the Vault to use each token. Array input allows asset managers to manage multiple tokens for a pool in a\\n     * single transaction.\\n     */\\n    function depositToPoolBalance(bytes32 poolId, AssetManagerTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Called by a Pool's Asset Manager for to update the amount held outside the vault. This does not affect\\n     * the Pool's cash balance, but because the managed balance changes, it does alter the total. The external\\n     * amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     * Array input allows asset managers to manage multiple tokens for a pool in a single transaction.\\n     */\\n    function updateManagedBalance(bytes32 poolId, AssetManagerTransfer[] memory transfers) external;\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are three kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - withdraw fees: charged when users take tokens out of the Vault, by either calling\\n    // `withdrawFromInternalBalance` or calling `exitPool` without depositing to Internal Balance. The fee is a\\n    // percentage of the amount withdrawn. Swaps are unaffected by withdraw fees.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how many swap fees they have charged, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee percentages. These are 18 decimals fixed point numbers, which means that\\n     * e.g. a value of 0.1e18 stands for a 10% fee.\\n     */\\n    function getProtocolFees()\\n        external\\n        view\\n        returns (\\n            uint256 swapFee,\\n            uint256 withdrawFee,\\n            uint256 flashLoanFee\\n        );\\n\\n    /**\\n     * @dev Sets new Protocol fees. The caller must be allowed by the Authorizer to do this, and the new fee values must\\n     * not be above the absolute maximum amounts.\\n     */\\n    function setProtocolFees(\\n        uint256 swapFee,\\n        uint256 withdrawFee,\\n        uint256 flashLoanFee\\n    ) external;\\n\\n    /**\\n     * @dev Returns the amount of protocol fees collected by the Vault for each token in the `tokens` array.\\n     */\\n    function getCollectedFees(IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Withdraws collected protocol fees, transferring them to `recipient`. The caller must be allowed by the\\n     * Authorizer to do this.\\n     */\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaf333d55ca925ff1ec2ea76bb60246545acb6cee0800351e7e13696a775c284d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051615e47380380615e4783398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c615db561009260003980607d528060fd5250615db56000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80630f5a4cf8146200003f578063fbfa77cf146200006e575b600080fd5b620000566200005036600462000307565b62000078565b6040516200006591906200047f565b60405180910390f35b62000056620000fb565b6000807f000000000000000000000000000000000000000000000000000000000000000089898989898989604051620000b19062000163565b620000c4989796959493929190620004a0565b604051809103906000f080158015620000e1573d6000803e3d6000fd5b509050620000ef816200011f565b98975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f9cc152f4650ca2829a210a21551537f4cc4d48c2611ec06974f835e911921b9090600090a250565b6157bb80620005c583390190565b600082601f83011262000182578081fd5b81356200019962000193826200058a565b62000562565b818152915060208083019084810181840286018201871015620001bb57600080fd5b6000805b85811015620001ff57823573ffffffffffffffffffffffffffffffffffffffff81168114620001ec578283fd5b85529383019391830191600101620001bf565b50505050505092915050565b600082601f8301126200021c578081fd5b81356200022d62000193826200058a565b8181529150602080830190848101818402860182018710156200024f57600080fd5b60005b84811015620002705781358452928201929082019060010162000252565b505050505092915050565b600082601f8301126200028c578081fd5b813567ffffffffffffffff811115620002a3578182fd5b620002d660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162000562565b9150808252836020828501011115620002ee57600080fd5b8060208401602084013760009082016020015292915050565b600080600080600080600060e0888a03121562000322578283fd5b873567ffffffffffffffff808211156200033a578485fd5b620003488b838c016200027b565b985060208a01359150808211156200035e578485fd5b6200036c8b838c016200027b565b975060408a013591508082111562000382578485fd5b620003908b838c0162000171565b965060608a0135915080821115620003a6578485fd5b50620003b58a828b016200020b565b979a969950949760808101359660a0820135965060c090910135945092505050565b6000815180845260208085019450808401835b838110156200040857815187529582019590820190600101620003ea565b509495945050505050565b60008151808452815b818110156200043a576020818501810151868301820152016200041c565b818111156200044c5782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600061010073ffffffffffffffffffffffffffffffffffffffff8b16835260208181850152620004d38285018c62000413565b91508382036040850152620004e9828b62000413565b84810360608601528951808252828b01935090820190845b818110156200052957620005168551620005ab565b8352938301939183019160010162000501565b505084810360808601526200053f818a620003d7565b60a08601989098525050505060c081019290925260e09091015295945050505050565b60405181810167ffffffffffffffff811182821017156200058257600080fd5b604052919050565b600067ffffffffffffffff821115620005a1578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff169056fe6103e06040523480156200001257600080fd5b50604051620057bb380380620057bb833981016040819052620000359162000bdd565b878787878686868684516002146200004f57600162000052565b60025b87878787878781818787816003908051906020019062000074929190620009a6565b5080516200008a906004906020840190620009a6565b5050506276a7008211156200009e57600080fd5b62278d00811115620000af57600080fd5b4290910160808190520160a052835160021115620000cc57600080fd5b600784511115620000dc57600080fd5b620000f284620007c460201b62000d331760201c565b67016345785d8a00008311156200010857600080fd5b6040516309b2760f60e01b81526000906001600160a01b038a16906309b2760f9062000139908b9060040162000d82565b602060405180830381600087803b1580156200015457600080fd5b505af115801562000169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018f919062000bc4565b9050886001600160a01b03166366a9c7d2828788516001600160401b0381118015620001ba57600080fd5b50604051908082528060200260200182016040528015620001e5578160200160208202803683370190505b506040518463ffffffff1660e01b8152600401620002069392919062000ce6565b600060405180830381600087803b1580156200022157600080fd5b505af115801562000236573d6000803e3d6000fd5b5050506001600160601b031960608b901b1660c0525060e0819052600684905584516101005284516200026b57600062000282565b846000815181106200027957fe5b60200260200101515b60601b6001600160601b031916610120528451600110620002a5576000620002bc565b84600181518110620002b357fe5b60200260200101515b60601b6001600160601b031916610140528451600210620002df576000620002f6565b84600281518110620002ed57fe5b60200260200101515b60601b6001600160601b0319166101605284516003106200031957600062000330565b846003815181106200032757fe5b60200260200101515b60601b6001600160601b031916610180528451600410620003535760006200036a565b846004815181106200036157fe5b60200260200101515b60601b6001600160601b0319166101a05284516005106200038d576000620003a4565b846005815181106200039b57fe5b60200260200101515b60601b6001600160601b0319166101c0528451600610620003c7576000620003de565b84600681518110620003d557fe5b60200260200101515b60601b6001600160601b0319166101e0528451620003fe57600062000424565b62000424856000815181106200041057fe5b6020026020010151620007d460201b60201c565b6102005284516001106200043a5760006200044c565b6200044c856001815181106200041057fe5b6102205284516002106200046257600062000474565b62000474856002815181106200041057fe5b6102405284516003106200048a5760006200049c565b6200049c856003815181106200041057fe5b610260528451600410620004b2576000620004c4565b620004c4856004815181106200041057fe5b610280528451600510620004da576000620004ec565b620004ec856005815181106200041057fe5b6102a05284516006106200050257600062000514565b62000514856006815181106200041057fe5b6102c081815250505050505050505050505050505050505062000545845186516200087660201b62000d411760201c565b6000805b85518160ff161015620005925762000587868260ff16815181106200056a57fe5b6020026020010151836200088360201b62000d4d1790919060201c565b915060010162000549565b50600080606087516001600160401b0381118015620005b057600080fd5b50604051908082528060200260200182016040528015620005db578160200160208202803683370190505b50905060005b81518160ff1610156200067257600062000621868b8460ff16815181106200060557fe5b60200260200101516200089f60201b62000d661790919060201c565b9050662386f26fc100008110156200063857600080fd5b80838360ff16815181106200064957fe5b6020026020010181815250508381111562000668578160ff1694508093505b50600101620005e1565b506102e08390528751620006885760006200069f565b806000815181106200069657fe5b60200260200101515b610300528751600110620006b5576000620006cc565b80600181518110620006c357fe5b60200260200101515b610320528751600210620006e2576000620006f9565b80600281518110620006f057fe5b60200260200101515b6103405287516003106200070f57600062000726565b806003815181106200071d57fe5b60200260200101515b6103605287516004106200073c57600062000753565b806004815181106200074a57fe5b60200260200101515b6103805287516005106200076957600062000780565b806005815181106200077757fe5b60200260200101515b6103a052875160061062000796576000620007ad565b80600681518110620007a457fe5b60200260200101515b6103c0525062000e009a5050505050505050505050565b80620007d0816200090b565b5050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200081157600080fd5b505afa15801562000826573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200084c919062000cc3565b60ff16905060006200086b6012836200099060201b62000dcc1760201c565b600a0a949350505050565b808214620007d057600080fd5b6000828201838110156200089657600080fd5b90505b92915050565b600081620008ac57600080fd5b670de0b6b3a76400008302831580620008d65750670de0b6b3a7640000848281620008d357fe5b04145b620008e057600080fd5b60028304810181811015620008f457600080fd5b60008482816200090057fe5b049695505050505050565b6002815110156200091c576200098d565b6000816000815181106200092c57fe5b602002602001015190506000600190505b82518110156200098a5760008382815181106200095657fe5b60200260200101519050806001600160a01b0316836001600160a01b0316106200097f57600080fd5b91506001016200093d565b50505b50565b600082821115620009a057600080fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620009e957805160ff191683800117855562000a19565b8280016001018555821562000a19579182015b8281111562000a19578251825591602001919060010190620009fc565b5062000a2792915062000a2b565b5090565b5b8082111562000a27576000815560010162000a2c565b600082601f83011262000a53578081fd5b815162000a6a62000a648262000dbe565b62000d97565b81815291506020808301908481018184028601820187101562000a8c57600080fd5b60005b8481101562000ab857815162000aa58162000dea565b8452928201929082019060010162000a8f565b505050505092915050565b600082601f83011262000ad4578081fd5b815162000ae562000a648262000dbe565b81815291506020808301908481018184028601820187101562000b0757600080fd5b60005b8481101562000ab85781518452928201929082019060010162000b0a565b8051620008998162000dea565b600082601f83011262000b46578081fd5b81516001600160401b0381111562000b5c578182fd5b602062000b72601f8301601f1916820162000d97565b9250818352848183860101111562000b8957600080fd5b60005b8281101562000ba957848101820151848201830152810162000b8c565b8281111562000bbb5760008284860101525b50505092915050565b60006020828403121562000bd6578081fd5b5051919050565b600080600080600080600080610100898b03121562000bfa578384fd5b62000c068a8a62000b28565b60208a01519098506001600160401b038082111562000c23578586fd5b62000c318c838d0162000b35565b985060408b015191508082111562000c47578586fd5b62000c558c838d0162000b35565b975060608b015191508082111562000c6b578586fd5b62000c798c838d0162000a42565b965060808b015191508082111562000c8f578586fd5b5062000c9e8b828c0162000ac3565b94505060a0890151925060c0890151915060e089015190509295985092959890939650565b60006020828403121562000cd5578081fd5b815160ff8116811462000896578182fd5b60006060820185835260206060818501528186518084526080860191508288019350845b8181101562000d325762000d1f855162000dde565b8352938301939183019160010162000d0a565b505084810360408601528551808252908201925081860190845b8181101562000d745762000d61835162000dde565b8552938301939183019160010162000d4c565b509298975050505050505050565b602081016003831062000d9157fe5b91905290565b6040518181016001600160401b038111828210171562000db657600080fd5b604052919050565b60006001600160401b0382111562000dd4578081fd5b5060209081020190565b6001600160a01b031690565b6001600160a01b03811681146200098d57600080fd5b60805160a05160c05160601c60e051610100516101205160601c6101405160601c6101605160601c6101805160601c6101a05160601c6101c05160601c6101e05160601c61020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c051614747620010746000398061180952806124815250806117a6528061242052508061174352806123bf5250806116e0528061235e52508061167d52806122fd52508061161a528061229c5250806115ab528061223b5250806126e3528061271752806127535250806110ce5280611bc252508061106d5280611b5f52508061100c5280611afc525080610fab5280611a99525080610f4a5280611a36525080610ee952806119d3525080610e885280611970525080611093528061244652508061103252806123e5525080610fd15280612384525080610f705280612323525080610f0f52806122c2525080610eae5280612261525080610e4d52806122005250806107805280610c17528061130f5280611521528061158552806115f3528061165652806116b9528061171c528061177f52806117e252806118e6528061194a52806119ac5280611a0f5280611a725280611ad55280611b385280611b9b5280611bf35280611df35280611ff752806120555280612649528061279752806129285280612b3d5280612b9e5280612cb95280612e745280612f1d5250806105f352806106cd528061080a5280610a905280610b8052508061069e52806107de52806108c65280610a615280610b545280611f28525080610a1a5280611ef15250806109f75280611cfb52506147476000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806387ec6817116100f9578063aaabadc511610097578063d5c096c411610071578063d5c096c414610384578063d73dd62314610397578063dd62ed3e146103aa578063f89f27ed146103bd576101c4565b8063aaabadc51461036c578063c0ff1a1514610374578063d4cadf681461037c576101c4565b806395d89b41116100d357806395d89b41146103325780639b02cdde1461033a578063a50ff09714610342578063a9059cbb14610359576101c4565b806387ec6817146102f75780638d928af81461030a5780639588c1931461031f576101c4565b806338fff2d011610166578063679aefce11610140578063679aefce146102a857806370a08231146102b057806374f3b009146102c357806377c91f70146102e4576101c4565b806338fff2d01461026c5780636028bfd4146102745780636618846314610295576101c4565b8063223b57e5116101a2578063223b57e51461021c57806323b872dd1461022f578063313ce5671461024257806334e1990714610257576101c4565b806306fdde03146101c9578063095ea7b3146101e757806318160ddd14610207575b600080fd5b6101d16103d2565b6040516101de9190614620565b60405180910390f35b6101fa6101f5366004614131565b610487565b6040516101de91906145c9565b61020f61049e565b6040516101de91906145ec565b61020f61022a36600461448c565b6104a4565b6101fa61023d3660046140f1565b610521565b61024a6105ca565b6040516101de919061468c565b61026a6102653660046144d8565b6105cf565b005b61020f6105f1565b610287610282366004614257565b610615565b6040516101de929190614673565b6101fa6102a3366004614131565b61063e565b61020f610698565b61020f6102be36600461409d565b6107b0565b6102d66102d1366004614257565b6107cf565b6040516101de9291906145a4565b61026a6102f236600461421f565b610897565b610287610305366004614257565b6108ab565b6103126108c4565b6040516101de919061460c565b61020f61032d36600461448c565b6108e8565b6101d1610961565b61020f6109e0565b61034a6109e6565b6040516101de939291906145d4565b6101fa610367366004614131565b610a3f565b610312610a4c565b61020f610a5b565b61020f610b3f565b6102d6610392366004614257565b610b45565b6101fa6103a5366004614131565b610cc8565b61020f6103b83660046140b9565b610cfe565b6103c5610d29565b6040516101de9190614591565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b505050505090505b90565b6000610494338484610de1565b5060015b92915050565b60025490565b6000806104b48560000151610e49565b905060006104c58660200151610e49565b90506104d185836110f2565b94506104dd84826110f2565b93506104ed8660400151826110f2565b604087015260006104ff8787876110fe565b905061050b818461115b565b905061051681611167565b979650505050505050565b6001600160a01b0383166000818152600160209081526040808320338085529252822054919214806105535750828110155b61055c57600080fd5b61056785858561117e565b336001600160a01b038616148015906105a057507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b156105bf57828110156105b257600080fd5b6105bf8533858403610de1565b506001949350505050565b601290565b6105d7611234565b67016345785d8a00008111156105ec57600080fd5b600655565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000606061062e8989898989898961129861130a611389565b9150915097509795505050505050565b3360009081526001602090815260408083206001600160a01b038616845290915281205480831061067a5761067533856000610de1565b61068e565b61068e33856106898487610dcc565b610de1565b5060019392505050565b600060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161070891906145ec565b60006040518083038186803b15801561072057600080fd5b505afa158015610734573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261075c919081019061415c565b9150506107aa61076a61049e565b6107a461077e61077861151c565b85611846565b7f00000000000000000000000000000000000000000000000000000000000000006118be565b90610d66565b91505090565b6001600160a01b0381166000908152602081905260409020545b919050565b60608088336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461080857600080fd5b7f0000000000000000000000000000000000000000000000000000000000000000811461083457600080fd5b606061083e6118e1565b905061084a8882611bee565b600060608061085e8e8e8e8e8e8e8e611298565b92509250925061086e8d84611c68565b610878828561130a565b610882818561130a565b909550935050505b5097509795505050505050565b61089f611234565b6108a881611cf9565b50565b6000606061062e89898989898989611d8c611dee611389565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006108f78460400151611e68565b6040850152835160009061090a90610e49565b9050600061091b8660200151610e49565b905061092785836110f2565b945061093384826110f2565b93506109438660400151836110f2565b60408701526000610955878787611e8c565b90506105168183611ee1565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561047c5780601f106104515761010080835404028352916020019161047c565b60075490565b60008060006109f3611eed565b15937f000000000000000000000000000000000000000000000000000000000000000093507f000000000000000000000000000000000000000000000000000000000000000092509050565b600061049433848461117e565b6000610a56611f24565b905090565b600060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610acb91906145ec565b60006040518083038186803b158015610ae357600080fd5b505afa158015610af7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b1f919081019061415c565b9150506060610b2c61151c565b9050610b388183611846565b9250505090565b60065490565b60608088336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b7e57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000008114610baa57600080fd5b6060610bb46118e1565b9050610bc08882611bee565b610bc861049e565b610c835760006060610bdc8d8d8d8a611fb7565b915091506103e8821015610bef57600080fd5b610bfc60006103e861208f565b610c0a8b6103e8840361208f565b610c148184611dee565b807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff81118015610c4c57600080fd5b50604051908082528060200260200182016040528015610c76578160200160208202803683370190505b509550955050505061088a565b6000606080610c978e8e8e8e8e8e8e611d8c565b925092509250610ca78c8461208f565b610cb18285611dee565b610cbb818561130a565b909550935061088a915050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104949185906106899086610d4d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060610a5661151c565b80610d3d81612125565b5050565b808214610d3d57600080fd5b600082820183811015610d5f57600080fd5b9392505050565b600081610d7257600080fd5b670de0b6b3a76400008302831580610d9a5750670de0b6b3a7640000848281610d9757fe5b04145b610da357600080fd5b60028304810181811015610db657600080fd5b6000848281610dc157fe5b049695505050505050565b600082821115610ddb57600080fd5b50900390565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610e3c9085906145ec565b60405180910390a3505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610eac57507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610f0d57507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610f6e57507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610fcf57507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561103057507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561109157507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156101c457507f00000000000000000000000000000000000000000000000000000000000000006107ca565b6000610d5f83836118be565b600061110861219d565b61111a82670429d069189e00006121b0565b8460400151111561112a57600080fd5b6111538361113b86600001516121fc565b8461114988602001516121fc565b88604001516124a5565b949350505050565b6000610d5f838361250a565b600061049861117760065461253a565b839061256b565b6001600160a01b038316600090815260208190526040902054818110156111a457600080fd5b6001600160a01b038085166000908152602081905260408082208585039055918516815220546111d49083610d4d565b6001600160a01b0380851660008181526020819052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906112269086906145ec565b60405180910390a350505050565b6000306000357fffffffff000000000000000000000000000000000000000000000000000000001660405160200161126d92919061452a565b60405160208183030381529060405280519060200120905061128f81336125bd565b6108a857600080fd5b600060608060606112a761151c565b905060006112b5828a611846565b905060606112c88a84600754858c612644565b90506112d48a82612792565b600060606112e38c868b612815565b915091506112f28c8287612894565b600755909e909d50909b509950505050505050505050565b60005b7f00000000000000000000000000000000000000000000000000000000000000008110156113845761136583828151811061134457fe5b602002602001015183838151811061135857fe5b60200260200101516128aa565b83828151811061137157fe5b602090810291909101015260010161130d565b505050565b6000606033301461147c576000306001600160a01b03166000366040516113b1929190614581565b6000604051808303816000865af19150503d80600081146113ee576040519150601f19603f3d011682016040523d82523d6000602084013e6113f3565b606091505b50509050806000811461140257fe5b60046000803e6000517fffffffff00000000000000000000000000000000000000000000000000000000167f43adbafb00000000000000000000000000000000000000000000000000000000811461145e573d6000803e3d6000fd5b506020600460003e604060205260243d03602460403e601c3d016000f35b60606114866118e1565b90506114928982611bee565b600060606114a98e8e8e8e8e8e8e8e63ffffffff16565b50915091506114bc81848863ffffffff16565b8051601f1982018390526343adbafb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08301526020027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc82016044820181fd5b6060807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111801561155657600080fd5b50604051908082528060200260200182016040528015611580578160200160208202803683370190505b5090507f0000000000000000000000000000000000000000000000000000000000000000156115e8577f0000000000000000000000000000000000000000000000000000000000000000816000815181106115d757fe5b6020026020010181815250506115ef565b9050610484565b60017f000000000000000000000000000000000000000000000000000000000000000011156115e8577f00000000000000000000000000000000000000000000000000000000000000008160018151811061164657fe5b60200260200101818152505060027f000000000000000000000000000000000000000000000000000000000000000011156115e8577f0000000000000000000000000000000000000000000000000000000000000000816002815181106116a957fe5b60200260200101818152505060037f000000000000000000000000000000000000000000000000000000000000000011156115e8577f00000000000000000000000000000000000000000000000000000000000000008160038151811061170c57fe5b60200260200101818152505060047f000000000000000000000000000000000000000000000000000000000000000011156115e8577f00000000000000000000000000000000000000000000000000000000000000008160048151811061176f57fe5b60200260200101818152505060057f000000000000000000000000000000000000000000000000000000000000000011156115e8577f0000000000000000000000000000000000000000000000000000000000000000816005815181106117d257fe5b60200260200101818152505060067f000000000000000000000000000000000000000000000000000000000000000011156115e8577f00000000000000000000000000000000000000000000000000000000000000008160068151811061183557fe5b602002602001018181525050905090565b600061185483518351610d41565b50670de0b6b3a764000060005b83518160ff1610156118b7576118ad6118a6848360ff168151811061188257fe5b6020026020010151868460ff168151811061189957fe5b60200260200101516128c7565b83906121b0565b9150600101611861565b5092915050565b60008282028315806118d85750828482816118d557fe5b04145b610d5f57600080fd5b6060807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111801561191b57600080fd5b50604051908082528060200260200182016040528015611945578160200160208202803683370190505b5090507f0000000000000000000000000000000000000000000000000000000000000000156115e8577f00000000000000000000000000000000000000000000000000000000000000008160008151811061199c57fe5b60200260200101818152505060017f000000000000000000000000000000000000000000000000000000000000000011156115e8577f0000000000000000000000000000000000000000000000000000000000000000816001815181106119ff57fe5b60200260200101818152505060027f000000000000000000000000000000000000000000000000000000000000000011156115e8577f000000000000000000000000000000000000000000000000000000000000000081600281518110611a6257fe5b60200260200101818152505060037f000000000000000000000000000000000000000000000000000000000000000011156115e8577f000000000000000000000000000000000000000000000000000000000000000081600381518110611ac557fe5b60200260200101818152505060047f000000000000000000000000000000000000000000000000000000000000000011156115e8577f000000000000000000000000000000000000000000000000000000000000000081600481518110611b2857fe5b60200260200101818152505060057f000000000000000000000000000000000000000000000000000000000000000011156115e8577f000000000000000000000000000000000000000000000000000000000000000081600581518110611b8b57fe5b60200260200101818152505060067f000000000000000000000000000000000000000000000000000000000000000011156115e8577f00000000000000000000000000000000000000000000000000000000000000008160068151811061183557fe5b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561138457611c49838281518110611c2857fe5b6020026020010151838381518110611c3c57fe5b60200260200101516118be565b838281518110611c5557fe5b6020908102919091010152600101611bf1565b6001600160a01b03821660009081526020819052604090205481811015611c8e57600080fd5b6001600160a01b03831660009081526020819052604090208282039055600254611cb89083610dcc565b6002556040516000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e3c9086906145ec565b7f00000000000000000000000000000000000000000000000000000000000000004210611d2557600080fd5b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790556040517fa5bc6afced71829f82830a97f26eb92aea46d29443b5acb7d47c4a52b1e2734190611d819083906145c9565b60405180910390a150565b6000606080611d9961219d565b6060611da361151c565b90506000611db1828a611846565b90506060611dc48a84600754858c612644565b9050611dd08a82612792565b60006060611ddf8c868b6128d3565b915091506112f28c8287612922565b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561138457611e49838281518110611e2857fe5b6020026020010151838381518110611e3c57fe5b602002602001015161250a565b838281518110611e5557fe5b6020908102919091010152600101611df1565b600080611e80600654846129b190919063ffffffff16565b9050610d5f8382610dcc565b6000611e9661219d565b611ea883670429d069189e00006121b0565b84604001511115611eb857600080fd5b61115383611ec986600001516121fc565b84611ed788602001516121fc565b8860400151612a14565b6000610d5f83836128aa565b60007f000000000000000000000000000000000000000000000000000000000000000042101580610a5657505060055460ff161590565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b158015611f7f57600080fd5b505afa158015611f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a569190614354565b60006060611fc361219d565b6000611fce84612a60565b90506000816002811115611fde57fe5b14611fe857600080fd5b6060611ff385612a76565b90507f000000000000000000000000000000000000000000000000000000000000000081511461202257600080fd5b6120338161202e6118e1565b611bee565b606061203d61151c565b9050600061204b8284611846565b90506000612079827f00000000000000000000000000000000000000000000000000000000000000006118be565b6007929092555099919850909650505050505050565b6001600160a01b0382166000908152602081905260409020546120b29082610d4d565b6001600160a01b0383166000908152602081905260409020556002546120d89082610d4d565b6002556040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906121199085906145ec565b60405180910390a35050565b600281511015612134576108a8565b60008160008151811061214357fe5b602002602001015190506000600190505b825181101561138457600083828151811061216b57fe5b60200260200101519050806001600160a01b0316836001600160a01b03161061219357600080fd5b9150600101612154565b6121a5611eed565b6121ae57600080fd5b565b60008282028315806121ca5750828482816121c757fe5b04145b6121d357600080fd5b6706f05b59d3b200008101818110156121eb57600080fd5b6000670de0b6b3a764000082610dc1565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561225f57507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156122c057507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561232157507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561238257507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156123e357507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316141561244457507f00000000000000000000000000000000000000000000000000000000000000006107ca565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156101c457507f00000000000000000000000000000000000000000000000000000000000000006107ca565b6000806124bc6124b58685610dcc565b869061256b565b905060006124ca858861256b565b905060006124d88383612a8c565b905060006124ee82670de0b6b3a7640000610dcc565b90506124fa8a826129b1565b9450505050505b95945050505050565b60008161251657600080fd5b8261252357506000610498565b81600184038161252f57fe5b046001019050610498565b6000670de0b6b3a76400008210156125635761255e670de0b6b3a764000083610dcc565b610498565b506000919050565b60008161257757600080fd5b8261258457506000610498565b670de0b6b3a76400008381029084828161259a57fe5b04146125a557600080fd5b8260018203816125b157fe5b04600101915050610498565b60006125c7611f24565b6001600160a01b03166391d1485484846040518363ffffffff1660e01b81526004016125f49291906145f5565b60206040518083038186803b15801561260c57600080fd5b505afa158015612620573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5f919061423b565b6060807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111801561267e57600080fd5b506040519080825280602002602001820160405280156126a8578160200160208202803683370190505b50905060006126b7868661256b565b90506709b6e64a8ec6000081116126dd576126da866709b6e64a8ec6000061256b565b94505b612750887f00000000000000000000000000000000000000000000000000000000000000008151811061270c57fe5b6020026020010151887f00000000000000000000000000000000000000000000000000000000000000008151811061274057fe5b6020026020010151888888612aba565b827f00000000000000000000000000000000000000000000000000000000000000008151811061277c57fe5b6020908102919091010152509695505050505050565b60005b7f0000000000000000000000000000000000000000000000000000000000000000811015611384576127f68282815181106127cc57fe5b60200260200101518483815181106127e057fe5b6020026020010151610dcc90919063ffffffff16565b83828151811061280257fe5b6020908102919091010152600101612795565b60006060600061282484612a60565b9050600081600281111561283457fe5b141561284f57612845858786612b1f565b925092505061288c565b600181600281111561285d57fe5b141561286d576128458685612c63565b600281600281111561287b57fe5b14156101c457612845858786612c95565b935093915050565b60006128a08484612792565b6111538285611846565b6000816128b657600080fd5b8183816128bf57fe5b049392505050565b6000610d5f8383612d1d565b6000606060006128e284612a60565b905060018160028111156128f257fe5b141561290357612845868686612e5e565b600281600281111561291157fe5b14156101c457612845868686612ed2565b6000805b7f00000000000000000000000000000000000000000000000000000000000000008110156129a65761298784828151811061295d57fe5b602002602001015186838151811061297157fe5b6020026020010151610d4d90919063ffffffff16565b85828151811061299357fe5b6020908102919091010152600101612926565b506111538285611846565b60008282028315806129cb5750828482816129c857fe5b04145b6129d457600080fd5b806129e3576000915050610498565b670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82016125b1565b600080612a218784610d4d565b90506000612a2f888361256b565b90506000612a3d8887612fb4565b90506000612a4b8383612a8c565b90506124fa612a598261253a565b8990613000565b6000818060200190518101906104989190614370565b606081806020019051810190610d5f9190614447565b600080612a998484612d1d565b9050611153612ab382612aae846127106129b1565b610d4d565b6001610d4d565b600083831015612acc57506000612501565b6000612ad8858561256b565b90506000612aee670de0b6b3a764000088612fb4565b90506000612afc8383612a8c565b90506000612b13612b0c8361253a565b8b90613000565b90506124fa8187613000565b60006060612b2b61219d565b600080612b3785613035565b915091507f00000000000000000000000000000000000000000000000000000000000000008110612b6757600080fd5b6000612b7161049e565b90506000612b83826107a48187610dcc565b90506709b6e64a8ec60000811015612b9a57600080fd5b60607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff81118015612bd357600080fd5b50604051908082528060200260200182016040528015612bfd578160200160208202803683370190505b509050612c3c898581518110612c0f57fe5b60200260200101518b8681518110612c2357fe5b602002602001015187612c3461049e565b600654613057565b818581518110612c4857fe5b60209081029190910101529399939850929650505050505050565b600060606000612c72846130dc565b90506060612c888683612c8361049e565b6130f2565b9196919550909350505050565b60006060612ca161219d565b60606000612cae856131a4565b91509150612cdd82517f0000000000000000000000000000000000000000000000000000000000000000610d41565b612ce98261202e6118e1565b6000612d01878985612cf961049e565b6006546131bc565b905081811115612d1057600080fd5b9791965090945050505050565b600081612d335750670de0b6b3a7640000610498565b82612d4057506000610498565b7f80000000000000000000000000000000000000000000000000000000000000008310612d6c57600080fd5b770bce5086492111aea88f4bb1ca6bcf584181ea8059f765328210612d9057600080fd5b82826000670c7d713b49da000083138015612db25750670f43fc2c04ee000083125b15612de9576000612dc2846133ff565b9050670de0b6b3a764000080820784020583670de0b6b3a764000083050201915050612df7565b81612df3846134c5565b0290505b7fffffffffffffffffffffffffffffffffe0d1b038165edf2c9c579db9846000008112801590612e3757506f62541066c2001c07b75885b199d400008113155b612e4057600080fd5b670de0b6b3a76400009005612e5481613869565b9695505050505050565b60006060806000612e6e856131a4565b915091507f0000000000000000000000000000000000000000000000000000000000000000825114612e9f57600080fd5b612eab8261202e6118e1565b6000612ec3888885612ebb61049e565b600654613c72565b905081811015612d1057600080fd5b60006060600080612ee285613035565b915091506000612ef061049e565b90506000612f02826107a48187610d4d565b90506729a2241af62c0000811115612f1957600080fd5b60607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff81118015612f5257600080fd5b50604051908082528060200260200182016040528015612f7c578160200160208202803683370190505b509050612c3c8a8581518110612f8e57fe5b60200260200101518a8681518110612fa257fe5b60200260200101518786600654613e59565b600081612fc057600080fd5b82612fcd57506000610498565b670de0b6b3a764000083810290848281612fe357fe5b0414612fee57600080fd5b828181612ff757fe5b04915050610498565b600082820283158061301a57508284828161301757fe5b04145b61302357600080fd5b670de0b6b3a764000090049392505050565b6000808280602001905181019061304c9190614411565b909590945092505050565b60008061306e846130688188610dcc565b9061256b565b9050600061308d82613088670de0b6b3a76400008a61256b565b612a8c565b9050600061309a8861253a565b905060006130aa612b0c8461253a565b905060006130b887846129b1565b90506130cd6130c68261253a565b8390613000565b9b9a5050505050505050505050565b600081806020019051810190610d5f91906143e4565b606060006131008484612fb4565b90506060855167ffffffffffffffff8111801561311c57600080fd5b50604051908082528060200260200182016040528015613146578160200160208202803683370190505b50905060005b865181101561319a5761317b8388838151811061316557fe5b602002602001015161300090919063ffffffff16565b82828151811061318757fe5b602090810291909101015260010161314c565b5095945050505050565b606060008280602001905181019061304c919061438c565b60006060845167ffffffffffffffff811180156131d857600080fd5b50604051908082528060200260200182016040528015613202578160200160208202803683370190505b5090506000805b88518110156132b15761324c89828151811061322157fe5b602002602001015161306889848151811061323857fe5b60200260200101518c85815181106127e057fe5b83828151811061325857fe5b6020026020010181815250506132a76132a089838151811061327657fe5b602002602001015185848151811061328a57fe5b60200260200101516129b190919063ffffffff16565b8390610d4d565b9150600101613209565b50670de0b6b3a764000060005b89518110156133de576000808583815181106132d657fe5b602002602001015185116132ed5760009150613335565b61333261330c8785815181106132ff57fe5b602002602001015161253a565b61306888868151811061331b57fe5b602002602001015188610dcc90919063ffffffff16565b91505b600061334189846129b1565b905060006133736133518361253a565b8d878151811061335d57fe5b602002602001015161256b90919063ffffffff16565b90506133a361339e8f878151811061338757fe5b60200260200101518361256b90919063ffffffff16565b61253a565b92506133cc6133c5848f88815181106133b857fe5b6020026020010151613ecd565b8790613000565b955050600190930192506132be915050565b506133f26133eb8261253a565b87906129b1565b9998505050505050505050565b670de0b6b3a7640000026000806ec097ce7bc90715b34b9f1000000000808401907fffffffffffffffffffffffffffffffffff3f68318436f8ea4cb460f0000000008501028161344b57fe5b60036ec097ce7bc90715b34b9f100000000092909105808002839005808202849005928305909101600592820284900592830501600792820284900592830501600992820284900592830501600b92820284900592830501600d92820284900592830501600f929091029290920505016002029392505050565b60008082136134d357600080fd5b670de0b6b3a764000082121561350e57613504826ec097ce7bc90715b34b9f1000000000816134fe57fe5b056134c5565b60000390506107ca565b60007e1600ef3172e58d2e933ec884fde10064c63b5372d805e203c0000000000000831261355f576806f05b59d3b200000001770195e54c5dd42177f53a27172fa9ec630262827000000000830592505b73011798004d755d3c8bc8e03204cf44619e0000008312613597576803782dace9d9000000016b1425982cf597cd205cef7380830592505b606492830292026e01855144814a7ff805980ff008400083126135df5768ad78ebc5ac62000000016e01855144814a7ff805980ff008400068056bc75e2d6310000084020592505b6b02df0ab5a80a22c61ab5a700831261361a576856bc75e2d631000000016b02df0ab5a80a22c61ab5a70068056bc75e2d6310000084020592505b693f1fce3da636ea5cf850831261365157682b5e3af16b1880000001693f1fce3da636ea5cf85068056bc75e2d6310000084020592505b690127fa27722cc06cc5e28312613688576815af1d78b58c40000001690127fa27722cc06cc5e268056bc75e2d6310000084020592505b68280e60114edb805d0383126136bd57680ad78ebc5ac62000000168280e60114edb805d0368056bc75e2d6310000084020592505b680ebc5fb4174612111083126136e857680ebc5fb4174612111068056bc75e2d631000009384020592015b6808f00f760a4b2db55d831261371d576802b5e3af16b1880000016808f00f760a4b2db55d68056bc75e2d6310000084020592505b6806f5f177578893793783126137525768015af1d78b58c40000016806f5f177578893793768056bc75e2d6310000084020592505b6806248f33704b28660383126137865767ad78ebc5ac620000016806248f33704b28660368056bc75e2d6310000084020592505b6805c548670b9510e7ac83126137ba576756bc75e2d6310000016805c548670b9510e7ac68056bc75e2d6310000084020592505b600068056bc75e2d63100000840168056bc75e2d63100000850368056bc75e2d6310000002816137e657fe5b059050600768056bc75e2d631000008280028190058084028290058082028390058083028490059485056003909205860160059091050101929091818302059050600981058301925068056bc75e2d631000008282028161384357fe5b059050600b81058301925060648360020286018161385d57fe5b05979650505050505050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdc0d0570925a462d882121580156138a45750680715d69fa8c011c3fd8213155b6138ad57600080fd5b60008212156138e1576138c282600003613869565b6ec097ce7bc90715b34b9f1000000000816138d957fe5b0590506107ca565b68056bc75e2d6310000060016806f05b59d3b2000000841261393d57507ffffffffffffffffffffffffffffffffffffffffffffffff90fa4a62c4e00000090920191770195e54c5dd42177f53a27172fa9ec6302628270000000005b6803782dace9d90000008412613981577ffffffffffffffffffffffffffffffffffffffffffffffffc87d2531627000000909301926b1425982cf597cd205cef7380025b60648402935068ad78ebc5ac6200000084126139c55768056bc75e2d631000006e01855144814a7ff805980ff0084000830205915068ad78ebc5ac62000000840393505b6856bc75e2d6310000008412613a005768056bc75e2d631000006b02df0ab5a80a22c61ab5a70083020591506856bc75e2d631000000840393505b682b5e3af16b188000008412613a395768056bc75e2d63100000693f1fce3da636ea5cf8508302059150682b5e3af16b18800000840393505b6815af1d78b58c4000008412613a725768056bc75e2d63100000690127fa27722cc06cc5e283020591506815af1d78b58c400000840393505b680ad78ebc5ac62000008412613aaa5768056bc75e2d6310000068280e60114edb805d038302059150680ad78ebc5ac6200000840393505b68056bc75e2d631000008412613ae25768056bc75e2d63100000680ebc5fb41746121110830205915068056bc75e2d63100000840393505b6802b5e3af16b18800008412613b1a5768056bc75e2d631000006808f00f760a4b2db55d83020591506802b5e3af16b1880000840393505b68015af1d78b58c400008412613b525768056bc75e2d631000006806f5f1775788937937830205915068015af1d78b58c40000840393505b68056bc75e2d631000008481019085906002828002050591820191905068056bc75e2d631000006003878302050591820191905068056bc75e2d631000006004878302050591820191905068056bc75e2d631000006005878302050591820191905068056bc75e2d631000006006878302050591820191905068056bc75e2d631000006007878302050591820191905068056bc75e2d631000006008878302050591820191905068056bc75e2d631000006009878302050591820191905068056bc75e2d63100000600a878302050591820191905068056bc75e2d63100000600b878302050591820191905068056bc75e2d63100000600c8783020505918201919050606468056bc75e2d63100000858402058402059695505050505050565b60006060845167ffffffffffffffff81118015613c8e57600080fd5b50604051908082528060200260200182016040528015613cb8578160200160208202803683370190505b5090506000805b8851811015613d5057613d08898281518110613cd757fe5b6020026020010151613d02898481518110613cee57fe5b60200260200101518c858151811061297157fe5b90612fb4565b838281518110613d1457fe5b602002602001018181525050613d466132a0898381518110613d3257fe5b602002602001015185848151811061316557fe5b9150600101613cbf565b50670de0b6b3a764000060005b8951811015613e43576000848281518110613d7457fe5b60200260200101518410613d8a57506000613db8565b613db5613da5670de0b6b3a76400008785815181106127e057fe5b613068868886815181106127e057fe5b90505b6000613dc488836129b1565b90506000613de0613dd48361253a565b8c868151811061316557fe5b90506000613e1c613e0d8f8781518110613df657fe5b602002602001015184612fb490919063ffffffff16565b670de0b6b3a764000090610d4d565b9050613e316133c5828f88815181106133b857fe5b95505060019093019250613d5d915050565b506133f26133c582670de0b6b3a7640000610dcc565b600080613e6a846130688188610d4d565b90506000613e8482613088670de0b6b3a76400008a61256b565b90506000613e918861253a565b90506000613eb1613eaa84670de0b6b3a7640000610dcc565b8b906129b1565b90506000613ebf87846129b1565b90506130cd6111778261253a565b600080613eda8484612d1d565b905080613eeb576000915050610498565b611153613f0382613efe84612710613000565b610dcc565b6001610dcc565b8035610498816146e1565b600082601f830112613f25578081fd5b8151613f38613f33826146c1565b61469a565b818152915060208083019084810181840286018201871015613f5957600080fd5b60005b84811015613f7857815184529282019290820190600101613f5c565b505050505092915050565b600082601f830112613f93578081fd5b813567ffffffffffffffff811115613fa9578182fd5b613fbc6020601f19601f8401160161469a565b9150808252836020828501011115613fd357600080fd5b8060208401602084013760009082016020015292915050565b6000610100808385031215613fff578182fd5b6140088161469a565b9150506140158383613f0a565b81526140248360208401613f0a565b60208201526040820135604082015260608201356060820152608082013560808201526140548360a08401613f0a565b60a08201526140668360c08401613f0a565b60c082015260e082013567ffffffffffffffff81111561408557600080fd5b61409184828501613f83565b60e08301525092915050565b6000602082840312156140ae578081fd5b8135610d5f816146e1565b600080604083850312156140cb578081fd5b82356140d6816146e1565b915060208301356140e6816146e1565b809150509250929050565b600080600060608486031215614105578081fd5b8335614110816146e1565b92506020840135614120816146e1565b929592945050506040919091013590565b60008060408385031215614143578182fd5b823561414e816146e1565b946020939093013593505050565b6000806040838503121561416e578182fd5b825167ffffffffffffffff80821115614185578384fd5b818501915085601f830112614198578384fd5b81516141a6613f33826146c1565b80828252602080830192508086018a8283870289010111156141c6578889fd5b8896505b848710156141f15780516141dd816146e1565b8452600196909601959281019281016141ca565b508801519096509350505080821115614208578283fd5b5061421585828601613f15565b9150509250929050565b600060208284031215614230578081fd5b8135610d5f816146f6565b60006020828403121561424c578081fd5b8151610d5f816146f6565b600080600080600080600060e0888a031215614271578485fd5b87359650602080890135614284816146e1565b96506040890135614294816146e1565b9550606089013567ffffffffffffffff808211156142b0578586fd5b818b0191508b601f8301126142c3578586fd5b81356142d1613f33826146c1565b8082825285820191508585018f8788860288010111156142ef57898afd5b8995505b838610156143115780358352600195909501949186019186016142f3565b509850505060808b0135955060a08b0135945060c08b0135925080831115614337578384fd5b50506143458a828b01613f83565b91505092959891949750929550565b600060208284031215614365578081fd5b8151610d5f816146e1565b600060208284031215614381578081fd5b8151610d5f81614704565b6000806000606084860312156143a0578081fd5b83516143ab81614704565b602085015190935067ffffffffffffffff8111156143c7578182fd5b6143d386828701613f15565b925050604084015190509250925092565b600080604083850312156143f6578182fd5b825161440181614704565b6020939093015192949293505050565b600080600060608486031215614425578081fd5b835161443081614704565b602085015160409095015190969495509392505050565b60008060408385031215614459578182fd5b825161446481614704565b602084015190925067ffffffffffffffff811115614480578182fd5b61421585828601613f15565b6000806000606084860312156144a0578081fd5b833567ffffffffffffffff8111156144b6578182fd5b6144c286828701613fec565b9660208601359650604090950135949350505050565b6000602082840312156144e9578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561451f57815187529582019590820190600101614503565b509495945050505050565b60609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682527fffffffff0000000000000000000000000000000000000000000000000000000016601482015260180190565b6000828483379101908152919050565b600060208252610d5f60208301846144f0565b6000604082526145b760408301856144f0565b828103602084015261250181856144f0565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6001600160a01b0391909116815260200190565b6000602080835283518082850152825b8181101561464c57858101830151858201604001528201614630565b8181111561465d5783604083870101525b50601f01601f1916929092016040019392505050565b60008382526040602083015261115360408301846144f0565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156146b957600080fd5b604052919050565b600067ffffffffffffffff8211156146d7578081fd5b5060209081020190565b6001600160a01b03811681146108a857600080fd5b80151581146108a857600080fd5b600381106108a857600080fdfea2646970667358221220d9905d871cda1692d120e1cb9a763b2b7cfb84093c47dd6d6dc79990006658b164736f6c63430007010033a26469706673582212201aa028b1cfff2933c88623db9ef223cc72b9a5d271f50079a5979c3bc02e635064736f6c63430007010033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(string,string,address[],uint256[],uint256,uint256,uint256)": {
        "details": "Deploys a new `WeightedPool`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}