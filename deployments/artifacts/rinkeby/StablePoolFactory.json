{
  "address": "0x360E616ef7A487558982C0005C7B8E60ef252a78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amplificationParameter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emergencyPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "emergencyPeriodCheckExtension",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x836f91c843c70902574b056a37a740c0a434cc023c47729d83044d4eb9b8f999",
  "receipt": {
    "to": null,
    "from": "0x34039007932688bCF393FFa32b14E52109C44552",
    "contractAddress": "0x360E616ef7A487558982C0005C7B8E60ef252a78",
    "transactionIndex": 2,
    "gasUsed": "4224802",
    "logsBloom": "0x
    "blockHash": "0x44e9c66b3ae49ac1c3601625b3d2ecf97b4a6df23485406f9f6298d51c6a2ef2",
    "transactionHash": "0x836f91c843c70902574b056a37a740c0a434cc023c47729d83044d4eb9b8f999",
    "logs": [],
    "blockNumber": 8269795,
    "cumulativeGasUsed": "4377740",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xba1c01474A7598c2B49015FdaFc67DdF06ce15f7"
  ],
  "solcInputHash": "0a4fdc9962a9ccfb07bf1f8e7d3a38b7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amplificationParameter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emergencyPeriodCheckExtension\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"create(string,string,address[],uint256,uint256,uint256,uint256)\":{\"details\":\"Deploys a new `StablePool`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/stable/StablePoolFactory.sol\":\"StablePoolFactory\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x482b6d82ba1c9c73758ae15068a438361d4187b7a4e342db17ef0f828cb5e21a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/lib/helpers/Authentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nabstract contract Authentication {\\n    /**\\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\\n     */\\n    modifier authenticate() {\\n        _authenticateCaller();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts unless the caller is allowed to call the entry point function.\\n     */\\n    function _authenticateCaller() internal view {\\n        // Each external function is dynamically assigned a role ID as the hash of the contract address\\n        // and the function selector.\\n        bytes32 roleId = keccak256(abi.encodePacked(address(this), msg.sig));\\n        require(_canPerform(roleId, msg.sender), \\\"SENDER_NOT_ALLOWED\\\");\\n    }\\n\\n    function _canPerform(bytes32 roleId, address user) internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x24d84aff0d043b010ac460ea002f66f995764031716969370b2356cd32498951\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/EmergencyPeriod.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable not-rely-on-time\\ncontract EmergencyPeriod {\\n    uint256 private constant _MAX_EMERGENCY_PERIOD = 90 days;\\n    uint256 private constant _MAX_EMERGENCY_PERIOD_CHECK_EXT = 30 days;\\n\\n    bool private _emergencyPeriodActive;\\n    uint256 internal immutable _emergencyPeriodEndDate;\\n    uint256 internal immutable _emergencyPeriodCheckEndDate;\\n\\n    event EmergencyPeriodChanged(bool active);\\n\\n    modifier noEmergencyPeriod() {\\n        _ensureInactiveEmergencyPeriod();\\n        _;\\n    }\\n\\n    constructor(uint256 emergencyPeriod, uint256 emergencyPeriodCheckExtension) {\\n        require(emergencyPeriod <= _MAX_EMERGENCY_PERIOD, \\\"MAX_EMERGENCY_PERIOD\\\");\\n        require(emergencyPeriodCheckExtension <= _MAX_EMERGENCY_PERIOD_CHECK_EXT, \\\"MAX_EMERGENCY_PERIOD_CHECK_EXT\\\");\\n\\n        _emergencyPeriodEndDate = block.timestamp + emergencyPeriod;\\n        _emergencyPeriodCheckEndDate = block.timestamp + emergencyPeriod + emergencyPeriodCheckExtension;\\n    }\\n\\n    function getEmergencyPeriod()\\n        external\\n        view\\n        returns (\\n            bool active,\\n            uint256 endDate,\\n            uint256 checkEndDate\\n        )\\n    {\\n        return (!_isEmergencyPeriodInactive(), _emergencyPeriodEndDate, _emergencyPeriodCheckEndDate);\\n    }\\n\\n    function _setEmergencyPeriod(bool active) internal {\\n        require(block.timestamp < _emergencyPeriodEndDate, \\\"EMERGENCY_PERIOD_FINISHED\\\");\\n        _emergencyPeriodActive = active;\\n        emit EmergencyPeriodChanged(active);\\n    }\\n\\n    function _ensureInactiveEmergencyPeriod() internal view {\\n        require(_isEmergencyPeriodInactive(), \\\"EMERGENCY_PERIOD_ON\\\");\\n    }\\n\\n    function _isEmergencyPeriodInactive() internal view returns (bool) {\\n        return (block.timestamp >= _emergencyPeriodCheckEndDate) || !_emergencyPeriodActive;\\n    }\\n}\\n\",\"keccak256\":\"0x908aae52794b3bf7b1ccf2560464d3a2a50973aef598d55dce093969070fd0a3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/helpers/InputHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../../vault/interfaces/IAsset.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        require(a == b, \\\"INPUT_LENGTH_MISMATCH\\\");\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        require(a == b && b == c, \\\"INPUT_LENGTH_MISMATCH\\\");\\n    }\\n\\n    function ensureArrayIsSorted(IAsset[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            require(previous < current, \\\"UNSORTED_ARRAY\\\");\\n            previous = current;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbe2ba081549a464270ad28360966d89ccbfda05285f0073225968ae1340b7617\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../lib/math/LogExpMath.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        require(b <= a, \\\"SUB_OVERFLOW\\\");\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (ONE / 2);\\n        require(c1 >= c0, \\\"MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / ONE;\\n        return c2;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        require(a == 0 || product / a == b, \\\"MUL_OVERFLOW\\\");\\n\\n        return product / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        require(a == 0 || product / a == b, \\\"MUL_OVERFLOW\\\");\\n\\n        if (product == 0) {\\n            return 0;\\n        } else {\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((product - 1) / ONE) + 1;\\n        }\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n        uint256 c0 = a * ONE;\\n        require(a == 0 || c0 / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"DIV_INTERNAL\\\"); // add require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            uint256 aInflated = a * ONE;\\n            require(aInflated / a == ONE, \\\"DIV_INTERNAL\\\"); // mul overflow\\n\\n            // The traditional divUp formula is:\\n            // divUp(x, y) := (x + y - 1) / y\\n            // To avoid intermediate overflow in the addition, we distribute the division and get:\\n            // divUp(x, y) := (x - 1) / y + 1\\n            // Note that this requires x != 0, which we already tested for.\\n\\n            return ((aInflated - 1) / b) + 1;\\n        }\\n    }\\n\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return LogExpMath.pow(x, y);\\n    }\\n\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 result = LogExpMath.pow(x, y);\\n        if (result == 0) {\\n            return 0;\\n        }\\n        return sub(sub(result, mulDown(result, MAX_POW_RELATIVE_ERROR)), 1);\\n    }\\n\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 result = LogExpMath.pow(x, y);\\n        return add(add(result, mulUp(result, MAX_POW_RELATIVE_ERROR)), 1);\\n    }\\n\\n    /**\\n     * @dev Tells the complement of a given value capped to zero to avoid overflow\\n     */\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return x >= ONE ? 0 : sub(ONE, x);\\n    }\\n}\\n\",\"keccak256\":\"0x49e44b3a5a3c1ca0429a415c3f4c21d59dad8dcda12e36fb3fc93eaad749e779\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General internal License for more details.\\n\\n// You should have received a copy of the GNU General internal License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// There's plenty of linter errors caused by this file, we'll eventually\\n// revisit it to make it more readable, verfiable and testable.\\n/* solhint-disable */\\n\\n/**\\n * @title Ethereum library for logarithm and exponential functions with 18 decimal precision.\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    int256 constant DECIMALS = 1e18;\\n    int256 constant DOUBLE_DECIMALS = DECIMALS * DECIMALS;\\n    int256 constant PRECISION = 10**20;\\n    int256 constant DOUBLE_PRECISION = PRECISION * PRECISION;\\n    int256 constant PRECISION_LOG_UNDER_BOUND = DECIMALS - 10**17;\\n    int256 constant PRECISION_LOG_UPPER_BOUND = DECIMALS + 10**17;\\n    int256 constant EXPONENT_LB = -41446531673892822312;\\n    int256 constant EXPONENT_UB = 130700829182905140221;\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(PRECISION);\\n\\n    int256 constant x0 = 128000000000000000000; //2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; //e\\u02c6(x0)\\n    int256 constant x1 = 64000000000000000000; //2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; //e\\u02c6(x1)\\n    int256 constant x2 = 3200000000000000000000; //2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; //e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; //2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; //e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; //2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; //e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; //2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; //e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; //2\\u02c61\\n    int256 constant a6 = 738905609893065022723; //e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; //2\\u02c60\\n    int256 constant a7 = 271828182845904523536; //e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; //2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; //e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; //2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; //e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; //2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; //e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; //2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; //e\\u02c6(x11)\\n\\n    /**\\n     * Calculate the natural exponentiation of a number with 18 decimals precision.\\n     * @param x Exponent with 18 decimal places.\\n     * @notice Max x is log((2^255 - 1) / 10^20) = 130.700829182905140221\\n     * @notice Min x log(0.000000000000000001) = -41.446531673892822312\\n     * @return e\\u02c6x\\n     */\\n    function n_exp(int256 x) internal pure returns (int256) {\\n        require(x >= EXPONENT_LB && x <= EXPONENT_UB, \\\"OUT_OF_BOUNDS\\\");\\n\\n        if (x < 0) return (DOUBLE_DECIMALS / n_exp(-x));\\n        int256 ans = PRECISION;\\n        int256 last = 1;\\n        if (x >= x0) {\\n            last = a0;\\n            x -= x0;\\n        }\\n        if (x >= x1) {\\n            last *= a1;\\n            x -= x1;\\n        }\\n        x *= 100;\\n        if (x >= x2) {\\n            ans = (ans * a2) / PRECISION;\\n            x -= x2;\\n        }\\n        if (x >= x3) {\\n            ans = (ans * a3) / PRECISION;\\n            x -= x3;\\n        }\\n        if (x >= x4) {\\n            ans = (ans * a4) / PRECISION;\\n            x -= x4;\\n        }\\n        if (x >= x5) {\\n            ans = (ans * a5) / PRECISION;\\n            x -= x5;\\n        }\\n        if (x >= x6) {\\n            ans = (ans * a6) / PRECISION;\\n            x -= x6;\\n        }\\n        if (x >= x7) {\\n            ans = (ans * a7) / PRECISION;\\n            x -= x7;\\n        }\\n        if (x >= x8) {\\n            ans = (ans * a8) / PRECISION;\\n            x -= x8;\\n        }\\n        if (x >= x9) {\\n            ans = (ans * a9) / PRECISION;\\n            x -= x9;\\n        }\\n        int256 s = PRECISION;\\n        int256 t = x;\\n        s += t;\\n        t = ((t * x) / 2) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 3) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 4) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 5) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 6) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 7) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 8) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 9) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 10) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 11) / PRECISION;\\n        s += t;\\n        t = ((t * x) / 12) / PRECISION;\\n        s += t;\\n        return (((ans * s) / PRECISION) * last) / 100;\\n    }\\n\\n    /**\\n     * Calculate the natural logarithm of a number with 18 decimals precision.\\n     * @param a Positive number with 18 decimal places.\\n     * @return ln(x)\\n     */\\n    function n_log(int256 a) internal pure returns (int256) {\\n        require(a > 0, \\\"OUT_OF_BOUNDS\\\");\\n        if (a < DECIMALS) return (-n_log(DOUBLE_DECIMALS / a));\\n        int256 ans = 0;\\n        if (a >= a0 * DECIMALS) {\\n            ans += x0;\\n            a /= a0;\\n        }\\n        if (a >= a1 * DECIMALS) {\\n            ans += x1;\\n            a /= a1;\\n        }\\n        a *= 100;\\n        ans *= 100;\\n        if (a >= a2) {\\n            ans += x2;\\n            a = (a * PRECISION) / a2;\\n        }\\n        if (a >= a3) {\\n            ans += x3;\\n            a = (a * PRECISION) / a3;\\n        }\\n        if (a >= a4) {\\n            ans += x4;\\n            a = (a * PRECISION) / a4;\\n        }\\n        if (a >= a5) {\\n            ans += x5;\\n            a = (a * PRECISION) / a5;\\n        }\\n        if (a >= a6) {\\n            ans += x6;\\n            a = (a * PRECISION) / a6;\\n        }\\n        if (a >= a7) {\\n            ans += x7;\\n            a = (a * PRECISION) / a7;\\n        }\\n        if (a >= a8) {\\n            ans += x8;\\n            a = (a * PRECISION) / a8;\\n        }\\n        if (a >= a9) {\\n            ans += x9;\\n            a = (a * PRECISION) / a9;\\n        }\\n        if (a >= a10) {\\n            ans += x10;\\n            a = (a * PRECISION) / a10;\\n        }\\n        if (a >= a11) {\\n            ans += x11;\\n            a = (a * PRECISION) / a11;\\n        }\\n        int256 z = (PRECISION * (a - PRECISION)) / (a + PRECISION);\\n        int256 s = z;\\n        int256 z_squared = (z * z) / PRECISION;\\n        int256 t = (z * z_squared) / PRECISION;\\n        s += t / 3;\\n        t = (t * z_squared) / PRECISION;\\n        s += t / 5;\\n        t = (t * z_squared) / PRECISION;\\n        s += t / 7;\\n        t = (t * z_squared) / PRECISION;\\n        s += t / 9;\\n        t = (t * z_squared) / PRECISION;\\n        s += t / 11;\\n        return (ans + 2 * s) / 100;\\n    }\\n\\n    /**\\n     * Computes x to the power of y for numbers with 18 decimals precision.\\n     * @param x Base with 18 decimal places.\\n     * @param y Exponent with 18 decimal places.\\n     * @notice Must fulfil: -41.446531673892822312  < (log(x) * y) <  130.700829182905140221\\n     * @return x\\u02c6y\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            return uint256(DECIMALS);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        require(x < 2**255, \\\"X_OUT_OF_BOUNDS\\\"); // uint256 can be casted to a positive int256\\n        require(y < MILD_EXPONENT_BOUND, \\\"Y_OUT_OF_BOUNDS\\\");\\n        int256 x_int256 = int256(x);\\n        int256 y_int256 = int256(y);\\n        int256 logx_times_y;\\n        if (PRECISION_LOG_UNDER_BOUND < x_int256 && x_int256 < PRECISION_LOG_UPPER_BOUND) {\\n            int256 logbase = n_log_36(x_int256);\\n            logx_times_y = ((logbase / DECIMALS) * y_int256 + ((logbase % DECIMALS) * y_int256) / DECIMALS);\\n        } else {\\n            logx_times_y = n_log(x_int256) * y_int256;\\n        }\\n        require(\\n            EXPONENT_LB * DECIMALS <= logx_times_y && logx_times_y <= EXPONENT_UB * DECIMALS,\\n            \\\"PRODUCT_OUT_OF_BOUNDS\\\"\\n        );\\n        logx_times_y /= DECIMALS;\\n        return uint256(n_exp(logx_times_y));\\n    }\\n\\n    /**\\n     * Computes log of a number in base of another number, both numbers with 18 decimals precision.\\n     * @param arg Argument with 18 decimal places.\\n     * @param base Base with 18 decimal places.\\n     * @notice Must fulfil: -41.446531673892822312  < (log(x) * y) <  130.700829182905140221\\n     * @return log[base](arg)\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        int256 logbase;\\n        if (PRECISION_LOG_UNDER_BOUND < base && base < PRECISION_LOG_UPPER_BOUND) {\\n            logbase = n_log_36(base);\\n        } else {\\n            logbase = n_log(base) * DECIMALS;\\n        }\\n        int256 logarg;\\n        if (PRECISION_LOG_UNDER_BOUND < arg && arg < PRECISION_LOG_UPPER_BOUND) {\\n            logarg = n_log_36(arg);\\n        } else {\\n            logarg = n_log(arg) * DECIMALS;\\n        }\\n        return (logarg * DECIMALS) / logbase;\\n    }\\n\\n    /**\\n     * Private function to calculate the natural logarithm of a number with 36 decimals precision.\\n     * @param a Positive number with 18 decimal places.\\n     * @return ln(x)\\n     */\\n    function n_log_36(int256 a) private pure returns (int256) {\\n        a *= DECIMALS;\\n        int256 z = (DOUBLE_DECIMALS * (a - DOUBLE_DECIMALS)) / (a + DOUBLE_DECIMALS);\\n        int256 s = z;\\n        int256 z_squared = (z * z) / DOUBLE_DECIMALS;\\n        int256 t = (z * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 3;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 5;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 7;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 9;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 11;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 13;\\n        t = (t * z_squared) / DOUBLE_DECIMALS;\\n        s += t / 15;\\n        return 2 * s;\\n    }\\n}\\n\",\"keccak256\":\"0xa6ac1786981dfbfb539f246dda4b8a79bca2f55636f667ebad8d0a13e6585c10\",\"license\":\"GPL-3.0-or-later\"},\"contracts/lib/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_OVERFLOW\\\");\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SUB_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        require(a == 0 || c / a == b, \\\"MUL_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ZERO_DIVISION\\\");\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0b7373da776d4f690a6838703f1a06e9148d07984280ad96b611167a28834a7c\",\"license\":\"MIT\"},\"contracts/pools/BalancerPoolToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"../lib/math/Math.sol\\\";\\n\\n/**\\n * @title Highly opinionated token implementation\\n * @author Balancer Labs\\n * @dev\\n * - Includes functions to increase and decrease allowance as a workaround\\n *   for the well-known issue with `approve`:\\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n *   decreased by calls to transferFrom\\n * - Lets a token holder use `transferFrom` to send their own tokens,\\n *   without first setting allowance\\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\\n */\\ncontract BalancerPoolToken is IERC20 {\\n    using Math for uint256;\\n\\n    // State variables\\n\\n    uint8 private constant _DECIMALS = 18;\\n\\n    mapping(address => uint256) private _balance;\\n    mapping(address => mapping(address => uint256)) private _allowance;\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // Function declarations\\n\\n    constructor(string memory tokenName, string memory tokenSymbol) {\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n    }\\n\\n    // External functions\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balance[account];\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        _setAllowance(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function increaseApproval(address spender, uint256 amount) external returns (bool) {\\n        _setAllowance(msg.sender, spender, _allowance[msg.sender][spender].add(amount));\\n\\n        return true;\\n    }\\n\\n    function decreaseApproval(address spender, uint256 amount) external returns (bool) {\\n        uint256 currentAllowance = _allowance[msg.sender][spender];\\n\\n        if (amount >= currentAllowance) {\\n            _setAllowance(msg.sender, spender, 0);\\n        } else {\\n            _setAllowance(msg.sender, spender, currentAllowance.sub(amount));\\n        }\\n\\n        return true;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        _move(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = _allowance[sender][msg.sender];\\n        require(msg.sender == sender || currentAllowance >= amount, \\\"INSUFFICIENT_ALLOWANCE\\\");\\n\\n        _move(sender, recipient, amount);\\n\\n        if (msg.sender != sender && currentAllowance != uint256(-1)) {\\n            require(currentAllowance >= amount, \\\"INSUFFICIENT_ALLOWANCE\\\");\\n            _setAllowance(sender, msg.sender, currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    // Public functions\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _DECIMALS;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    // Internal functions\\n\\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\\n        _balance[recipient] = _balance[recipient].add(amount);\\n        _totalSupply = _totalSupply.add(amount);\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n    function _burnPoolTokens(address sender, uint256 amount) internal {\\n        uint256 currentBalance = _balance[sender];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n\\n        _balance[sender] = currentBalance - amount;\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(sender, address(0), amount);\\n    }\\n\\n    function _move(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentBalance = _balance[sender];\\n        require(currentBalance >= amount, \\\"INSUFFICIENT_BALANCE\\\");\\n\\n        _balance[sender] = currentBalance - amount;\\n        _balance[recipient] = _balance[recipient].add(amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // Private functions\\n\\n    function _setAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        _allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x06cf3bd774a93637bd43f47412b135e1206954f2be4fb67fe8ef832b325a231e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BaseGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BasePool.sol\\\";\\nimport \\\"../vault/interfaces/IGeneralPool.sol\\\";\\n\\nabstract contract BaseGeneralPool is IGeneralPool, BasePool {\\n    constructor(\\n        IVault vault,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256 swapFee,\\n        uint256 emergencyPeriod,\\n        uint256 emergencyPeriodCheckExtension\\n    )\\n        BasePool(\\n            vault,\\n            IVault.PoolSpecialization.GENERAL,\\n            name,\\n            symbol,\\n            tokens,\\n            swapFee,\\n            emergencyPeriod,\\n            emergencyPeriodCheckExtension\\n        )\\n    {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // Swap Hooks\\n\\n    function onSwapGivenIn(\\n        IPoolSwapStructs.SwapRequestGivenIn memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view override returns (uint256) {\\n        _validateIndexes(indexIn, indexOut, _totalTokens);\\n\\n        // Fees are subtracted before scaling happens, to reduce complexity of rounding direction analysis.\\n        swapRequest.amountIn = _subtractSwapFee(swapRequest.amountIn);\\n\\n        uint256[] memory scalingFactors = _scalingFactors();\\n\\n        // All token amounts are upscaled.\\n        swapRequest.amountIn = _upscale(swapRequest.amountIn, scalingFactors[indexIn]);\\n        _upscaleArray(balances, scalingFactors);\\n\\n        uint256 amountOut = _onSwapGivenIn(swapRequest, balances, indexIn, indexOut);\\n\\n        // amountOut tokens are exiting the Pool, so we round down.\\n        return _downscaleDown(amountOut, scalingFactors[indexOut]);\\n    }\\n\\n    function onSwapGivenOut(\\n        IPoolSwapStructs.SwapRequestGivenOut memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external view override returns (uint256) {\\n        _validateIndexes(indexIn, indexOut, _totalTokens);\\n\\n        uint256[] memory scalingFactors = _scalingFactors();\\n\\n        // All token amounts are upscaled.\\n        swapRequest.amountOut = _upscale(swapRequest.amountOut, scalingFactors[indexOut]);\\n        _upscaleArray(balances, scalingFactors);\\n\\n        uint256 amountIn = _onSwapGivenOut(swapRequest, balances, indexIn, indexOut);\\n\\n        // amountIn are tokens entering the Pool, so we round up.\\n        amountIn = _downscaleUp(amountIn, scalingFactors[indexIn]);\\n\\n        // Fees are added after scaling happens, to reduce complexity of rounding direction analysis.\\n        return _addSwapFee(amountIn);\\n    }\\n\\n    function _onSwapGivenIn(\\n        IPoolSwapStructs.SwapRequestGivenIn memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) internal view virtual returns (uint256);\\n\\n    function _onSwapGivenOut(\\n        IPoolSwapStructs.SwapRequestGivenOut memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) internal view virtual returns (uint256);\\n\\n    function _validateIndexes(\\n        uint256 indexIn,\\n        uint256 indexOut,\\n        uint256 limit\\n    ) private pure {\\n        require(indexIn < limit && indexOut < limit, \\\"OUT_OF_BOUNDS\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1f733fe2df069258b089fc14c5e0fa672b280476e4bc75fde35fd7fb40028891\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"../lib/math/FixedPoint.sol\\\";\\nimport \\\"../lib/helpers/InputHelpers.sol\\\";\\n\\nimport \\\"./BalancerPoolToken.sol\\\";\\nimport \\\"./BasePoolAuthorization.sol\\\";\\nimport \\\"../vault/interfaces/IVault.sol\\\";\\nimport \\\"../vault/interfaces/IBasePool.sol\\\";\\nimport \\\"../lib/helpers/EmergencyPeriod.sol\\\";\\n\\n// This contract relies on tons of immutable state variables to\\n// perform efficient lookup, without resorting to storage reads.\\n// solhint-disable max-states-count\\n\\n/**\\n * @dev Reference implementation for the base layer of a Pool contract that manges a single Pool with an immutable set\\n * of registered tokens, no Asset Managers, and an immutable swap fee.\\n *\\n * Because this contract doesn't implement the swap hooks, derived contracts should likely inherit from BaseGeneralPool\\n * or BaseMinimalSwapInfoPool instead.\\n */\\nabstract contract BasePool is IBasePool, BasePoolAuthorization, BalancerPoolToken, EmergencyPeriod {\\n    using FixedPoint for uint256;\\n\\n    uint256 private constant _MIN_TOKENS = 2;\\n    uint256 private constant _MAX_TOKENS = 7;\\n\\n    // 1e16 = 1%, 1e18 = 100%\\n    uint256 private constant _MAX_SWAP_FEE = 10e16;\\n\\n    uint256 private constant _MINIMUM_BPT = 10**3;\\n\\n    uint256 internal _swapFee;\\n\\n    IVault internal immutable _vault;\\n    bytes32 internal immutable _poolId;\\n    uint256 internal immutable _totalTokens;\\n\\n    IERC20 internal immutable _token0;\\n    IERC20 internal immutable _token1;\\n    IERC20 internal immutable _token2;\\n    IERC20 internal immutable _token3;\\n    IERC20 internal immutable _token4;\\n    IERC20 internal immutable _token5;\\n    IERC20 internal immutable _token6;\\n\\n    // Scaling factors for each token\\n    uint256 internal immutable _scalingFactor0;\\n    uint256 internal immutable _scalingFactor1;\\n    uint256 internal immutable _scalingFactor2;\\n    uint256 internal immutable _scalingFactor3;\\n    uint256 internal immutable _scalingFactor4;\\n    uint256 internal immutable _scalingFactor5;\\n    uint256 internal immutable _scalingFactor6;\\n\\n    constructor(\\n        IVault vault,\\n        IVault.PoolSpecialization specialization,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256 swapFee,\\n        uint256 emergencyPeriod,\\n        uint256 emergencyPeriodCheckExtension\\n    )\\n        BasePoolAuthorization()\\n        BalancerPoolToken(name, symbol)\\n        EmergencyPeriod(emergencyPeriod, emergencyPeriodCheckExtension)\\n    {\\n        require(tokens.length >= _MIN_TOKENS, \\\"MIN_TOKENS\\\");\\n        require(tokens.length <= _MAX_TOKENS, \\\"MAX_TOKENS\\\");\\n\\n        // The Vault only requires the token list to be ordered for the Two Token Pools specialization. However,\\n        // to make the developer experience consistent, we are requiring this condition for all the native pools.\\n        // Also, since these Pools will register tokens only once, we can ensure the Pool tokens will follow the same\\n        // order. We rely on this property to make Pools simpler to write, as it lets us assume that the\\n        // order of token-specific parameters (such as token weights) will not change.\\n        InputHelpers.ensureArrayIsSorted(tokens);\\n\\n        require(swapFee <= _MAX_SWAP_FEE, \\\"MAX_SWAP_FEE\\\");\\n\\n        bytes32 poolId = vault.registerPool(specialization);\\n\\n        // Pass in zero addresses for Asset Managers\\n        vault.registerTokens(poolId, tokens, new address[](tokens.length));\\n\\n        // Set immutable state variables - these cannot be read from during construction\\n\\n        _vault = vault;\\n        _poolId = poolId;\\n        _swapFee = swapFee;\\n        _totalTokens = tokens.length;\\n\\n        // Immutable variables cannot be initialized inside an if statement, so we must do conditional assignments\\n\\n        _token0 = tokens.length > 0 ? tokens[0] : IERC20(0);\\n        _token1 = tokens.length > 1 ? tokens[1] : IERC20(0);\\n        _token2 = tokens.length > 2 ? tokens[2] : IERC20(0);\\n        _token3 = tokens.length > 3 ? tokens[3] : IERC20(0);\\n        _token4 = tokens.length > 4 ? tokens[4] : IERC20(0);\\n        _token5 = tokens.length > 5 ? tokens[5] : IERC20(0);\\n        _token6 = tokens.length > 6 ? tokens[6] : IERC20(0);\\n\\n        _scalingFactor0 = tokens.length > 0 ? _computeScalingFactor(tokens[0]) : 0;\\n        _scalingFactor1 = tokens.length > 1 ? _computeScalingFactor(tokens[1]) : 0;\\n        _scalingFactor2 = tokens.length > 2 ? _computeScalingFactor(tokens[2]) : 0;\\n        _scalingFactor3 = tokens.length > 3 ? _computeScalingFactor(tokens[3]) : 0;\\n        _scalingFactor4 = tokens.length > 4 ? _computeScalingFactor(tokens[4]) : 0;\\n        _scalingFactor5 = tokens.length > 5 ? _computeScalingFactor(tokens[5]) : 0;\\n        _scalingFactor6 = tokens.length > 6 ? _computeScalingFactor(tokens[6]) : 0;\\n    }\\n\\n    // Getters / Setters\\n\\n    function getVault() external view returns (IVault) {\\n        return _vault;\\n    }\\n\\n    function getPoolId() external view returns (bytes32) {\\n        return _poolId;\\n    }\\n\\n    function getSwapFee() external view returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external authenticate {\\n        require(swapFee <= _MAX_SWAP_FEE, \\\"MAX_SWAP_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setEmergencyPeriod(bool active) external authenticate {\\n        _setEmergencyPeriod(active);\\n    }\\n\\n    // Join / Exit Hooks\\n\\n    modifier onlyVault(bytes32 poolId) {\\n        require(msg.sender == address(_vault), \\\"CALLER_NOT_VAULT\\\");\\n        require(poolId == _poolId, \\\"INVALID_POOL_ID\\\");\\n        _;\\n    }\\n\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        uint256[] memory scalingFactors = _scalingFactors();\\n        _upscaleArray(currentBalances, scalingFactors);\\n\\n        if (totalSupply() == 0) {\\n            (uint256 bptAmountOut, uint256[] memory amountsIn) = _onInitializePool(poolId, sender, recipient, userData);\\n\\n            // On initialization, we lock _MINIMUM_BPT by minting it for the zero address. This BPT acts as a minimum\\n            // as it will never be burned, which reduces potential issues with rounding, and also prevents the Pool from\\n            // ever being fully drained.\\n            require(bptAmountOut >= _MINIMUM_BPT, \\\"MINIMUM_BPT\\\");\\n            _mintPoolTokens(address(0), _MINIMUM_BPT);\\n            _mintPoolTokens(recipient, bptAmountOut - _MINIMUM_BPT);\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n\\n            return (amountsIn, new uint256[](_totalTokens));\\n        } else {\\n            (uint256 bptAmountOut, uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts) = _onJoinPool(\\n                poolId,\\n                sender,\\n                recipient,\\n                currentBalances,\\n                latestBlockNumberUsed,\\n                protocolSwapFeePercentage,\\n                userData\\n            );\\n\\n            _mintPoolTokens(recipient, bptAmountOut);\\n\\n            // amountsIn are amounts entering the Pool, so we round up.\\n            _downscaleUpArray(amountsIn, scalingFactors);\\n            // dueProtocolFeeAmounts are amounts exiting the Pool, so we round down.\\n            _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\\n\\n            return (amountsIn, dueProtocolFeeAmounts);\\n        }\\n    }\\n\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn) {\\n        return\\n            _queryAction(\\n                poolId,\\n                sender,\\n                recipient,\\n                currentBalances,\\n                latestBlockNumberUsed,\\n                protocolSwapFeePercentage,\\n                userData,\\n                _onJoinPool,\\n                _downscaleUpArray\\n            );\\n    }\\n\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external override onlyVault(poolId) returns (uint256[] memory, uint256[] memory) {\\n        uint256[] memory scalingFactors = _scalingFactors();\\n        _upscaleArray(currentBalances, scalingFactors);\\n\\n        (uint256 bptAmountIn, uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts) = _onExitPool(\\n            poolId,\\n            sender,\\n            recipient,\\n            currentBalances,\\n            latestBlockNumberUsed,\\n            protocolSwapFeePercentage,\\n            userData\\n        );\\n\\n        _burnPoolTokens(sender, bptAmountIn);\\n\\n        // Both amountsOut and dueProtocolFees are amounts exiting the Pool, so we round down.\\n        _downscaleDownArray(amountsOut, scalingFactors);\\n        _downscaleDownArray(dueProtocolFeeAmounts, scalingFactors);\\n\\n        return (amountsOut, dueProtocolFeeAmounts);\\n    }\\n\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut) {\\n        return\\n            _queryAction(\\n                poolId,\\n                sender,\\n                recipient,\\n                currentBalances,\\n                latestBlockNumberUsed,\\n                protocolSwapFeePercentage,\\n                userData,\\n                _onExitPool,\\n                _downscaleDownArray\\n            );\\n    }\\n\\n    function _onInitializePool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        bytes memory userData\\n    ) internal virtual returns (uint256, uint256[] memory);\\n\\n    function _onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function _onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function _addSwapFee(uint256 amount) internal view returns (uint256) {\\n        // This returns amount + fees, so we round up (favoring fees).\\n        return amount.divUp(_swapFee.complement());\\n    }\\n\\n    function _subtractSwapFee(uint256 amount) internal view returns (uint256) {\\n        // Round up, favoring fees.\\n        uint256 fees = amount.mulUp(_swapFee);\\n        return amount.sub(fees);\\n    }\\n\\n    /**\\n     * @dev Returns a scaling factor that, when multiplied to a token amount for `token`, normalizes its balance as if\\n     * it had 18 decimals.\\n     */\\n    function _computeScalingFactor(IERC20 token) private view returns (uint256) {\\n        // Tokens that don't implement the `decimals` method are not supported.\\n        uint256 tokenDecimals = ERC20(address(token)).decimals();\\n\\n        // Tokens with more than 18 decimals are not supported.\\n        uint256 decimalsDifference = Math.sub(18, tokenDecimals);\\n        return 10**decimalsDifference;\\n    }\\n\\n    function _scalingFactor(IERC20 token) internal view returns (uint256) {\\n        // prettier-ignore\\n        if (token == _token0) { return _scalingFactor0; }\\n        else if (token == _token1) { return _scalingFactor1; }\\n        else if (token == _token2) { return _scalingFactor2; }\\n        else if (token == _token3) { return _scalingFactor3; }\\n        else if (token == _token4) { return _scalingFactor4; }\\n        else if (token == _token5) { return _scalingFactor5; }\\n        else if (token == _token6) { return _scalingFactor6; }\\n        else {\\n            revert(\\\"INVALID_TOKEN\\\");\\n        }\\n    }\\n\\n    function _scalingFactors() internal view returns (uint256[] memory) {\\n        uint256[] memory scalingFactors = new uint256[](_totalTokens);\\n\\n        // prettier-ignore\\n        {\\n            if (_totalTokens > 0) { scalingFactors[0] = _scalingFactor0; } else { return scalingFactors; }\\n            if (_totalTokens > 1) { scalingFactors[1] = _scalingFactor1; } else { return scalingFactors; }\\n            if (_totalTokens > 2) { scalingFactors[2] = _scalingFactor2; } else { return scalingFactors; }\\n            if (_totalTokens > 3) { scalingFactors[3] = _scalingFactor3; } else { return scalingFactors; }\\n            if (_totalTokens > 4) { scalingFactors[4] = _scalingFactor4; } else { return scalingFactors; }\\n            if (_totalTokens > 5) { scalingFactors[5] = _scalingFactor5; } else { return scalingFactors; }\\n            if (_totalTokens > 6) { scalingFactors[6] = _scalingFactor6; } else { return scalingFactors; }\\n        }\\n\\n        return scalingFactors;\\n    }\\n\\n    function _upscale(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.mul(amount, scalingFactor);\\n    }\\n\\n    function _upscaleArray(uint256[] memory amount, uint256[] memory scalingFactors) internal view {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            amount[i] = Math.mul(amount[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _downscaleDown(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.divDown(amount, scalingFactor);\\n    }\\n\\n    function _downscaleDownArray(uint256[] memory amount, uint256[] memory scalingFactors) internal view {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            amount[i] = Math.divDown(amount[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _downscaleUp(uint256 amount, uint256 scalingFactor) internal pure returns (uint256) {\\n        return Math.divUp(amount, scalingFactor);\\n    }\\n\\n    function _downscaleUpArray(uint256[] memory amount, uint256[] memory scalingFactors) internal view {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            amount[i] = Math.divUp(amount[i], scalingFactors[i]);\\n        }\\n    }\\n\\n    function _getAuthorizer() internal view override returns (IAuthorizer) {\\n        return _vault.getAuthorizer();\\n    }\\n\\n    function _queryAction(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] memory currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData,\\n        function(bytes32, address, address, uint256[] memory, uint256, uint256, bytes memory)\\n            internal\\n            returns (uint256, uint256[] memory, uint256[] memory) _action,\\n        function(uint256[] memory, uint256[] memory) internal view _downscaleArray\\n    ) private returns (uint256, uint256[] memory) {\\n        // This uses the same technique used by the Vault in queryBatchSwap. Refer to that function for a detailed\\n        // explanation.\\n\\n        if (msg.sender != address(this)) {\\n            // We perform an external call to ourselves, forwarding the same calldata. In this call, the else clause of\\n            // the preceding if statement will be executed instead.\\n\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, ) = address(this).call(msg.data);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // This call should always revert to decode the bpt and token amounts from the revert reason\\n                switch success\\n                    case 0 {\\n                        // Note we are manually writing the memory slot 0. We can safely overwrite whatever is\\n                        // stored there as we take full control of the execution and then immediately return.\\n\\n                        // We copy the first 4 bytes to check if it matches with the expected signature, otherwise\\n                        // there was another revert reason and we should forward it.\\n                        returndatacopy(0, 0, 0x04)\\n                        let error := and(mload(0), 0xffffffff00000000000000000000000000000000000000000000000000000000)\\n\\n                        // If the first 4 bytes don't match with the expected signature, we forward the revert reason.\\n                        if eq(eq(error, 0x43adbafb00000000000000000000000000000000000000000000000000000000), 0) {\\n                            returndatacopy(0, 0, returndatasize())\\n                            revert(0, returndatasize())\\n                        }\\n\\n                        // The returndata contains the signature, followed by the raw memory representation of the\\n                        // `bptAmount` and `tokenAmounts` (array: length + data). We need to return an ABI-encoded\\n                        // representation of these.\\n                        // An ABI-encoded response will include one additional field to indicate the starting offset of\\n                        // the `tokenAmounts` array. The `bptAmount` will be laid out in the first word of the\\n                        // returndata.\\n                        //\\n                        // In returndata:\\n                        // [ signature ][ bptAmount ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  4 bytes  ][  32 bytes ][       32 bytes      ][ (32 * length) bytes ]\\n                        //\\n                        // We now need to return (ABI-encoded values):\\n                        // [ bptAmount ][ tokeAmounts offset ][ tokenAmounts length ][ tokenAmounts values ]\\n                        // [  32 bytes ][       32 bytes     ][       32 bytes      ][ (32 * length) bytes ]\\n\\n                        // We copy 32 bytes for the `bptAmount` from returndata into memory.\\n                        // Note that we skip the first 4 bytes for the error signature\\n                        returndatacopy(0, 0x04, 32)\\n\\n                        // The offsets are 32-bytes long, so the array of `tokenAmounts` will start after\\n                        // the initial 64 bytes.\\n                        mstore(0x20, 64)\\n\\n                        // We now copy the raw memory array for the `tokenAmounts` from returndata into memory.\\n                        // Since bpt amount and offset take up 64 bytes, we start copying at address 0x40. We also\\n                        // skip the first 36 bytes from returndata, which correspond to the signature plus bpt amount.\\n                        returndatacopy(0x40, 0x24, sub(returndatasize(), 36))\\n\\n                        // We finally return the ABI-encoded uint256 and the array, which has a total length equal to\\n                        // the size of returndata, plus the 32 bytes of the offset but without the 4 bytes of the\\n                        // error signature.\\n                        return(0, add(returndatasize(), 28))\\n                    }\\n                    default {\\n                        // This call should always revert, but we fail nonetheless if that didn't happen\\n                        invalid()\\n                    }\\n            }\\n        } else {\\n            uint256[] memory scalingFactors = _scalingFactors();\\n            _upscaleArray(currentBalances, scalingFactors);\\n\\n            (uint256 bptAmount, uint256[] memory tokenAmounts, ) = _action(\\n                poolId,\\n                sender,\\n                recipient,\\n                currentBalances,\\n                latestBlockNumberUsed,\\n                protocolSwapFeePercentage,\\n                userData\\n            );\\n\\n            _downscaleArray(tokenAmounts, scalingFactors);\\n\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                // We will return a raw representation of `bptAmount` and `tokenAmounts` in memory, which is composed of\\n                // a 32-byte uint256, followed by a 32-byte for the array length, and finally the 32-byte uint256 values\\n                // Because revert expects a size in bytes, we multiply the array length (stored at `tokenAmounts`) by 32\\n                let size := mul(mload(tokenAmounts), 32)\\n\\n                // We store the `bptAmount` in the previous slot to the `tokenAmounts` array. We can make sure there\\n                // will be at least one available slot due to how the memory scratch space works.\\n                // We can safely overwrite whatever is stored in this slot as we will revert immediately after that.\\n                let start := sub(tokenAmounts, 0x20)\\n                mstore(start, bptAmount)\\n\\n                // We send one extra value for the error signature \\\"QueryError(uint256,uint256[])\\\" which is 0x43adbafb\\n                // We use the previous slot to `bptAmount`.\\n                mstore(sub(start, 0x20), 0x0000000000000000000000000000000000000000000000000000000043adbafb)\\n                start := sub(start, 0x04)\\n\\n                // When copying from `tokenAmounts` into returndata, we copy the additional 68 bytes to also return\\n                // the `bptAmount`, the array 's length, and the error signature.\\n                revert(start, add(size, 68))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1047900fe49552f4fc1710c8dc135da6f7003b683251ae5ebd1cf9f5d807c111\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BasePoolAuthorization.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../lib/helpers/Authentication.sol\\\";\\nimport \\\"../vault/interfaces/IAuthorizer.sol\\\";\\n\\n/**\\n * @dev Base authorization layer implementation for pools. It shares the same concept as the one defined for the Vault.\\n * It's built on top of OpenZeppelin's Access Control, which allows to define specific roles to control the access of\\n * external accounts to the different functionalities of the contract.\\n */\\nabstract contract BasePoolAuthorization is Authentication {\\n    function getAuthorizer() external view returns (IAuthorizer) {\\n        return _getAuthorizer();\\n    }\\n\\n    function _canPerform(bytes32 roleId, address account) internal view override returns (bool) {\\n        return _getAuthorizer().hasRole(roleId, account);\\n    }\\n\\n    function _getAuthorizer() internal view virtual returns (IAuthorizer);\\n}\\n\",\"keccak256\":\"0x258ebbdfec83ef47f76782e50ecad46b9c554c4c8e7b9e27c185162d06a82397\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/BasePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../vault/interfaces/IVault.sol\\\";\\nimport \\\"../vault/interfaces/IBasePool.sol\\\";\\n\\nabstract contract BasePoolFactory {\\n    IVault public immutable vault;\\n\\n    event PoolRegistered(address indexed pool);\\n\\n    constructor(IVault _vault) {\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @dev Registers a new created pool. Emits a `PoolRegistered` event.\\n     */\\n    function _register(address pool) internal {\\n        emit PoolRegistered(pool);\\n    }\\n}\\n\",\"keccak256\":\"0x5e51d1183988123f02d367c4d45e488c9287ccf42adea3bd118a998557d668cc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stable/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../lib/math/Math.sol\\\";\\nimport \\\"../../lib/math/FixedPoint.sol\\\";\\n\\n// This is a contract to emulate file-level functions. Convert to a library\\n// after the migration to solc v0.7.1.\\n\\n// solhint-disable private-vars-leading-underscore\\n// solhint-disable var-name-mixedcase\\n\\ncontract StableMath {\\n    using FixedPoint for uint256;\\n\\n    uint256 internal constant _MIN_AMP = 1e18;\\n    uint256 internal constant _MAX_AMP = 5000 * (1e18);\\n\\n    uint256 internal constant _MAX_STABLE_TOKENS = 5;\\n\\n    // Computes the invariant given the current balances using Newton-Raphson approximation.\\n    // The amplification parameter equals to: A n^(n-1)\\n    function _calculateInvariant(uint256 amplificationParameter, uint256[] memory balances)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        /**********************************************************************************************\\n        // invariant                                                                                 //\\n        // D = invariant                                                  D^(n+1)                    //\\n        // A = amplification coefficient      A  n^n S + D = A D n^n + -----------                   //\\n        // S = sum of balances                                             n^n P                     //\\n        // P = product of balances                                                                   //\\n        // n = number of tokens                                                                      //\\n        *********x************************************************************************************/\\n\\n        // We round up invariant.\\n\\n        uint256 sum = 0;\\n        uint256 numTokens = balances.length;\\n        for (uint256 i = 0; i < numTokens; i++) {\\n            sum = sum.add(balances[i]);\\n        }\\n        if (sum == 0) {\\n            return 0;\\n        }\\n        uint256 prevInvariant = 0;\\n        uint256 invariant = sum;\\n        uint256 ampTimesTotal = Math.mul(amplificationParameter, numTokens);\\n\\n        for (uint256 i = 0; i < 255; i++) {\\n            uint256 P_D = Math.mul(numTokens, balances[0]);\\n            for (uint256 j = 1; j < numTokens; j++) {\\n                P_D = Math.divUp(Math.mul(Math.mul(P_D, balances[j]), numTokens), invariant);\\n            }\\n            prevInvariant = invariant;\\n            invariant = Math.divUp(\\n                Math.mul(Math.mul(numTokens, invariant), invariant).add(Math.mul(Math.mul(ampTimesTotal, sum), P_D)),\\n                Math.mul(numTokens.add(1), invariant).add(Math.mul(ampTimesTotal.sub(1), P_D))\\n            );\\n\\n            if (invariant > prevInvariant) {\\n                if (invariant.sub(prevInvariant) <= 1) {\\n                    break;\\n                }\\n            } else if (prevInvariant.sub(invariant) <= 1) {\\n                break;\\n            }\\n        }\\n        return invariant;\\n    }\\n\\n    // Computes how many tokens can be taken out of a pool if `tokenAmountIn` are sent, given the\\n    // current balances.\\n    // The amplification parameter equals to: A n^(n-1)\\n    function _calcOutGivenIn(\\n        uint256 amplificationParameter,\\n        uint256[] memory balances,\\n        uint256 tokenIndexIn,\\n        uint256 tokenIndexOut,\\n        uint256 tokenAmountIn\\n    ) internal pure returns (uint256) {\\n        /**************************************************************************************************************\\n        // outGivenIn token x for y - polynomial equation to solve                                                   //\\n        // ay = amount out to calculate                                                                              //\\n        // by = balance token out                                                                                    //\\n        // y = by - ay (finalBalanceOut)                                                                             //\\n        // D = invariant                                               D                     D^(n+1)                 //\\n        // A = amplification coefficient               y^2 + ( S - ----------  - D) * y -  ------------- = 0         //\\n        // n = number of tokens                                    (A * n^n)               A * n^2n * P              //\\n        // S = sum of final balances but y                                                                           //\\n        // P = product of final balances but y                                                                       //\\n        **************************************************************************************************************/\\n\\n        // Amount out, so we round down overall.\\n\\n        uint256 invariant = _calculateInvariant(amplificationParameter, balances);\\n\\n        balances[tokenIndexIn] = balances[tokenIndexIn].add(tokenAmountIn);\\n\\n        uint256 finalBalanceOut = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n            amplificationParameter,\\n            balances,\\n            invariant,\\n            tokenIndexOut\\n        );\\n\\n        balances[tokenIndexIn] = balances[tokenIndexIn].sub(tokenAmountIn);\\n\\n        return balances[tokenIndexOut].sub(finalBalanceOut).sub(1);\\n    }\\n\\n    // Computes how many tokens must be sent to a pool if `tokenAmountOut` are sent given the\\n    // current balances using Newton-Raphson approximation.\\n    // The amplification parameter equals to: A n^(n-1)\\n    function _calcInGivenOut(\\n        uint256 amplificationParameter,\\n        uint256[] memory balances,\\n        uint256 tokenIndexIn,\\n        uint256 tokenIndexOut,\\n        uint256 tokenAmountOut\\n    ) internal pure returns (uint256) {\\n        /**************************************************************************************************************\\n        // inGivenOut token x for y - polynomial equation to solve                                                   //\\n        // ax = amount in to calculate                                                                               //\\n        // bx = balance token in                                                                                     //\\n        // x = bx + ax (finalBalanceIn)                                                                              //\\n        // D = invariant                                                D                     D^(n+1)                //\\n        // A = amplification coefficient               x^2 + ( S - ----------  - D) * x -  ------------- = 0         //\\n        // n = number of tokens                                     (A * n^n)               A * n^2n * P             //\\n        // S = sum of final balances but x                                                                           //\\n        // P = product of final balances but x                                                                       //\\n        **************************************************************************************************************/\\n\\n        // Amount in, so we round up overall.\\n\\n        uint256 invariant = _calculateInvariant(amplificationParameter, balances);\\n\\n        balances[tokenIndexOut] = balances[tokenIndexOut].sub(tokenAmountOut);\\n\\n        uint256 finalBalanceIn = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n            amplificationParameter,\\n            balances,\\n            invariant,\\n            tokenIndexIn\\n        );\\n\\n        balances[tokenIndexOut] = balances[tokenIndexOut].add(tokenAmountOut);\\n\\n        return finalBalanceIn.sub(balances[tokenIndexIn]).add(1);\\n    }\\n\\n    /* \\n    TODO: document it correctly\\n    Flow of calculations:\\n    amountsTokenIn -> amountsInProportional ->\\n    amountsInPercentageExcess -> amountsInAfterFee -> newInvariant -> amountBPTOut\\n    TODO: remove equations below and save them to Notion documentation \\n    amountInPercentageExcess = 1 - amountInProportional/amountIn (if amountIn>amountInProportional)\\n    amountInAfterFee = amountIn * (1 - swapFee * amountInPercentageExcess)\\n    amountInAfterFee = amountIn - fees \\n    fees = (amountIn - amountInProportional) * swapFee\\n    amountInAfterFee = amountIn - (amountIn - amountInProportional) * swapFee\\n    amountInAfterFee = amountIn * (1 - (1 - amountInProportional/amountIn) * swapFee)\\n    amountInAfterFee = amountIn * (1 - amountInPercentageExcess * swapFee)\\n    */\\n    function _calcBptOutGivenExactTokensIn(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256[] memory amountsIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        // BPT out, so we round down overall.\\n\\n        // Get current invariant\\n        uint256 currentInvariant = _calculateInvariant(amp, balances);\\n\\n        // First calculate the sum of all token balances which will be used to calculate\\n        // the current weights of each token relative to the sum of all balances\\n        uint256 sumBalances = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            sumBalances = sumBalances.add(balances[i]);\\n        }\\n\\n        // Calculate the weighted balance ratio without considering fees\\n        uint256[] memory tokenBalanceRatiosWithoutFee = new uint256[](amountsIn.length);\\n        // The weighted sum of token balance rations sans fee\\n        uint256 weightedBalanceRatio = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            uint256 currentWeight = balances[i].divDown(sumBalances);\\n            tokenBalanceRatiosWithoutFee[i] = balances[i].add(amountsIn[i]).divDown(balances[i]);\\n            weightedBalanceRatio = weightedBalanceRatio.add(tokenBalanceRatiosWithoutFee[i].mulDown(currentWeight));\\n        }\\n\\n        // Second loop to calculate new amounts in taking into account the fee on the % excess\\n        uint256[] memory newBalances = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            // Percentage of the amount supplied that will be implicitly swapped for other tokens in the pool\\n            uint256 tokenBalancePercentageExcess;\\n            // Some tokens might have amounts supplied in excess of a 'balanced' join: these are identified if\\n            // the token's balance ratio sans fee is larger than the weighted balance ratio, and swap fees charged\\n            // on the amount to swap\\n            if (weightedBalanceRatio >= tokenBalanceRatiosWithoutFee[i]) {\\n                tokenBalancePercentageExcess = 0;\\n            } else {\\n                tokenBalancePercentageExcess = tokenBalanceRatiosWithoutFee[i].sub(weightedBalanceRatio).divUp(\\n                    tokenBalanceRatiosWithoutFee[i].sub(FixedPoint.ONE)\\n                );\\n            }\\n\\n            uint256 swapFeeExcess = swapFee.mulUp(tokenBalancePercentageExcess);\\n\\n            uint256 amountInAfterFee = amountsIn[i].mulDown(swapFeeExcess.complement());\\n\\n            newBalances[i] = balances[i].add(amountInAfterFee);\\n        }\\n\\n        // get new invariant taking into account swap fees\\n        uint256 newInvariant = _calculateInvariant(amp, newBalances);\\n\\n        // return amountBPTOut\\n        return bptTotalSupply.mulDown(newInvariant.divDown(currentInvariant).sub(FixedPoint.ONE));\\n    }\\n\\n    /* \\n    TODO: document it correctly\\n    Flow of calculations:\\n    amountBPTOut -> newInvariant -> (amountInProportional, amountInAfterFee) ->\\n    amountInPercentageExcess -> amountIn\\n    */\\n    function _calcTokenInGivenExactBptOut(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256 tokenIndex,\\n        uint256 bptAmountOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        // Token in, so we round up overall.\\n\\n        // Get current invariant\\n        uint256 currentInvariant = _calculateInvariant(amp, balances);\\n\\n        // Calculate new invariant\\n        uint256 newInvariant = bptTotalSupply.add(bptAmountOut).divUp(bptTotalSupply).mulUp(currentInvariant);\\n\\n        // First calculate the sum of all token balances which will be used to calculate\\n        // the current weight of token\\n        uint256 sumBalances = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            sumBalances = sumBalances.add(balances[i]);\\n        }\\n\\n        // get amountInAfterFee\\n        uint256 newBalanceTokenIndex = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n            amp,\\n            balances,\\n            newInvariant,\\n            tokenIndex\\n        );\\n        uint256 amountInAfterFee = newBalanceTokenIndex.sub(balances[tokenIndex]);\\n\\n        // Get tokenBalancePercentageExcess\\n        uint256 currentWeight = balances[tokenIndex].divDown(sumBalances);\\n        uint256 tokenBalancePercentageExcess = currentWeight.complement();\\n\\n        uint256 swapFeeExcess = swapFee.mulUp(tokenBalancePercentageExcess);\\n\\n        return amountInAfterFee.divUp(swapFeeExcess.complement());\\n    }\\n\\n    /* \\n    Flow of calculations:\\n    amountsTokenOut -> amountsOutProportional ->\\n    amountOutPercentageExcess -> amountOutBeforeFee -> newInvariant -> amountBPTIn\\n    */\\n    function _calcBptInGivenExactTokensOut(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256[] memory amountsOut,\\n        uint256 bptTotalSupply,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        // BPT in, so we round up overall.\\n\\n        // Get current invariant\\n        uint256 currentInvariant = _calculateInvariant(amp, balances);\\n\\n        // First calculate the sum of all token balances which will be used to calculate\\n        // the current weights of each token relative to the sum of all balances\\n        uint256 sumBalances = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            sumBalances = sumBalances.add(balances[i]);\\n        }\\n\\n        // Calculate the weighted balance ratio without considering fees\\n        uint256[] memory tokenBalanceRatiosWithoutFee = new uint256[](amountsOut.length);\\n        uint256 weightedBalanceRatio = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            uint256 currentWeight = balances[i].divUp(sumBalances);\\n            tokenBalanceRatiosWithoutFee[i] = balances[i].sub(amountsOut[i]).divUp(balances[i]);\\n            weightedBalanceRatio = weightedBalanceRatio.add(tokenBalanceRatiosWithoutFee[i].mulUp(currentWeight));\\n        }\\n\\n        // Second loop to calculate new amounts in taking into account the fee on the % excess\\n        uint256[] memory newBalances = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            uint256 tokenBalancePercentageExcess;\\n            // For each ratioSansFee, compare with the total weighted ratio (weightedBalanceRatio) and\\n            // decrease the fee from what goes above it\\n            if (weightedBalanceRatio <= tokenBalanceRatiosWithoutFee[i]) {\\n                tokenBalancePercentageExcess = 0;\\n            } else {\\n                tokenBalancePercentageExcess = weightedBalanceRatio.sub(tokenBalanceRatiosWithoutFee[i]).divUp(\\n                    tokenBalanceRatiosWithoutFee[i].complement()\\n                );\\n            }\\n\\n            uint256 swapFeeExcess = swapFee.mulUp(tokenBalancePercentageExcess);\\n\\n            uint256 amountOutBeforeFee = amountsOut[i].divUp(swapFeeExcess.complement());\\n\\n            newBalances[i] = balances[i].sub(amountOutBeforeFee);\\n        }\\n\\n        // get new invariant taking into account swap fees\\n        uint256 newInvariant = _calculateInvariant(amp, newBalances);\\n\\n        // return amountBPTIn\\n        return bptTotalSupply.mulUp(newInvariant.divUp(currentInvariant).complement());\\n    }\\n\\n    /* \\n    TODO: document it correctly\\n    Flow of calculations:\\n    amountBPTin -> newInvariant -> (amountOutProportional, amountOutBeforeFee) ->\\n    amountOutPercentageExcess -> amountOut\\n    */\\n    function _calcTokenOutGivenExactBptIn(\\n        uint256 amp,\\n        uint256[] memory balances,\\n        uint256 tokenIndex,\\n        uint256 bptAmountIn,\\n        uint256 bptTotalSupply,\\n        uint256 swapFee\\n    ) internal pure returns (uint256) {\\n        // Get current invariant\\n        uint256 currentInvariant = _calculateInvariant(amp, balances);\\n        // Calculate new invariant\\n        uint256 newInvariant = bptTotalSupply.sub(bptAmountIn).divUp(bptTotalSupply).mulUp(currentInvariant);\\n\\n        // First calculate the sum of all token balances which will be used to calculate\\n        // the current weight of token\\n        uint256 sumBalances = 0;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            sumBalances = sumBalances.add(balances[i]);\\n        }\\n\\n        // get amountOutBeforeFee\\n        uint256 newBalanceTokenIndex = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n            amp,\\n            balances,\\n            newInvariant,\\n            tokenIndex\\n        );\\n        uint256 amountOutBeforeFee = balances[tokenIndex].sub(newBalanceTokenIndex);\\n\\n        // Calculate tokenBalancePercentageExcess\\n        uint256 currentWeight = balances[tokenIndex].divDown(sumBalances);\\n        uint256 tokenBalancePercentageExcess = currentWeight.complement();\\n\\n        uint256 swapFeeExcess = swapFee.mulUp(tokenBalancePercentageExcess);\\n\\n        return amountOutBeforeFee.mulDown(swapFeeExcess.complement());\\n    }\\n\\n    function _calcTokensOutGivenExactBptIn(\\n        uint256[] memory balances,\\n        uint256 bptAmountIn,\\n        uint256 bptTotalSupply\\n    ) internal pure returns (uint256[] memory) {\\n        /**********************************************************************************************\\n        // exactBPTInForTokensOut                                                                    //\\n        // (per token)                                                                               //\\n        // aO = tokenAmountOut             /        bptIn         \\\\                                  //\\n        // b = tokenBalance      a0 = b * | ---------------------  |                                 //\\n        // bptIn = bptAmountIn             \\\\     bptTotalSupply    /                                 //\\n        // bpt = bptTotalSupply                                                                      //\\n        **********************************************************************************************/\\n\\n        // Since we're computing an amount out, we round down overall. This means rounding down on both the\\n        // multiplication and division.\\n\\n        uint256 bptRatio = bptAmountIn.divDown(bptTotalSupply);\\n\\n        uint256[] memory amountsOut = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsOut[i] = balances[i].mulDown(bptRatio);\\n        }\\n\\n        return amountsOut;\\n    }\\n\\n    // The amplification parameter equals to: A n^(n-1)\\n    function _calcDueTokenProtocolSwapFee(\\n        uint256 amplificationParameter,\\n        uint256[] memory balances,\\n        uint256 lastInvariant,\\n        uint256 tokenIndex,\\n        uint256 protocolSwapFeePercentage\\n    ) internal pure returns (uint256) {\\n        /**************************************************************************************************************\\n        // oneTokenSwapFee - polynomial equation to solve                                                            //\\n        // af = fee amount to calculate in one token                                                                 //\\n        // bf = balance of fee token                                                                                 //\\n        // f = bf - af (finalBalanceFeeToken)                                                                        //\\n        // D = old invariant                                            D                     D^(n+1)                //\\n        // A = amplification coefficient               f^2 + ( S - ----------  - D) * f -  ------------- = 0         //\\n        // n = number of tokens                                    (A * n^n)               A * n^2n * P              //\\n        // S = sum of final balances but f                                                                           //\\n        // P = product of final balances but f                                                                       //\\n        **************************************************************************************************************/\\n\\n        // Protocol swap fee, so we round down overall.\\n\\n        uint256 finalBalanceFeeToken = _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n            amplificationParameter,\\n            balances,\\n            lastInvariant,\\n            tokenIndex\\n        );\\n\\n        //Result is rounded down\\n        uint256 accumulatedTokenSwapFees = balances[tokenIndex] > finalBalanceFeeToken\\n            ? balances[tokenIndex].sub(finalBalanceFeeToken)\\n            : 0;\\n        return accumulatedTokenSwapFees.mul(protocolSwapFeePercentage).divDown(FixedPoint.ONE);\\n    }\\n\\n    //Private functions\\n\\n    //This function calculates the balance of a given token (tokenIndex)\\n    // given all the other balances and the invariant\\n    function _getTokenBalanceGivenInvariantAndAllOtherBalances(\\n        uint256 amplificationParameter,\\n        uint256[] memory balances,\\n        uint256 invariant,\\n        uint256 tokenIndex\\n    ) private pure returns (uint256) {\\n        //Rounds result up overall\\n\\n        uint256 ampTimesTotal = Math.mul(amplificationParameter, balances.length);\\n        uint256 sum = balances[0];\\n        uint256 P_D = Math.mul(balances.length, balances[0]);\\n        for (uint256 j = 1; j < balances.length; j++) {\\n            P_D = Math.divDown(Math.mul(Math.mul(P_D, balances[j]), balances.length), invariant);\\n            sum = sum.add(balances[j]);\\n        }\\n        sum = sum.sub(balances[tokenIndex]);\\n\\n        uint256 c = Math.divUp(Math.mul(invariant, invariant), ampTimesTotal);\\n        //We remove the balance fromm c by multiplying it\\n        c = c.mul(balances[tokenIndex]).div(P_D);\\n\\n        uint256 b = sum.mul(FixedPoint.ONE).add(invariant.div(ampTimesTotal));\\n\\n        //We iterate to find the balance\\n        uint256 prevTokenBalance = 0;\\n        //We apply first iteration outside the loop with the invariant as the starting aproximation value.\\n        uint256 tokenBalance = invariant.mul(invariant).add(c).divUp(invariant.add(b));\\n\\n        for (uint256 i = 0; i < 255; i++) {\\n            prevTokenBalance = tokenBalance;\\n\\n            tokenBalance = tokenBalance.mul(tokenBalance).add(c).divUp(Math.mul(tokenBalance, 2).add(b).sub(invariant));\\n\\n            if (tokenBalance > prevTokenBalance) {\\n                if (tokenBalance.sub(prevTokenBalance) <= 1) {\\n                    break;\\n                }\\n            } else if (prevTokenBalance.sub(tokenBalance) <= 1) {\\n                break;\\n            }\\n        }\\n        return tokenBalance;\\n    }\\n}\\n\",\"keccak256\":\"0xbfd8d38b7ba1756fe1dcd476779ce2b278e37e566f9e730ec1edd007afa09431\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stable/StablePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../lib/math/FixedPoint.sol\\\";\\nimport \\\"../../lib/helpers/InputHelpers.sol\\\";\\n\\nimport \\\"../BaseGeneralPool.sol\\\";\\n\\nimport \\\"./StableMath.sol\\\";\\nimport \\\"./StablePoolUserDataHelpers.sol\\\";\\n\\ncontract StablePool is BaseGeneralPool, StableMath {\\n    using FixedPoint for uint256;\\n    using StablePoolUserDataHelpers for bytes;\\n\\n    uint256 private immutable _amplificationParameter;\\n\\n    uint256 private _lastInvariant;\\n\\n    enum JoinKind { INIT, EXACT_TOKENS_IN_FOR_BPT_OUT, TOKEN_IN_FOR_EXACT_BPT_OUT }\\n    enum ExitKind { EXACT_BPT_IN_FOR_ONE_TOKEN_OUT, EXACT_BPT_IN_FOR_TOKENS_OUT, BPT_IN_FOR_EXACT_TOKENS_OUT }\\n\\n    constructor(\\n        IVault vault,\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256 amplificationParameter,\\n        uint256 swapFee,\\n        uint256 emergencyPeriod,\\n        uint256 emergencyPeriodCheckExtension\\n    ) BaseGeneralPool(vault, name, symbol, tokens, swapFee, emergencyPeriod, emergencyPeriodCheckExtension) {\\n        require(amplificationParameter >= _MIN_AMP, \\\"MIN_AMP\\\");\\n        require(amplificationParameter <= _MAX_AMP, \\\"MAX_AMP\\\");\\n\\n        require(tokens.length <= _MAX_STABLE_TOKENS, \\\"MAX_STABLE_TOKENS\\\");\\n\\n        _amplificationParameter = amplificationParameter;\\n    }\\n\\n    function getAmplificationParameter() external view returns (uint256) {\\n        return _amplificationParameter;\\n    }\\n\\n    // Base Pool handlers\\n\\n    // Swap\\n\\n    function _onSwapGivenIn(\\n        IPoolSwapStructs.SwapRequestGivenIn memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) internal view virtual override noEmergencyPeriod returns (uint256) {\\n        uint256 amountOut = StableMath._calcOutGivenIn(\\n            _amplificationParameter,\\n            balances,\\n            indexIn,\\n            indexOut,\\n            swapRequest.amountIn\\n        );\\n\\n        return amountOut;\\n    }\\n\\n    function _onSwapGivenOut(\\n        IPoolSwapStructs.SwapRequestGivenOut memory swapRequest,\\n        uint256[] memory balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) internal view virtual override noEmergencyPeriod returns (uint256) {\\n        uint256 amountIn = StableMath._calcInGivenOut(\\n            _amplificationParameter,\\n            balances,\\n            indexIn,\\n            indexOut,\\n            swapRequest.amountOut\\n        );\\n\\n        return amountIn;\\n    }\\n\\n    // Initialize\\n\\n    function _onInitializePool(\\n        bytes32,\\n        address,\\n        address,\\n        bytes memory userData\\n    ) internal virtual override noEmergencyPeriod returns (uint256, uint256[] memory) {\\n        StablePool.JoinKind kind = userData.joinKind();\\n        require(kind == StablePool.JoinKind.INIT, \\\"UNINITIALIZED\\\");\\n\\n        uint256[] memory amountsIn = userData.initialAmountsIn();\\n        InputHelpers.ensureInputLengthMatch(amountsIn.length, _totalTokens);\\n        _upscaleArray(amountsIn, _scalingFactors());\\n\\n        uint256 invariantAfterJoin = StableMath._calculateInvariant(_amplificationParameter, amountsIn);\\n        uint256 bptAmountOut = invariantAfterJoin;\\n\\n        _lastInvariant = invariantAfterJoin;\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    // Join\\n\\n    function _onJoinPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory balances,\\n        uint256,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        override\\n        noEmergencyPeriod\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        // Due protocol swap fees are computed by measuring the growth of the invariant from the previous join or exit\\n        // event and now - the invariant's growth is due exclusively to swap fees.\\n        uint256[] memory dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(\\n            balances,\\n            _lastInvariant,\\n            protocolSwapFeePercentage\\n        );\\n\\n        // Update the balances by subtracting the protocol fees that will be charged by the Vault once this function\\n        // returns.\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            balances[i] = balances[i].sub(dueProtocolFeeAmounts[i]);\\n        }\\n\\n        (uint256 bptAmountOut, uint256[] memory amountsIn) = _doJoin(balances, userData);\\n\\n        // Update the invariant with the balances the Pool will have after the join, in order to compute the due\\n        // protocol swap fees in future joins and exits.\\n        _lastInvariant = _invariantAfterJoin(balances, amountsIn);\\n\\n        return (bptAmountOut, amountsIn, dueProtocolFeeAmounts);\\n    }\\n\\n    function _doJoin(uint256[] memory balances, bytes memory userData)\\n        private\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        JoinKind kind = userData.joinKind();\\n\\n        if (kind == JoinKind.EXACT_TOKENS_IN_FOR_BPT_OUT) {\\n            return _joinExactTokensInForBPTOut(balances, userData);\\n        } else if (kind == JoinKind.TOKEN_IN_FOR_EXACT_BPT_OUT) {\\n            return _joinTokenInForExactBPTOut(balances, userData);\\n        } else {\\n            revert(\\\"UNHANDLED_JOIN_KIND\\\");\\n        }\\n    }\\n\\n    function _joinExactTokensInForBPTOut(uint256[] memory balances, bytes memory userData)\\n        private\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        (uint256[] memory amountsIn, uint256 minBPTAmountOut) = userData.exactTokensInForBptOut();\\n        require(amountsIn.length == _totalTokens, \\\"ERR_AMOUNTS_IN_LENGTH\\\");\\n        _upscaleArray(amountsIn, _scalingFactors());\\n\\n        uint256 bptAmountOut = StableMath._calcBptOutGivenExactTokensIn(\\n            _amplificationParameter,\\n            balances,\\n            amountsIn,\\n            totalSupply(),\\n            _swapFee\\n        );\\n\\n        require(bptAmountOut >= minBPTAmountOut, \\\"BPT_OUT_MIN_AMOUNT\\\");\\n\\n        return (bptAmountOut, amountsIn);\\n    }\\n\\n    function _joinTokenInForExactBPTOut(uint256[] memory balances, bytes memory userData)\\n        private\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        (uint256 bptAmountOut, uint256 tokenIndex) = userData.tokenInForExactBptOut();\\n\\n        uint256 amountIn = StableMath._calcTokenInGivenExactBptOut(\\n            _amplificationParameter,\\n            balances,\\n            tokenIndex,\\n            bptAmountOut,\\n            totalSupply(),\\n            _swapFee\\n        );\\n\\n        // We join in a single token, so we initialize downscaledAmountsIn with zeros and\\n        // set only downscaledAmountsIn[tokenIndex]\\n        uint256[] memory downscaledAmountsIn = new uint256[](_totalTokens);\\n        downscaledAmountsIn[tokenIndex] = amountIn;\\n\\n        return (bptAmountOut, downscaledAmountsIn);\\n    }\\n\\n    // Exit\\n\\n    function _onExitPool(\\n        bytes32,\\n        address,\\n        address,\\n        uint256[] memory balances,\\n        uint256,\\n        uint256 protocolSwapFeePercentage,\\n        bytes memory userData\\n    )\\n        internal\\n        virtual\\n        override\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        // Due protocol swap fees are computed by measuring the growth of the invariant from the previous join or exit\\n        // event and now - the invariant's growth is due exclusively to swap fees.\\\\\\n\\n        uint256[] memory dueProtocolFeeAmounts = _getDueProtocolFeeAmounts(\\n            balances,\\n            _lastInvariant,\\n            protocolSwapFeePercentage\\n        );\\n\\n        // Update the balances by subtracting the protocol fees that will be charged by the Vault once this function\\n        // returns.\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            balances[i] = balances[i].sub(dueProtocolFeeAmounts[i]);\\n        }\\n\\n        (uint256 bptAmountIn, uint256[] memory amountsOut) = _doExit(balances, userData);\\n\\n        // Update the invariant with the balances the Pool will have after the exit, in order to compute the due\\n        // protocol swap fees in future joins and exits.\\n        _lastInvariant = _invariantAfterExit(balances, amountsOut);\\n\\n        return (bptAmountIn, amountsOut, dueProtocolFeeAmounts);\\n    }\\n\\n    function _doExit(uint256[] memory balances, bytes memory userData)\\n        private\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        ExitKind kind = userData.exitKind();\\n\\n        if (kind == ExitKind.EXACT_BPT_IN_FOR_ONE_TOKEN_OUT) {\\n            return _exitExactBPTInForTokenOut(balances, userData);\\n        } else if (kind == ExitKind.EXACT_BPT_IN_FOR_TOKENS_OUT) {\\n            return _exitExactBPTInForTokensOut(balances, userData);\\n        } else if (kind == ExitKind.BPT_IN_FOR_EXACT_TOKENS_OUT) {\\n            return _exitBPTInForExactTokensOut(balances, userData);\\n        } else {\\n            revert(\\\"UNHANDLED_EXIT_KIND\\\");\\n        }\\n    }\\n\\n    function _exitExactBPTInForTokenOut(uint256[] memory balances, bytes memory userData)\\n        private\\n        view\\n        noEmergencyPeriod\\n        returns (uint256, uint256[] memory)\\n    {\\n        (uint256 bptAmountIn, uint256 tokenIndex) = userData.exactBptInForTokenOut();\\n        require(tokenIndex < _totalTokens, \\\"OUT_OF_BOUNDS\\\");\\n\\n        // We exit in a single token, so we initialize amountsOut with zeros\\n        uint256[] memory amountsOut = new uint256[](_totalTokens);\\n\\n        amountsOut[tokenIndex] = StableMath._calcTokenOutGivenExactBptIn(\\n            _amplificationParameter,\\n            balances,\\n            tokenIndex,\\n            bptAmountIn,\\n            totalSupply(),\\n            _swapFee\\n        );\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    /**\\n     * @dev Note we are not tagging this function with `noEmergencyPeriod` to allow users exit in a proportional\\n     * manner in case there is an emergency in the pool. This operation should never be restricted.\\n     */\\n    function _exitExactBPTInForTokensOut(uint256[] memory balances, bytes memory userData)\\n        private\\n        view\\n        returns (uint256, uint256[] memory)\\n    {\\n        uint256 bptAmountIn = userData.exactBptInForTokensOut();\\n\\n        uint256[] memory amountsOut = StableMath._calcTokensOutGivenExactBptIn(balances, bptAmountIn, totalSupply());\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    function _exitBPTInForExactTokensOut(uint256[] memory balances, bytes memory userData)\\n        private\\n        view\\n        noEmergencyPeriod\\n        returns (uint256, uint256[] memory)\\n    {\\n        (uint256[] memory amountsOut, uint256 maxBPTAmountIn) = userData.bptInForExactTokensOut();\\n        InputHelpers.ensureInputLengthMatch(amountsOut.length, _totalTokens);\\n\\n        _upscaleArray(amountsOut, _scalingFactors());\\n\\n        uint256 bptAmountIn = StableMath._calcBptInGivenExactTokensOut(\\n            _amplificationParameter,\\n            balances,\\n            amountsOut,\\n            totalSupply(),\\n            _swapFee\\n        );\\n\\n        require(bptAmountIn <= maxBPTAmountIn, \\\"BPT_IN_MAX_AMOUNT\\\");\\n\\n        return (bptAmountIn, amountsOut);\\n    }\\n\\n    // Helpers\\n\\n    function _getDueProtocolFeeAmounts(\\n        uint256[] memory balances,\\n        uint256 previousInvariant,\\n        uint256 protocolSwapFeePercentage\\n    ) private view returns (uint256[] memory) {\\n        // Instead of paying the protocol swap fee in all tokens proportionally, we will pay it in a single one. This\\n        // will reduce gas costs for single asset joins and exits, as at most only two Pool balances will change (the\\n        // token joined/exited, and the token in which fees will be paid).\\n\\n        // The protocol fees is charged using the token with max balance in the pool.\\n        uint256 chosenTokenIndex = 0;\\n        uint256 maxBalance = balances[0];\\n        for (uint256 i = 1; i < _totalTokens; ++i) {\\n            uint256 currentBalance = balances[i];\\n            if (currentBalance > maxBalance) {\\n                chosenTokenIndex = i;\\n                maxBalance = currentBalance;\\n            }\\n        }\\n\\n        // Initialize with zeros\\n        uint256[] memory dueProtocolFeeAmounts = new uint256[](_totalTokens);\\n        // Set the fee to pay in the selected token\\n        dueProtocolFeeAmounts[chosenTokenIndex] = StableMath._calcDueTokenProtocolSwapFee(\\n            _amplificationParameter,\\n            balances,\\n            previousInvariant,\\n            chosenTokenIndex,\\n            protocolSwapFeePercentage\\n        );\\n\\n        return dueProtocolFeeAmounts;\\n    }\\n\\n    function _invariantAfterJoin(uint256[] memory balances, uint256[] memory amountsIn) private view returns (uint256) {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            balances[i] = balances[i].add(amountsIn[i]);\\n        }\\n\\n        return StableMath._calculateInvariant(_amplificationParameter, balances);\\n    }\\n\\n    function _invariantAfterExit(uint256[] memory balances, uint256[] memory amountsOut)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        for (uint256 i = 0; i < _totalTokens; ++i) {\\n            balances[i] = balances[i].sub(amountsOut[i]);\\n        }\\n\\n        return StableMath._calculateInvariant(_amplificationParameter, balances);\\n    }\\n\\n    // This function returns the appreciation of one BPT relative to the\\n    // underlying tokens. This starts at 1 when the pool is initialized and grows over time\\n    // It's the equivalent to Curve's get_virtual_price() function\\n    function getRate() public view override returns (uint256) {\\n        (, uint256[] memory balances) = _vault.getPoolTokens(_poolId);\\n        return StableMath._calculateInvariant(_amplificationParameter, balances).div(totalSupply());\\n    }\\n}\\n\",\"keccak256\":\"0x6b1e484eb042485190eea4170b2d6ba91b97fc9da1bd5a6dea88397cb01c508c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stable/StablePoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../vault/interfaces/IVault.sol\\\";\\n\\nimport \\\"../BasePoolFactory.sol\\\";\\n\\nimport \\\"./StablePool.sol\\\";\\n\\ncontract StablePoolFactory is BasePoolFactory {\\n    constructor(IVault _vault) BasePoolFactory(_vault) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev Deploys a new `StablePool`.\\n     */\\n    function create(\\n        string memory name,\\n        string memory symbol,\\n        IERC20[] memory tokens,\\n        uint256 amplificationParameter,\\n        uint256 swapFee,\\n        uint256 emergencyPeriod,\\n        uint256 emergencyPeriodCheckExtension\\n    ) external returns (address) {\\n        address pool = address(\\n            new StablePool(\\n                vault,\\n                name,\\n                symbol,\\n                tokens,\\n                amplificationParameter,\\n                swapFee,\\n                emergencyPeriod,\\n                emergencyPeriodCheckExtension\\n            )\\n        );\\n        _register(pool);\\n        return pool;\\n    }\\n}\\n\",\"keccak256\":\"0x9c65cd82481c0ec66dd7c9e784b83f8d54e386841261be859bd46a5a6ca76f7f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/pools/stable/StablePoolUserDataHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./StablePool.sol\\\";\\n\\nlibrary StablePoolUserDataHelpers {\\n    function joinKind(bytes memory self) internal pure returns (StablePool.JoinKind) {\\n        return abi.decode(self, (StablePool.JoinKind));\\n    }\\n\\n    function exitKind(bytes memory self) internal pure returns (StablePool.ExitKind) {\\n        return abi.decode(self, (StablePool.ExitKind));\\n    }\\n\\n    function initialAmountsIn(bytes memory self) internal pure returns (uint256[] memory amountsIn) {\\n        (, amountsIn) = abi.decode(self, (StablePool.JoinKind, uint256[]));\\n    }\\n\\n    function exactTokensInForBptOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsIn, uint256 minBPTAmountIn)\\n    {\\n        (, amountsIn, minBPTAmountIn) = abi.decode(self, (StablePool.JoinKind, uint256[], uint256));\\n    }\\n\\n    function tokenInForExactBptOut(bytes memory self) internal pure returns (uint256 bptAmountOut, uint256 tokenIndex) {\\n        (, bptAmountOut, tokenIndex) = abi.decode(self, (StablePool.JoinKind, uint256, uint256));\\n    }\\n\\n    function exactBptInForTokenOut(bytes memory self) internal pure returns (uint256 bptAmountIn, uint256 tokenIndex) {\\n        (, bptAmountIn, tokenIndex) = abi.decode(self, (StablePool.ExitKind, uint256, uint256));\\n    }\\n\\n    function exactBptInForTokensOut(bytes memory self) internal pure returns (uint256 bptAmountIn) {\\n        (, bptAmountIn) = abi.decode(self, (StablePool.ExitKind, uint256));\\n    }\\n\\n    function bptInForExactTokensOut(bytes memory self)\\n        internal\\n        pure\\n        returns (uint256[] memory amountsOut, uint256 maxBPTAmountIn)\\n    {\\n        (, amountsOut, maxBPTAmountIn) = abi.decode(self, (StablePool.ExitKind, uint256[], uint256));\\n    }\\n}\\n\",\"keccak256\":\"0xb6fda4049c12177d210638bb4e0aaf612fa651c4ac94cc046aca28b40900ec68\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either either token contracts that adhere to the IERC20 interface,\\n * or a sentinel value that represents ETH (the zero address). We're just relying on the fact that `interface` can be\\n * used to declare new address-like types.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0xe03ae91bfc280018445aa57c176a315a0e6989b1653319f15186de65fb72fb24\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\ninterface IAuthorizer {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x998d8893c0ab3bbeec0ad091efb7f97d44fb68c5c58a38d61ab801eec514391c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\n\\n/**\\n * @dev Interface all Pool contracts should implement. Note that this is not the complete Pool contract interface, as it\\n * is missing the swap hooks: Pool contracts should instead inherit from either IGeneralPool or IMinimalSwapInfoPool.\\n */\\ninterface IBasePool {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.joinPool` to join this Pool. Returns how many tokens the user\\n     * should provide for each registered token, as well as how many protocol fees the Pool owes to the Vault. After\\n     * returning, the Vault will take tokens from the `sender` and add it to the Pool's balance, as well as collect\\n     * reported protocol fees. The current protocol swap fee percentage is provided to help compute this value.\\n     *\\n     * Due protocol fees are reported and charged on join events so that new users join the Pool free of debt.\\n     *\\n     * `sender` is the account performing the join (from whom tokens will be withdrawn), and `recipient` an account\\n     * designated to receive any benefits (typically pool shares). `currentBalances` contains the total token balances\\n     * for each token the Pool registered in the Vault, in the same order as `IVault.getPoolTokens` would return.\\n     *\\n     * `latestBlockNumberUsed` is the last block number in which any of the Pool's registered tokens last changed its\\n     * balance. This can be used to implement price oracles that are resilient to 'sandwich' attacks.\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as minting pool shares.\\n     */\\n    function onJoinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] calldata currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFee,\\n        bytes calldata userData\\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.exitPool` to exit this Pool. Returns how many tokens the Vault\\n     * should deduct from the Pool, as well as how many protocol fees the Pool owes to the Vault. After returning, the\\n     * Vault will take tokens from the Pool's balance and add grant them to `recipient`, as well as collect reported\\n     * protocol fees. The current protocol swap fee percentage is provided to help compute this value.\\n     *\\n     * Due protocol fees are reported and charged on exit events so that users exit the Pool having paid all debt.\\n     *\\n     * `sender` is the account performing the exit (typically the holder of pool shares), and `recipient` the account to\\n     * which the Vault will grant tokens. `currentBalances` contains the total token balances for each token the Pool\\n     * registered in the Vault, in the same order as `IVault.getPoolTokens` would return.\\n     *\\n     * `latestBlockNumberUsed` is the last block number in which any of the Pool's registered tokens last changed its\\n     * balance. This can be used to implement price oracles that are resilient to 'sandwich' attacks.\\n     *\\n     * Contracts implementing this function should check that the caller is indeed the Vault before performing any\\n     * state-changing operations, such as burning pool shares.\\n     */\\n    function onExitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        uint256[] calldata currentBalances,\\n        uint256 latestBlockNumberUsed,\\n        uint256 protocolSwapFee,\\n        bytes calldata userData\\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\\n\\n    /**\\n     * @dev This function returns the appreciation of one BPT relative to the\\n     * underlying tokens. This starts at 1 when the pool is created and grows over time\\n     * It's the equivalent to Curve's get_virtual_price() function\\n     */\\n    function getRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x50aff9c877780f6c35028c71146cad30605468479fa2ae81acaab792abe22f25\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFlashLoanReceiver {\\n    function receiveFlashLoan(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256[] calldata feeAmounts,\\n        bytes calldata receiverData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7e8edb04c4eb005a04e90b41f70ac354b7516bbd44fd00f5b923650a483b06f1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IGeneralPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IBasePool.sol\\\";\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\n/**\\n * @dev Interface contracts for Pools with the general specialization setting should implement.\\n */\\ninterface IGeneralPool is IBasePool {\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.batchSwapGivenIn` to swap with this Pool. Returns the number\\n     * of tokens the Pool will grant to the user as part of the swap.\\n     *\\n     * This can be often implemented by a `view` function, since many pricing algorithms don't need to track state\\n     * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n     * indeed the Vault.\\n     */\\n    function onSwapGivenIn(\\n        IPoolSwapStructs.SwapRequestGivenIn calldata swapRequest,\\n        uint256[] calldata balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external returns (uint256 amountOut);\\n\\n    /**\\n     * @dev Called by the Vault when a user calls `IVault.batchSwapGivenOut` to swap with this Pool. Returns the number\\n     * of tokens the user must grant to the Pool as part of the swap.\\n     *\\n     * This can be often implemented by a `view` function, since many pricing algorithms don't need to track state\\n     * changes in swaps. However, contracts implementing this in non-view functions should check that the caller is\\n     * indeed the Vault.\\n     */\\n    function onSwapGivenOut(\\n        IPoolSwapStructs.SwapRequestGivenOut calldata swapRequest,\\n        uint256[] calldata balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xa52639a9b4441491477b6491ea846835cba66e1b7875faf7987b746d3c8fbfed\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    // This is not really an interface - it just defines common structs used by other interfaces: IGeneralPool and\\n    // IMinimalSwapInfoPool.\\n\\n    // This data structure represents a request for a token swap, where the amount received by the Pool is known.\\n    //\\n    // `tokenIn` and `tokenOut` are the tokens the Pool will receive and send, respectively. `amountIn` is the number of\\n    // `tokenIn` tokens that the Pool will receive.\\n    //\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    // `from` is the origin address where funds the Pool receives are coming from, and `to` is the destination address\\n    // where the funds the Pool sends are going to.\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequestGivenIn {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amountIn;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 latestBlockNumberUsed;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    // This data structure represents a request for a token swap, where the amount sent by the Pool is known.\\n    //\\n    // `tokenIn` and `tokenOut` are the tokens the Pool will receive and send, respectively. `amountOut` is the number\\n    // of `tokenOut` tokens that the Pool will send.\\n    //\\n    // All other fields are not strictly necessary for most swaps, but are provided to support advanced scenarios in\\n    // some Pools.\\n    // `poolId` is the ID of the Pool involved in the swap - this is useful for Pool contracts that implement more than\\n    // one Pool.\\n    // `from` is the origin address where funds the Pool receives are coming from, and `to` is the destination address\\n    // where the funds the Pool sends are going to.\\n    // `userData` is extra data provided by the caller - typically a signature from a trusted party.\\n    struct SwapRequestGivenOut {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amountOut;\\n        // Misc data\\n        bytes32 poolId;\\n        uint256 latestBlockNumberUsed;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xb999b96973b8dc6435d0fcfafbdd4a05bdecf25d8752552f8311ae055f96d46f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanReceiver.sol\\\";\\nimport \\\"./IAsset.sol\\\";\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n    // The only exception to this are relayers. A relayer is an account (typically a contract) that can use the Internal\\n    // Balance and Vault allowance of other accounts. For an account to be able to wield this power, two things must\\n    // happen:\\n    //  - it must be allowed by the Authorizer to call the functions where it intends to use this permission\\n    //  - it must be allowed by each individual user to act in their stead\\n    // This combined requirements means users cannot be tricked into allowing malicious relayers (because they will not\\n    // have been allowed by the Authorizer), nor can a malicious Authorizer allow malicious relayers to drain user funds\\n    // (unless the user then allows this malicious relayer).\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     */\\n    function changeAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Returns true if `user` has allowed `relayer` as a relayer for them.\\n     */\\n    function hasAllowedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for the caller if `allowed` is true, and disallows it otherwise.\\n     */\\n    function changeRelayerAllowance(address relayer, bool allowed) external;\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where it is known as Internal Balance. This Internal Balance can be\\n    // withdrawn or transferred, and it can also be used when joining Pools or performing swaps, with greatly reduced\\n    // gas costs. Swaps and Pool exits can also be made to deposit to Internal Balance.\\n    //\\n    // Internal Balance functions feature batching, which means each call can be used to perform multiple operations of\\n    // the same kind (deposit, withdraw or transfer) at once.\\n\\n    /**\\n     * @dev Data for Internal Balance deposits and withdrawals, which include the possibility for ETH to be sent and\\n     * received without manual WETH wrapping or unwrapping.\\n     */\\n    struct AssetBalanceTransfer {\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    /**\\n     * @dev Data for Internal Balance transfers, which are limited to ERC20 tokens.\\n     */\\n    struct TokenBalanceTransfer {\\n        IERC20 token;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Deposits `amount` assets from each `sender` address into Internal Balances of the corresponding `recipient`\\n     * accounts. The senders must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n     *\\n     * If any of the senders doesn't match the contract caller, then it must be a relayer for them.\\n     *\\n     * ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call. It will be\\n     * wrapped into WETH and deposited as that token. Any ETH amount remaining will be sent back to the caller (not the\\n     * sender, which is relevant for relayers).\\n     *\\n     * Reverts if ETH was forwarded but not used in any transfer.\\n     */\\n    function depositToInternalBalance(AssetBalanceTransfer[] memory transfers) external payable;\\n\\n    /**\\n     * @dev Withdraws `amount` assets from each `sender` address' Internal Balance to the corresponding `recipient`\\n     * accounts. The senders must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n     *\\n     * If any of the senders doesn't match the contract caller, then it must be a relayer for them.\\n     *\\n     * ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n     * it to the recipient.\\n     *\\n     * This charges protocol withdrawal fees.\\n     */\\n    function withdrawFromInternalBalance(AssetBalanceTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Transfers tokens from the internal balance of each `sender` address to Internal Balances of each\\n     * `recipient`.\\n     *\\n     * This does not charge protocol withdrawal fees.\\n     */\\n    function transferInternalBalance(TokenBalanceTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Transfers tokens from each `sender` address to the corresponding `recipient` accounts, making use of the\\n     * Vault's allowance. This action is equivalent to an Internal Balance deposit followed immediately by a withdrawal,\\n     * except withdraw fees are not charged.\\n     *\\n     * Typically, this function will only be called by relayers, letting them leverage the allowance users have already\\n     * given to the Vault.\\n     */\\n    function transferToExternalBalance(TokenBalanceTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either due to calls to the Internal Balance functions, or\\n     * due to interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will be reflected here\\n     * as having used WETH.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for lower swap gas costs at the cost of reduced\\n    // functionality:\\n    //\\n    //  - general: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // and these increase with the number of registered tokens.\\n    //\\n    //  - minimal swap info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer v1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - two tokens: only allows two tokens to be registered. This achieves the lowest possible swap gas costs. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers a the caller as a Pool with a chosen specialization setting. Returns the Pool's ID, which is used\\n     * in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be changed.\\n     *\\n     * The caller is expected to be a smart contract that implements one of `IGeneralPool` or `IMinimalSwapInfoPool`.\\n     * This contract is known as the Pool's contract. Note that the same caller may register itself as multiple Pools\\n     * with unique Pool IDs, or in other words, multiple Pools may have the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 poolId);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for each token. Asset Managers can manage a Pool's tokens by withdrawing and depositing them directly\\n     * (via `withdrawFromPoolBalance` and `depositToPoolBalance`), and even set them to arbitrary amounts\\n     * (`updateManagedBalance`). They are therefore expected to be highly secured smart contracts with sound design\\n     * principles, and the decision to add an Asset Manager should not be made lightly.\\n     *\\n     * Pools can not set an Asset Manager by setting them to the zero address. Once an Asset Manager is set, it cannot\\n     * be changed, except by deregistering the associated token and registering again with a different Manager.\\n     *\\n     * Emits `TokensRegistered` events.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] calldata tokens,\\n        address[] calldata assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] calldata tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens and total balance for each.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps.\\n     */\\n    function getPoolTokens(bytes32 poolId) external view returns (IERC20[] memory tokens, uint256[] memory balances);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and reported by the Pool's token Asset Manager. The Pool's total balance for `token` equals the sum of\\n     * `cash` and `managed`.\\n     *\\n     * `blockNumber` is the number of the block in which `token`'s balance was last modified (via either a join, exit,\\n     * swap, or Asset Management interactions). This value is useful to avoid so-called 'sandwich attacks', for example\\n     * when developing price oracles.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 blockNumber,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `maxAmountsIn` arrays must have the same length, and each entry in these indicates the maximum\\n     * token amount to send for each token contract. The amounts to send are decided by the Pool and not the Vault: it\\n     * just enforces these maximums.\\n     *\\n     * `tokens` must have the same length and order as the one returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any).\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implements\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to obtain). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolJoined` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IAsset[] memory assets,\\n        uint256[] memory maxAmountsIn,\\n        bool fromInternalBalance,\\n        bytes memory userData\\n    ) external payable;\\n\\n    /**\\n     * @dev Emitted when a user joins a Pool by calling `joinPool`.\\n     */\\n    event PoolJoined(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        uint256[] amountsIn,\\n        uint256[] protocolFees\\n    );\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdraw is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * `tokens` must have the same length and order as the one returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed, charging protocol withdraw fees.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * Pools are free to implement any arbitrary logic in the `IPool.onExitPool` hook, and may require additional\\n     * information (such as the number of Pool shares to provide). This can be encoded in the `userData` argument, which\\n     * is ignored by the Vault and passed directly to the Pool.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implements\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolExited` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        IAsset[] memory assets,\\n        uint256[] memory minAmountsOut,\\n        bool toInternalBalance,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a user exits a pool by calling `exitPool`.\\n     */\\n    event PoolExited(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        uint256[] amountsOut,\\n        uint256[] protocolFees\\n    );\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `batchSwapGivenIn` and `batchSwapGivenOut` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // Both swap functions are batched, meaning they perform multiple of swaps in sequence. In each individual swap,\\n    // tokens of one kind are sent from the sender to the Pool (this is the 'token in'), and tokens of one\\n    // other kind are sent from the Pool to the sender in exchange (this is the 'token out'). More complex swaps, such\\n    // as one token in to multiple tokens out can be achieved by batching together individual swaps.\\n    //\\n    // Additionally, it is possible to chain swaps by using the output of one of them as the input for the other, as\\n    // well as the opposite. This extended swap is known as a 'multihop' swap, since it 'hops' through a number of\\n    // intermediate tokens before arriving at the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that it is possible to e.g. under certain conditions perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (but\\n    // updating the Pool's internal balances).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or minimum\\n    // amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mecanism, the IAsset sentinel value (the zero address) must be passed\\n    // in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the same\\n    // swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used both when sending and receiving tokens.\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In individual each swap, the amount of tokens sent to\\n     * the Pool is determined by the caller. For swaps where the amount of tokens received from the Pool is instead\\n     * determined, see `batchSwapGivenOut`.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same\\n     * index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token and amount to send to this Pool, and the token to receive from it (but not the amount). This will\\n     * be determined by the Pool's pricing algorithm once the Vault calls the `onSwapGivenIn` hook on it.\\n     *\\n     * Multihop swaps can be executed by passing an `amountIn` value of zero for a swap. This will cause the amount out\\n     * of the previous swap to be used as the amount in of the current one. In such a scenario, `tokenIn` must equal the\\n     * previous swap's `tokenOut`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value (the zero address) for ETH. Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped or\\n     * unwrapped using WETH by the Vault.\\n     *\\n     * Internal Balance usage and recipient are determined by the `funds` struct.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwapGivenIn(\\n        SwapIn[] calldata swaps,\\n        IAsset[] memory assets,\\n        FundManagement calldata funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwapGivenIn`. The tokens in and out are indexed in the\\n     * `assets` array passed to that function, where an ETH asset is translated into WETH.\\n     *\\n     * If `amountIn` is zero, the multihop mechanism is used to determine the actual amount based on the amount out from\\n     * the previous swap.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwapGivenIn` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SwapIn {\\n        bytes32 poolId;\\n        uint256 tokenInIndex;\\n        uint256 tokenOutIndex;\\n        uint256 amountIn;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In individual each swap, the amount of tokens\\n     * received from the Pool is determined by the caller. For swaps where the amount of tokens sent to the Pool is\\n     * instead determined, see `batchSwapGivenIn`.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at the same\\n     * index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token and amount to receive from this Pool, and the token to send to it (but not the amount). This will\\n     * be determined by the Pool's pricing algorithm once the Vault calls the `onSwapGivenOut` hook on it.\\n     *\\n     * Multihop swaps can be executed by passing an `amountOut` value of zero for a swap. This will cause the amount in\\n     * of the previous swap to be used as the amount out of the current one. In such a scenario, `tokenOut` must equal\\n     * the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value (the zero address) for ETH. Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped or\\n     * unwrapped using WETH by the Vault.\\n     *\\n     * Internal Balance usage and recipient are determined by the `funds` struct.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwapGivenOut(\\n        SwapOut[] calldata swaps,\\n        IAsset[] memory assets,\\n        FundManagement calldata funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwapGivenOut`. The tokens in and out are indexed in the\\n     * `assets` array passed to that function, where an ETH asset is translated into WETH.\\n     *\\n     * If `amountOut` is zero, the multihop mechanism is used to determine the actual amount based on the amount in from\\n     * the previous swap.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwapGivenOut` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SwapOut {\\n        bytes32 poolId;\\n        uint256 tokenInIndex;\\n        uint256 tokenOutIndex;\\n        uint256 amountOut;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `batchSwapGivenIn` and `batchSwapGivenOut`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 tokensIn,\\n        uint256 tokensOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are sent to the Vault from the `sender`'s account, and sent to `recipient`.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so with trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwapGivenIn` or `batchSwapGivenOut`, returning an array of Vault asset deltas.\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwapGivenIn` or `batchSwapGivenOut` call would receive, except the\\n     * `SwapRequest` struct is used instead, and the `kind` argument specifies whether the swap is given in or given\\n     * out.\\n     *\\n     * Unlike `batchSwapGivenIn` and `batchSwapGivenOut`, this function performs no checks on the sender nor recipient\\n     * field in the `funds` struct. This makes it suitable to be called by off-chain applications via eth_call without\\n     * needing to hold tokens, approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        SwapRequest[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    // This struct is identical in layout to SwapIn and SwapOut, except the 'amountIn/Out' field is named 'amount'.\\n    struct SwapRequest {\\n        bytes32 poolId;\\n        uint256 tokenInIndex;\\n        uint256 tokenOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `receiver` and executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the amount to\\n     * loan for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'receiverData' field is ignored by the Vault, and forwarded as-is to `receiver` as part of the\\n     * `receiveFlashLoan` call.\\n     */\\n    function flashLoan(\\n        IFlashLoanReceiver receiver,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        bytes calldata receiverData\\n    ) external;\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous, as they can not only steal a Pool's tokens\\n    // but also manipulate its prices. However, a properly designed Asset Manager smart contract can be used to the\\n    // Pool's benefit, for example by lending unused tokens at an interest, or using them to participate in voting\\n    // protocols.\\n\\n    struct AssetManagerTransfer {\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Returns the Pool's Asset Managers for the given `tokens`. Asset Managers can manage a Pool's assets\\n     * by taking them out of the Vault via `withdrawFromPoolBalance`, `depositToPoolBalance` and `updateManagedBalance`.\\n     */\\n    function getPoolAssetManagers(bytes32 poolId, IERC20[] memory tokens)\\n        external\\n        view\\n        returns (address[] memory assetManagers);\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset manager withdraws or deposits token balance via `withdrawFromPoolBalance`\\n     * or `depositToPoolBalance`.\\n     */\\n    event PoolBalanceChanged(bytes32 indexed poolId, address indexed assetManager, IERC20 indexed token, int256 amount);\\n\\n    /**\\n     * @dev Called by a Pool's Asset Manager to withdraw tokens from the Vault. This decreases\\n     * the Pool's cash but increases its managed balance, leaving the total balance unchanged.\\n     * Array input allows asset managers to manage multiple tokens for a pool in a single transaction.\\n     */\\n    function withdrawFromPoolBalance(bytes32 poolId, AssetManagerTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Called by a Pool's Asset Manager to deposit tokens into the Vault. This increases the Pool's cash,\\n     * but decreases its managed balance, leaving the total balance unchanged. The Asset Manager must have approved\\n     * the Vault to use each token. Array input allows asset managers to manage multiple tokens for a pool in a\\n     * single transaction.\\n     */\\n    function depositToPoolBalance(bytes32 poolId, AssetManagerTransfer[] memory transfers) external;\\n\\n    /**\\n     * @dev Called by a Pool's Asset Manager for to update the amount held outside the vault. This does not affect\\n     * the Pool's cash balance, but because the managed balance changes, it does alter the total. The external\\n     * amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     * Array input allows asset managers to manage multiple tokens for a pool in a single transaction.\\n     */\\n    function updateManagedBalance(bytes32 poolId, AssetManagerTransfer[] memory transfers) external;\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are three kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - withdraw fees: charged when users take tokens out of the Vault, by either calling\\n    // `withdrawFromInternalBalance` or calling `exitPool` without depositing to Internal Balance. The fee is a\\n    // percentage of the amount withdrawn. Swaps are unaffected by withdraw fees.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how many swap fees they have charged, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee percentages. These are 18 decimals fixed point numbers, which means that\\n     * e.g. a value of 0.1e18 stands for a 10% fee.\\n     */\\n    function getProtocolFees()\\n        external\\n        view\\n        returns (\\n            uint256 swapFee,\\n            uint256 withdrawFee,\\n            uint256 flashLoanFee\\n        );\\n\\n    /**\\n     * @dev Sets new Protocol fees. The caller must be allowed by the Authorizer to do this, and the new fee values must\\n     * not be above the absolute maximum amounts.\\n     */\\n    function setProtocolFees(\\n        uint256 swapFee,\\n        uint256 withdrawFee,\\n        uint256 flashLoanFee\\n    ) external;\\n\\n    /**\\n     * @dev Returns the amount of protocol fees collected by the Vault for each token in the `tokens` array.\\n     */\\n    function getCollectedFees(IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Withdraws collected protocol fees, transferring them to `recipient`. The caller must be allowed by the\\n     * Authorizer to do this.\\n     */\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0xaf333d55ca925ff1ec2ea76bb60246545acb6cee0800351e7e13696a775c284d\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051614c78380380614c7883398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c614be661009260003980607d528060fd5250614be66000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80638576963b146200003f578063fbfa77cf146200006e575b600080fd5b620000566200005036600462000228565b62000078565b604051620000659190620003bc565b60405180910390f35b62000056620000fb565b6000807f000000000000000000000000000000000000000000000000000000000000000089898989898989604051620000b19062000163565b620000c4989796959493929190620003dd565b604051809103906000f080158015620000e1573d6000803e3d6000fd5b509050620000ef816200011f565b98975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f9cc152f4650ca2829a210a21551537f4cc4d48c2611ec06974f835e911921b9090600090a250565b6146de80620004d383390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146200019657600080fd5b92915050565b600082601f830112620001ad578081fd5b813567ffffffffffffffff811115620001c4578182fd5b620001f760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162000491565b91508082528360208285010111156200020f57600080fd5b8060208401602084013760009082016020015292915050565b600080600080600080600060e0888a03121562000243578283fd5b67ffffffffffffffff80893511156200025a578384fd5b620002698a8a358b016200019c565b97506020890135818111156200027d578485fd5b6200028b8b828c016200019c565b975050604089013581811115620002a0578485fd5b8901601f81018b13620002b1578485fd5b803582811115620002c0578586fd5b602081029250620002d46020840162000491565b80828252602082019150602084018e6020878701011115620002f4578889fd5b8895505b8386101562000323576200030d8f8262000171565b83526001959095019460209283019201620002f8565b509a9d999c50999a60608101359a5060808101359960a0820135995060c090910135975095505050505050565b60008151808452815b81811015620003775760208185018101518683018201520162000359565b81811115620003895782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600061010073ffffffffffffffffffffffffffffffffffffffff8b16835260208181850152620004108285018c62000350565b9150838203604085015262000426828b62000350565b84810360608601528951808252828b01935090820190845b818110156200046657620004538551620004b9565b835293830193918301916001016200043e565b5050608085019890985250505060a081019390935260c083019190915260e090910152949350505050565b60405181810167ffffffffffffffff81118282101715620004b157600080fd5b604052919050565b73ffffffffffffffffffffffffffffffffffffffff169056fe6103006040523480156200001257600080fd5b50604051620046de380380620046de83398101604081905262000035916200089d565b8787878786868686600087878787878781818787816003908051906020019062000061929190620006bb565b50805162000077906004906020840190620006bb565b5050506276a7008211156200008b57600080fd5b62278d008111156200009c57600080fd5b4290910160808190520160a052835160021115620000b957600080fd5b600784511115620000c957600080fd5b620000df846200056960201b62000d001760201c565b67016345785d8a0000831115620000f557600080fd5b6040516309b2760f60e01b81526000906001600160a01b038a16906309b2760f9062000126908b9060040162000a2c565b602060405180830381600087803b1580156200014157600080fd5b505af115801562000156573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017c919062000884565b9050886001600160a01b03166366a9c7d2828788516001600160401b0381118015620001a757600080fd5b50604051908082528060200260200182016040528015620001d2578160200160208202803683370190505b506040518463ffffffff1660e01b8152600401620001f39392919062000990565b600060405180830381600087803b1580156200020e57600080fd5b505af115801562000223573d6000803e3d6000fd5b5050506001600160601b031960608b901b1660c0525060e081905260068490558451610100528451620002585760006200026f565b846000815181106200026657fe5b60200260200101515b60601b6001600160601b03191661012052845160011062000292576000620002a9565b84600181518110620002a057fe5b60200260200101515b60601b6001600160601b031916610140528451600210620002cc576000620002e3565b84600281518110620002da57fe5b60200260200101515b60601b6001600160601b031916610160528451600310620003065760006200031d565b846003815181106200031457fe5b60200260200101515b60601b6001600160601b0319166101805284516004106200034057600062000357565b846004815181106200034e57fe5b60200260200101515b60601b6001600160601b0319166101a05284516005106200037a57600062000391565b846005815181106200038857fe5b60200260200101515b60601b6001600160601b0319166101c0528451600610620003b4576000620003cb565b84600681518110620003c257fe5b60200260200101515b60601b6001600160601b0319166101e0528451620003eb57600062000411565b6200041185600081518110620003fd57fe5b60200260200101516200057960201b60201c565b6102005284516001106200042757600062000439565b6200043985600181518110620003fd57fe5b6102205284516002106200044f57600062000461565b6200046185600281518110620003fd57fe5b6102405284516003106200047757600062000489565b6200048985600381518110620003fd57fe5b6102605284516004106200049f576000620004b1565b620004b185600481518110620003fd57fe5b610280528451600510620004c7576000620004d9565b620004d985600581518110620003fd57fe5b6102a0528451600610620004ef57600062000501565b6200050185600681518110620003fd57fe5b6102c0818152505050505050505050505050505050505050670de0b6b3a76400008410156200052f57600080fd5b69010f0cf064dd592000008411156200054757600080fd5b6005855111156200055757600080fd5b5050506102e0525062000a8a92505050565b8062000575816200061b565b5050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620005b657600080fd5b505afa158015620005cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f1919062000966565b60ff169050600062000610601283620006a060201b62000d0e1760201c565b600a0a949350505050565b6002815110156200062c576200069d565b6000816000815181106200063c57fe5b602002602001015190506000600190505b82518110156200069a5760008382815181106200066657fe5b60200260200101519050806001600160a01b0316836001600160a01b0316106200068f57600080fd5b91506001016200064d565b50505b50565b600082821115620006b057600080fd5b508082035b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006fe57805160ff19168380011785556200072e565b828001600101855582156200072e579182015b828111156200072e57825182559160200191906001019062000711565b506200073c92915062000740565b5090565b5b808211156200073c576000815560010162000741565b600082601f83011262000768578081fd5b81516001600160401b038111156200077e578182fd5b60208082026200079082820162000a41565b83815293508184018583018287018401881015620007ad57600080fd5b600092505b84831015620007dd578051620007c88162000a74565b825260019290920191908301908301620007b2565b505050505092915050565b8051620006b58162000a74565b600082601f83011262000806578081fd5b81516001600160401b038111156200081c578182fd5b602062000832601f8301601f1916820162000a41565b925081835284818386010111156200084957600080fd5b60005b82811015620008695784810182015184820183015281016200084c565b828111156200087b5760008284860101525b50505092915050565b60006020828403121562000896578081fd5b5051919050565b600080600080600080600080610100898b031215620008ba578384fd5b620008c68a8a620007e8565b60208a01519098506001600160401b0380821115620008e3578586fd5b620008f18c838d01620007f5565b985060408b015191508082111562000907578586fd5b620009158c838d01620007f5565b975060608b01519150808211156200092b578586fd5b506200093a8b828c0162000757565b9550506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b60006020828403121562000978578081fd5b815160ff8116811462000989578182fd5b9392505050565b60006060820185835260206060818501528186518084526080860191508288019350845b81811015620009dc57620009c9855162000a68565b83529383019391830191600101620009b4565b505084810360408601528551808252908201925081860190845b8181101562000a1e5762000a0b835162000a68565b85529383019391830191600101620009f6565b509298975050505050505050565b602081016003831062000a3b57fe5b91905290565b6040518181016001600160401b038111828210171562000a6057600080fd5b604052919050565b6001600160a01b031690565b6001600160a01b03811681146200069d57600080fd5b60805160a05160c05160601c60e051610100516101205160601c6101405160601c6101605160601c6101805160601c6101a05160601c6101c05160601c6101e05160601c61020051610220516102405161026051610280516102a0516102c0516102e051613aad62000c31600039806107bd52806107f052806115c15280611b525280611c0b5280611f20528061205952806125355280612618528061287c52806128d75250806114e65250806114835250806114205250806113bd52508061135a5250806112f7525080611288525050505050505050806105b15280610a5d5280610bd45280610ef45280610faa52806111fe528061126252806112d05280611333528061139652806113f9528061145c52806114bf528061153b528061195b52806119d15280611bcf5280611e5e5280611eb95280611feb528061229352806124a052806124ce52806125e1528061283e528061290f52508061055d52806106fd52806108825280610b3d5250806106c15280610856528061093e5280610b115280611a81525080610a135280611a4a5250806109f052806118a75250613aad6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806374f3b009116100ee578063a9059cbb11610097578063d4cadf6811610071578063d4cadf681461035e578063d5c096c414610366578063d73dd62314610379578063dd62ed3e1461038c576101ae565b8063a9059cbb14610330578063aaabadc514610343578063b58c95341461034b576101ae565b80638d928af8116100c85780638d928af8146102fc57806395d89b4114610311578063a50ff09714610319576101ae565b806374f3b009146102b557806377c91f70146102d657806387ec6817146102e9576101ae565b806338fff2d01161015b5780636618846311610135578063661884631461027f578063679aefce146102925780636daccffa1461029a57806370a08231146102a2576101ae565b806338fff2d0146102435780636028bfd41461024b578063618e086e1461026c576101ae565b806323b872dd1161018c57806323b872dd14610206578063313ce5671461021957806334e199071461022e576101ae565b806306fdde03146101b3578063095ea7b3146101d157806318160ddd146101f1575b600080fd5b6101bb61039f565b6040516101c89190613953565b60405180910390f35b6101e46101df366004613489565b610454565b6040516101c891906138e2565b6101f961046b565b6040516101c89190613905565b6101e4610214366004613449565b610471565b610221610534565b6040516101c891906139e5565b61024161023c3660046137fb565b610539565b005b6101f961055b565b61025e6102593660046135af565b61057f565b6040516101c89291906139c4565b6101f961027a36600461378a565b6105a8565b6101e461028d366004613489565b610654565b6101f96106bb565b6101f96107ee565b6101f96102b03660046133f5565b610812565b6102c86102c33660046135af565b61083a565b6040516101c89291906138b4565b6102416102e4366004613577565b61090f565b61025e6102f73660046135af565b610923565b61030461093c565b6040516101c89190613932565b6101bb610960565b6103216109df565b6040516101c8939291906138ed565b6101e461033e366004613489565b610a38565b610304610a45565b6101f961035936600461378a565b610a54565b6101f9610aef565b6102c86103743660046135af565b610af5565b6101e4610387366004613489565b610c85565b6101f961039a366004613411565b610cc8565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104495780601f1061041e57610100808354040283529160200191610449565b820191906000526020600020905b81548152906001019060200180831161042c57829003601f168201915b505050505090505b90565b6000610461338484610d23565b5060015b92915050565b60025490565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600160209081526040808320338085529252822054919214806104b05750828110155b6104b957600080fd5b6104c4858585610d98565b3373ffffffffffffffffffffffffffffffffffffffff86161480159061050a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610529578281101561051c57600080fd5b6105298533858403610d23565b506001949350505050565b601290565b610541610e75565b67016345785d8a000081111561055657600080fd5b600655565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000606061059889898989898989610ed9610fa5611024565b9150915097509795505050505050565b60006105d583837f00000000000000000000000000000000000000000000000000000000000000006111e2565b60606105df6111f9565b905061060286604001518285815181106105f557fe5b6020026020010151611523565b60408701526106118582611536565b600061061f878787876115b0565b905061063e8183878151811061063157fe5b60200260200101516115f7565b905061064981611603565b979650505050505050565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205480831061069d5761069833856000610d23565b6106b1565b6106b133856106ac8487610d0e565b610d23565b5060019392505050565b600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016107389190613905565b60006040518083038186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107aa91908101906134b4565b9150506107e86107b861046b565b6107e27f00000000000000000000000000000000000000000000000000000000000000008461161a565b90611787565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000090565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b606080883373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461088057600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081146108ac57600080fd5b60606108b66111f9565b90506108c28882611536565b60006060806108d68e8e8e8e8e8e8e610ed9565b9250925092506108e68d846117ed565b6108f08285610fa5565b6108fa8185610fa5565b909550935050505b5097509795505050505050565b610917610e75565b610920816118a5565b50565b60006060610598898989898989896119386119cc611024565b7f000000000000000000000000000000000000000000000000000000000000000090565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104495780601f1061041e57610100808354040283529160200191610449565b60008060006109ec611a46565b15937f000000000000000000000000000000000000000000000000000000000000000093507f000000000000000000000000000000000000000000000000000000000000000092509050565b6000610461338484610d98565b6000610a4f611a7d565b905090565b6000610a8183837f00000000000000000000000000000000000000000000000000000000000000006111e2565b610a8e8560400151611b1d565b60408601526060610a9d6111f9565b9050610ab386604001518286815181106105f557fe5b6040870152610ac28582611536565b6000610ad087878787611b41565b905061064981838681518110610ae257fe5b6020026020010151611b7e565b60065490565b606080883373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610b3b57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000008114610b6757600080fd5b6060610b716111f9565b9050610b7d8882611536565b610b8561046b565b610c405760006060610b998d8d8d8a611b8a565b915091506103e8821015610bac57600080fd5b610bb960006103e8611c44565b610bc78b6103e88403611c44565b610bd181846119cc565b807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff81118015610c0957600080fd5b50604051908082528060200260200182016040528015610c33578160200160208202803683370190505b5095509550505050610902565b6000606080610c548e8e8e8e8e8e8e611938565b925092509250610c648c84611c44565b610c6e82856119cc565b610c788185610fa5565b9095509350610902915050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916104619185906106ac9086611d01565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b80610d0a81611d13565b5050565b600082821115610d1d57600080fd5b50900390565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d8b908590613905565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610dcb57600080fd5b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681522054610e089083611d01565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526020819052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e67908690613905565b60405180910390a350505050565b6000306000357fffffffff0000000000000000000000000000000000000000000000000000000016604051602001610eae92919061384d565b604051602081830303815290604052805190602001209050610ed08133611da5565b61092057600080fd5b60006060806060610eed8860075488611e39565b905060005b7f0000000000000000000000000000000000000000000000000000000000000000811015610f7257610f53828281518110610f2957fe5b60200260200101518a8381518110610f3d57fe5b6020026020010151610d0e90919063ffffffff16565b898281518110610f5f57fe5b6020908102919091010152600101610ef2565b5060006060610f818a88611f69565b91509150610f8f8a82611fe5565b600755909c909b50909950975050505050505050565b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561101f57611000838281518110610fdf57fe5b6020026020010151838381518110610ff357fe5b602002602001015161207e565b83828151811061100c57fe5b6020908102919091010152600101610fa8565b505050565b600060603330146111245760003073ffffffffffffffffffffffffffffffffffffffff166000366040516110599291906138a4565b6000604051808303816000865af19150503d8060008114611096576040519150601f19603f3d011682016040523d82523d6000602084013e61109b565b606091505b5050905080600081146110aa57fe5b60046000803e6000517fffffffff00000000000000000000000000000000000000000000000000000000167f43adbafb000000000000000000000000000000000000000000000000000000008114611106573d6000803e3d6000fd5b506020600460003e604060205260243d03602460403e601c3d016000f35b606061112e6111f9565b905061113a8982611536565b600060606111518e8e8e8e8e8e8e8e63ffffffff16565b509150915061116481848863ffffffff16565b80517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082018390526343adbafb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08301526020027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc82016044820181fd5b80831080156111f057508082105b61101f57600080fd5b6060807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111801561123357600080fd5b5060405190808252806020026020018201604052801561125d578160200160208202803683370190505b5090507f0000000000000000000000000000000000000000000000000000000000000000156112c5577f0000000000000000000000000000000000000000000000000000000000000000816000815181106112b457fe5b6020026020010181815250506112cc565b9050610451565b60017f000000000000000000000000000000000000000000000000000000000000000011156112c5577f00000000000000000000000000000000000000000000000000000000000000008160018151811061132357fe5b60200260200101818152505060027f000000000000000000000000000000000000000000000000000000000000000011156112c5577f00000000000000000000000000000000000000000000000000000000000000008160028151811061138657fe5b60200260200101818152505060037f000000000000000000000000000000000000000000000000000000000000000011156112c5577f0000000000000000000000000000000000000000000000000000000000000000816003815181106113e957fe5b60200260200101818152505060047f000000000000000000000000000000000000000000000000000000000000000011156112c5577f00000000000000000000000000000000000000000000000000000000000000008160048151811061144c57fe5b60200260200101818152505060057f000000000000000000000000000000000000000000000000000000000000000011156112c5577f0000000000000000000000000000000000000000000000000000000000000000816005815181106114af57fe5b60200260200101818152505060067f000000000000000000000000000000000000000000000000000000000000000011156112c5577f00000000000000000000000000000000000000000000000000000000000000008160068151811061151257fe5b602002602001018181525050905090565b600061152f838361209b565b9392505050565b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561101f5761159183828151811061157057fe5b602002602001015183838151811061158457fe5b602002602001015161209b565b83828151811061159d57fe5b6020908102919091010152600101611539565b60006115ba6120be565b60006115ed7f00000000000000000000000000000000000000000000000000000000000000008686868a604001516120d1565b9695505050505050565b600061152f838361218d565b60006104656116136006546121bd565b83906121ee565b80516000908190815b8181101561165b5761165185828151811061163a57fe5b602002602001015184611d0190919063ffffffff16565b9250600101611623565b508161166c57600092505050610465565b6000828161167a888561209b565b905060005b60ff81101561177a57600061169b868a60008151811061158457fe5b905060015b868110156116d4576116ca6116c46116be848d858151811061158457fe5b8961209b565b8661218d565b91506001016116a0565b5083945061173461170a6116f16116eb868b61209b565b8461209b565b6117046116fe8a8961209b565b8861209b565b90611d01565b61172f61172161171b876001610d0e565b8561209b565b6117046116be8b6001611d01565b61218d565b93508484111561175a57600161174a8587610d0e565b11611755575061177a565b611771565b60016117668686610d0e565b11611771575061177a565b5060010161167f565b5090979650505050505050565b60008161179357600080fd5b670de0b6b3a764000083028315806117bb5750670de0b6b3a76400008482816117b857fe5b04145b6117c457600080fd5b600283048101818110156117d757600080fd5b60008482816117e257fe5b049695505050505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020548181101561182057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902082820390556002546118579083610d0e565b60025560405160009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d8b908690613905565b7f000000000000000000000000000000000000000000000000000000000000000042106118d157600080fd5b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790556040517fa5bc6afced71829f82830a97f26eb92aea46d29443b5acb7d47c4a52b1e273419061192d9083906138e2565b60405180910390a150565b60006060806119456120be565b60606119548860075488611e39565b905060005b7f00000000000000000000000000000000000000000000000000000000000000008110156119af57611990828281518110610f2957fe5b89828151811061199c57fe5b6020908102919091010152600101611959565b50600060606119be8a88612240565b91509150610f8f8a8261228d565b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561101f57611a27838281518110611a0657fe5b6020026020010151838381518110611a1a57fe5b602002602001015161218d565b838281518110611a3357fe5b60209081029190910101526001016119cf565b60007f000000000000000000000000000000000000000000000000000000000000000042101580610a4f57505060055460ff161590565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b158015611ae557600080fd5b505afa158015611af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190613652565b600080611b35600654846122fb90919063ffffffff16565b905061152f8382610d0e565b6000611b4b6120be565b60006115ed7f00000000000000000000000000000000000000000000000000000000000000008686868a6040015161235e565b600061152f838361207e565b60006060611b966120be565b6000611ba1846123e8565b90506000816002811115611bb157fe5b14611bbb57600080fd5b6060611bc6856123fe565b9050611bf381517f0000000000000000000000000000000000000000000000000000000000000000612414565b611c0481611bff6111f9565b611536565b6000611c307f00000000000000000000000000000000000000000000000000000000000000008361161a565b600781905599919850909650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611c749082611d01565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902055600254611ca79082611d01565b60025560405173ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611cf5908590613905565b60405180910390a35050565b60008282018381101561152f57600080fd5b600281511015611d2257610920565b600081600081518110611d3157fe5b602002602001015190506000600190505b825181101561101f576000838281518110611d5957fe5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1610611d9b57600080fd5b9150600101611d42565b6000611daf611a7d565b73ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b8152600401611de992919061390e565b60206040518083038186803b158015611e0157600080fd5b505afa158015611e15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f9190613593565b606060008085600081518110611e4b57fe5b602002602001015190506000600190505b7f0000000000000000000000000000000000000000000000000000000000000000811015611eb4576000878281518110611e9257fe5b6020026020010151905082811115611eab578193508092505b50600101611e5c565b5060607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff81118015611eee57600080fd5b50604051908082528060200260200182016040528015611f18578160200160208202803683370190505b509050611f487f000000000000000000000000000000000000000000000000000000000000000088888689612420565b818481518110611f5457fe5b60209081029190910101529695505050505050565b600060606000611f78846123e8565b90506000816002811115611f8857fe5b1415611fa257611f988585612482565b9250925050611fde565b6001816002811115611fb057fe5b1415611fc057611f98858561258b565b6002816002811115611fce57fe5b14156101ae57611f9885856125bd565b9250929050565b6000805b7f00000000000000000000000000000000000000000000000000000000000000008110156120535761203483828151811061202057fe5b6020026020010151858381518110610f3d57fe5b84828151811061204057fe5b6020908102919091010152600101611fe9565b5061152f7f00000000000000000000000000000000000000000000000000000000000000008461161a565b60008161208a57600080fd5b81838161209357fe5b049392505050565b60008282028315806120b55750828482816120b257fe5b04145b61152f57600080fd5b6120c6611a46565b6120cf57600080fd5b565b6000806120de878761161a565b90506120f083878681518110610f3d57fe5b8685815181106120fc57fe5b602002602001018181525050600061211688888489612664565b905061213e8488878151811061212857fe5b6020026020010151611d0190919063ffffffff16565b87868151811061214a57fe5b602002602001018181525050612181600161170489898151811061216a57fe5b602002602001015184610d0e90919063ffffffff16565b98975050505050505050565b60008161219957600080fd5b826121a657506000610465565b8160018403816121b257fe5b046001019050610465565b6000670de0b6b3a76400008210156121e6576121e1670de0b6b3a764000083610d0e565b610465565b506000919050565b6000816121fa57600080fd5b8261220757506000610465565b670de0b6b3a76400008381029084828161221d57fe5b041461222857600080fd5b82600182038161223457fe5b04600101915050610465565b60006060600061224f846123e8565b9050600181600281111561225f57fe5b141561226f57611f988585612828565b600281600281111561227d57fe5b14156101ae57611f9885856128bc565b6000805b7f0000000000000000000000000000000000000000000000000000000000000000811015612053576122dc8382815181106122c857fe5b602002602001015185838151811061212857fe5b8482815181106122e857fe5b6020908102919091010152600101612291565b600082820283158061231557508284828161231257fe5b04145b61231e57600080fd5b8061232d576000915050610465565b670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201612234565b60008061236b878761161a565b905061237d8387878151811061212857fe5b86868151811061238957fe5b60200260200101818152505060006123a388888488612664565b90506123b584888881518110610f3d57fe5b8787815181106123c157fe5b60200260200101818152505061218160016123e2838a8981518110610f3d57fe5b90610d0e565b600081806020019051810190610465919061366e565b60608180602001905181019061152f9190613745565b808214610d0a57600080fd5b60008061242f87878787612664565b905060008187868151811061244057fe5b602002602001015111612454576000612464565b61246482888781518110610f3d57fe5b9050612181670de0b6b3a764000061247c8387612997565b906129e3565b6000606061248e6120be565b60008061249a85612a2f565b915091507f000000000000000000000000000000000000000000000000000000000000000081106124ca57600080fd5b60607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111801561250357600080fd5b5060405190808252806020026020018201604052801561252d578160200160208202803683370190505b5090506125677f000000000000000000000000000000000000000000000000000000000000000088848661255f61046b565b600654612a51565b81838151811061257357fe5b60209081029190910101529196919550909350505050565b60006060600061259a84612b49565b905060606125b086836125ab61046b565b612b5f565b9196919550909350505050565b600060606125c96120be565b606060006125d685612c11565b9150915061260582517f0000000000000000000000000000000000000000000000000000000000000000612414565b61261182611bff6111f9565b60006126497f0000000000000000000000000000000000000000000000000000000000000000888561264161046b565b600654612c29565b90508181111561265857600080fd5b96919550909350505050565b60008061267286865161209b565b905060008560008151811061268357fe5b6020026020010151905060006126a187518860008151811061158457fe5b905060015b87518110156126ed576126d26126cc6126c5848b858151811061158457fe5b8a5161209b565b8861207e565b91506126e388828151811061163a57fe5b92506001016126a6565b506127148786815181106126fd57fe5b602002602001015183610d0e90919063ffffffff16565b9150600061272b612725888961209b565b8561218d565b9050612757826107e28a898151811061274057fe5b60200260200101518461299790919063ffffffff16565b9050600061277a6127688987611787565b61170486670de0b6b3a7640000612997565b90506000806127a061278c8b85611d01565b61279a866117048e80612997565b906121ee565b905060005b60ff811015612818578192506127d56127c78c6123e28761170487600261209b565b61279a876117048680612997565b9150828211156127fa5760016127eb8385610d0e565b116127f557612818565b612810565b60016128068484610d0e565b1161281057612818565b6001016127a5565b509b9a5050505050505050505050565b6000606080600061283885612c11565b915091507f000000000000000000000000000000000000000000000000000000000000000082511461286957600080fd5b61287582611bff6111f9565b60006128ad7f000000000000000000000000000000000000000000000000000000000000000088856128a561046b565b600654612ec1565b90508181101561265857600080fd5b600060606000806128cc85612a2f565b9150915060006129097f000000000000000000000000000000000000000000000000000000000000000088848661290161046b565b600654613100565b905060607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111801561294457600080fd5b5060405190808252806020026020018201604052801561296e578160200160208202803683370190505b5090508181848151811061297e57fe5b6020908102919091010152929792965091945050505050565b60008282028315806129b15750828482816129ae57fe5b04145b6129ba57600080fd5b6706f05b59d3b200008101818110156129d257600080fd5b6000670de0b6b3a7640000826117e2565b6000816129ef57600080fd5b826129fc57506000610465565b670de0b6b3a764000083810290848281612a1257fe5b0414612a1d57600080fd5b828181612a2657fe5b04915050610465565b60008082806020019051810190612a46919061370f565b909590945092505050565b600080612a5e888861161a565b90506000612a7a82612a748761279a818b610d0e565b906122fb565b90506000805b8951811015612ab957612aaf8a8281518110612a9857fe5b602002602001015183611d0190919063ffffffff16565b9150600101612a80565b506000612ac88b8b858c612664565b90506000612adc828c8c81518110610f3d57fe5b90506000612b06848d8d81518110612af057fe5b60200260200101516129e390919063ffffffff16565b90506000612b13826121bd565b90506000612b218a836122fb565b9050612b36612b2f826121bd565b85906131b1565b9f9e505050505050505050505050505050565b60008180602001905181019061152f91906136e2565b60606000612b6d84846129e3565b90506060855167ffffffffffffffff81118015612b8957600080fd5b50604051908082528060200260200182016040528015612bb3578160200160208202803683370190505b50905060005b8651811015612c0757612be883888381518110612bd257fe5b60200260200101516131b190919063ffffffff16565b828281518110612bf457fe5b6020908102919091010152600101612bb9565b5095945050505050565b6060600082806020019051810190612a46919061368a565b600080612c36878761161a565b90506000805b8751811015612c5e57612c54888281518110612a9857fe5b9150600101612c3c565b506060865167ffffffffffffffff81118015612c7957600080fd5b50604051908082528060200260200182016040528015612ca3578160200160208202803683370190505b5090506000805b8951811015612d6a576000612cdb858c8481518110612cc557fe5b60200260200101516121ee90919063ffffffff16565b9050612d178b8381518110612cec57fe5b602002602001015161279a8c8581518110612d0357fe5b60200260200101518e8681518110610f3d57fe5b848381518110612d2357fe5b602002602001018181525050612d5f612d5882868581518110612d4257fe5b60200260200101516122fb90919063ffffffff16565b8490611d01565b925050600101612caa565b506060895167ffffffffffffffff81118015612d8557600080fd5b50604051908082528060200260200182016040528015612daf578160200160208202803683370190505b50905060005b8a51811015612e86576000848281518110612dcc57fe5b60200260200101518411612de257506000612e2a565b612e27612e01868481518110612df457fe5b60200260200101516121bd565b61279a878581518110612e1057fe5b602002602001015187610d0e90919063ffffffff16565b90505b6000612e368a836122fb565b90506000612e52612e46836121bd565b8e8681518110612cc557fe5b9050612e64818f8681518110610f3d57fe5b858581518110612e7057fe5b6020908102919091010152505050600101612db5565b506000612e938c8361161a565b9050612eb1612eaa612ea583896121ee565b6121bd565b8a906122fb565b9c9b505050505050505050505050565b600080612ece878761161a565b90506000805b8751811015612ef657612eec888281518110612a9857fe5b9150600101612ed4565b506060865167ffffffffffffffff81118015612f1157600080fd5b50604051908082528060200260200182016040528015612f3b578160200160208202803683370190505b5090506000805b8951811015612fcf576000612f5d858c8481518110612af057fe5b9050612f998b8381518110612f6e57fe5b602002602001015161247c8c8581518110612f8557fe5b60200260200101518e868151811061212857fe5b848381518110612fa557fe5b602002602001018181525050612fc4612d5882868581518110612bd257fe5b925050600101612f42565b506060895167ffffffffffffffff81118015612fea57600080fd5b50604051908082528060200260200182016040528015613014578160200160208202803683370190505b50905060005b8a518110156130d157600084828151811061303157fe5b6020026020010151841061304757506000613075565b613072613062670de0b6b3a7640000878581518110610f3d57fe5b61279a86888681518110610f3d57fe5b90505b60006130818a836122fb565b9050600061309d613091836121bd565b8e8681518110612bd257fe5b90506130af818f868151811061212857fe5b8585815181106130bb57fe5b602090810291909101015250505060010161301a565b5060006130de8c8361161a565b9050612eb16130f9670de0b6b3a76400006123e2848a6129e3565b8a906131b1565b60008061310d888861161a565b9050600061312382612a748761279a818b611d01565b90506000805b895181101561314b576131418a8281518110612a9857fe5b9150600101613129565b50600061315a8b8b858c612664565b9050600061316d8b8b815181106126fd57fe5b90506000613181848d8d81518110612af057fe5b9050600061318e826121bd565b9050600061319c8a836122fb565b9050612b366131aa826121bd565b85906121ee565b60008282028315806131cb5750828482816131c857fe5b04145b6131d457600080fd5b670de0b6b3a764000090049392505050565b803561046581613a3a565b600082601f830112613201578081fd5b813561321461320f82613a1a565b6139f3565b81815291506020808301908481018184028601820187101561323557600080fd5b60005b8481101561325457813584529282019290820190600101613238565b505050505092915050565b600082601f83011261326f578081fd5b815161327d61320f82613a1a565b81815291506020808301908481018184028601820187101561329e57600080fd5b60005b84811015613254578151845292820192908201906001016132a1565b600082601f8301126132cd578081fd5b813567ffffffffffffffff8111156132e3578182fd5b61331460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016139f3565b915080825283602082850101111561332b57600080fd5b8060208401602084013760009082016020015292915050565b6000610100808385031215613357578182fd5b613360816139f3565b91505061336d83836131e6565b815261337c83602084016131e6565b60208201526040820135604082015260608201356060820152608082013560808201526133ac8360a084016131e6565b60a08201526133be8360c084016131e6565b60c082015260e082013567ffffffffffffffff8111156133dd57600080fd5b6133e9848285016132bd565b60e08301525092915050565b600060208284031215613406578081fd5b813561152f81613a3a565b60008060408385031215613423578081fd5b823561342e81613a3a565b9150602083013561343e81613a3a565b809150509250929050565b60008060006060848603121561345d578081fd5b833561346881613a3a565b9250602084013561347881613a3a565b929592945050506040919091013590565b6000806040838503121561349b578182fd5b82356134a681613a3a565b946020939093013593505050565b600080604083850312156134c6578182fd5b825167ffffffffffffffff808211156134dd578384fd5b818501915085601f8301126134f0578384fd5b81516134fe61320f82613a1a565b80828252602080830192508086018a82838702890101111561351e578889fd5b8896505b8487101561354957805161353581613a3a565b845260019690960195928101928101613522565b508801519096509350505080821115613560578283fd5b5061356d8582860161325f565b9150509250929050565b600060208284031215613588578081fd5b813561152f81613a5c565b6000602082840312156135a4578081fd5b815161152f81613a5c565b600080600080600080600060e0888a0312156135c9578485fd5b8735965060208801356135db81613a3a565b955060408801356135eb81613a3a565b9450606088013567ffffffffffffffff80821115613607578485fd5b6136138b838c016131f1565b955060808a0135945060a08a0135935060c08a0135915080821115613636578283fd5b506136438a828b016132bd565b91505092959891949750929550565b600060208284031215613663578081fd5b815161152f81613a3a565b60006020828403121561367f578081fd5b815161152f81613a6a565b60008060006060848603121561369e578081fd5b83516136a981613a6a565b602085015190935067ffffffffffffffff8111156136c5578182fd5b6136d18682870161325f565b925050604084015190509250925092565b600080604083850312156136f4578182fd5b82516136ff81613a6a565b6020939093015192949293505050565b600080600060608486031215613723578081fd5b835161372e81613a6a565b602085015160409095015190969495509392505050565b60008060408385031215613757578182fd5b825161376281613a6a565b602084015190925067ffffffffffffffff81111561377e578182fd5b61356d8582860161325f565b6000806000806080858703121561379f578182fd5b843567ffffffffffffffff808211156137b6578384fd5b6137c288838901613344565b955060208701359150808211156137d7578384fd5b506137e4878288016131f1565b949794965050505060408301359260600135919050565b60006020828403121561380c578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561384257815187529582019590820190600101613826565b509495945050505050565b60609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682527fffffffff0000000000000000000000000000000000000000000000000000000016601482015260180190565b6000828483379101908152919050565b6000604082526138c76040830185613813565b82810360208401526138d98185613813565b95945050505050565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080835283518082850152825b8181101561397f57858101830151858201604001528201613963565b818111156139905783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000838252604060208301526139dd6040830184613813565b949350505050565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715613a1257600080fd5b604052919050565b600067ffffffffffffffff821115613a30578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461092057600080fd5b801515811461092057600080fd5b6003811061092057600080fdfea2646970667358221220be0b3a4add6d0c2ab822611fc230f74f60155fa17256f6ece8052687bc18ff1664736f6c63430007010033a264697066735822122011b20af74c6bdea9e8bb3b37aa23ae2785bf841602ebde42d445e680258e576a64736f6c63430007010033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200003a5760003560e01c80638576963b146200003f578063fbfa77cf146200006e575b600080fd5b620000566200005036600462000228565b62000078565b604051620000659190620003bc565b60405180910390f35b62000056620000fb565b6000807f000000000000000000000000000000000000000000000000000000000000000089898989898989604051620000b19062000163565b620000c4989796959493929190620003dd565b604051809103906000f080158015620000e1573d6000803e3d6000fd5b509050620000ef816200011f565b98975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f9cc152f4650ca2829a210a21551537f4cc4d48c2611ec06974f835e911921b9090600090a250565b6146de80620004d383390190565b803573ffffffffffffffffffffffffffffffffffffffff811681146200019657600080fd5b92915050565b600082601f830112620001ad578081fd5b813567ffffffffffffffff811115620001c4578182fd5b620001f760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160162000491565b91508082528360208285010111156200020f57600080fd5b8060208401602084013760009082016020015292915050565b600080600080600080600060e0888a03121562000243578283fd5b67ffffffffffffffff80893511156200025a578384fd5b620002698a8a358b016200019c565b97506020890135818111156200027d578485fd5b6200028b8b828c016200019c565b975050604089013581811115620002a0578485fd5b8901601f81018b13620002b1578485fd5b803582811115620002c0578586fd5b602081029250620002d46020840162000491565b80828252602082019150602084018e6020878701011115620002f4578889fd5b8895505b8386101562000323576200030d8f8262000171565b83526001959095019460209283019201620002f8565b509a9d999c50999a60608101359a5060808101359960a0820135995060c090910135975095505050505050565b60008151808452815b81811015620003775760208185018101518683018201520162000359565b81811115620003895782602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b600061010073ffffffffffffffffffffffffffffffffffffffff8b16835260208181850152620004108285018c62000350565b9150838203604085015262000426828b62000350565b84810360608601528951808252828b01935090820190845b818110156200046657620004538551620004b9565b835293830193918301916001016200043e565b5050608085019890985250505060a081019390935260c083019190915260e090910152949350505050565b60405181810167ffffffffffffffff81118282101715620004b157600080fd5b604052919050565b73ffffffffffffffffffffffffffffffffffffffff169056fe6103006040523480156200001257600080fd5b50604051620046de380380620046de83398101604081905262000035916200089d565b8787878786868686600087878787878781818787816003908051906020019062000061929190620006bb565b50805162000077906004906020840190620006bb565b5050506276a7008211156200008b57600080fd5b62278d008111156200009c57600080fd5b4290910160808190520160a052835160021115620000b957600080fd5b600784511115620000c957600080fd5b620000df846200056960201b62000d001760201c565b67016345785d8a0000831115620000f557600080fd5b6040516309b2760f60e01b81526000906001600160a01b038a16906309b2760f9062000126908b9060040162000a2c565b602060405180830381600087803b1580156200014157600080fd5b505af115801562000156573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017c919062000884565b9050886001600160a01b03166366a9c7d2828788516001600160401b0381118015620001a757600080fd5b50604051908082528060200260200182016040528015620001d2578160200160208202803683370190505b506040518463ffffffff1660e01b8152600401620001f39392919062000990565b600060405180830381600087803b1580156200020e57600080fd5b505af115801562000223573d6000803e3d6000fd5b5050506001600160601b031960608b901b1660c0525060e081905260068490558451610100528451620002585760006200026f565b846000815181106200026657fe5b60200260200101515b60601b6001600160601b03191661012052845160011062000292576000620002a9565b84600181518110620002a057fe5b60200260200101515b60601b6001600160601b031916610140528451600210620002cc576000620002e3565b84600281518110620002da57fe5b60200260200101515b60601b6001600160601b031916610160528451600310620003065760006200031d565b846003815181106200031457fe5b60200260200101515b60601b6001600160601b0319166101805284516004106200034057600062000357565b846004815181106200034e57fe5b60200260200101515b60601b6001600160601b0319166101a05284516005106200037a57600062000391565b846005815181106200038857fe5b60200260200101515b60601b6001600160601b0319166101c0528451600610620003b4576000620003cb565b84600681518110620003c257fe5b60200260200101515b60601b6001600160601b0319166101e0528451620003eb57600062000411565b6200041185600081518110620003fd57fe5b60200260200101516200057960201b60201c565b6102005284516001106200042757600062000439565b6200043985600181518110620003fd57fe5b6102205284516002106200044f57600062000461565b6200046185600281518110620003fd57fe5b6102405284516003106200047757600062000489565b6200048985600381518110620003fd57fe5b6102605284516004106200049f576000620004b1565b620004b185600481518110620003fd57fe5b610280528451600510620004c7576000620004d9565b620004d985600581518110620003fd57fe5b6102a0528451600610620004ef57600062000501565b6200050185600681518110620003fd57fe5b6102c0818152505050505050505050505050505050505050670de0b6b3a76400008410156200052f57600080fd5b69010f0cf064dd592000008411156200054757600080fd5b6005855111156200055757600080fd5b5050506102e0525062000a8a92505050565b8062000575816200061b565b5050565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620005b657600080fd5b505afa158015620005cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f1919062000966565b60ff169050600062000610601283620006a060201b62000d0e1760201c565b600a0a949350505050565b6002815110156200062c576200069d565b6000816000815181106200063c57fe5b602002602001015190506000600190505b82518110156200069a5760008382815181106200066657fe5b60200260200101519050806001600160a01b0316836001600160a01b0316106200068f57600080fd5b91506001016200064d565b50505b50565b600082821115620006b057600080fd5b508082035b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006fe57805160ff19168380011785556200072e565b828001600101855582156200072e579182015b828111156200072e57825182559160200191906001019062000711565b506200073c92915062000740565b5090565b5b808211156200073c576000815560010162000741565b600082601f83011262000768578081fd5b81516001600160401b038111156200077e578182fd5b60208082026200079082820162000a41565b83815293508184018583018287018401881015620007ad57600080fd5b600092505b84831015620007dd578051620007c88162000a74565b825260019290920191908301908301620007b2565b505050505092915050565b8051620006b58162000a74565b600082601f83011262000806578081fd5b81516001600160401b038111156200081c578182fd5b602062000832601f8301601f1916820162000a41565b925081835284818386010111156200084957600080fd5b60005b82811015620008695784810182015184820183015281016200084c565b828111156200087b5760008284860101525b50505092915050565b60006020828403121562000896578081fd5b5051919050565b600080600080600080600080610100898b031215620008ba578384fd5b620008c68a8a620007e8565b60208a01519098506001600160401b0380821115620008e3578586fd5b620008f18c838d01620007f5565b985060408b015191508082111562000907578586fd5b620009158c838d01620007f5565b975060608b01519150808211156200092b578586fd5b506200093a8b828c0162000757565b9550506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b60006020828403121562000978578081fd5b815160ff8116811462000989578182fd5b9392505050565b60006060820185835260206060818501528186518084526080860191508288019350845b81811015620009dc57620009c9855162000a68565b83529383019391830191600101620009b4565b505084810360408601528551808252908201925081860190845b8181101562000a1e5762000a0b835162000a68565b85529383019391830191600101620009f6565b509298975050505050505050565b602081016003831062000a3b57fe5b91905290565b6040518181016001600160401b038111828210171562000a6057600080fd5b604052919050565b6001600160a01b031690565b6001600160a01b03811681146200069d57600080fd5b60805160a05160c05160601c60e051610100516101205160601c6101405160601c6101605160601c6101805160601c6101a05160601c6101c05160601c6101e05160601c61020051610220516102405161026051610280516102a0516102c0516102e051613aad62000c31600039806107bd52806107f052806115c15280611b525280611c0b5280611f20528061205952806125355280612618528061287c52806128d75250806114e65250806114835250806114205250806113bd52508061135a5250806112f7525080611288525050505050505050806105b15280610a5d5280610bd45280610ef45280610faa52806111fe528061126252806112d05280611333528061139652806113f9528061145c52806114bf528061153b528061195b52806119d15280611bcf5280611e5e5280611eb95280611feb528061229352806124a052806124ce52806125e1528061283e528061290f52508061055d52806106fd52806108825280610b3d5250806106c15280610856528061093e5280610b115280611a81525080610a135280611a4a5250806109f052806118a75250613aad6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806374f3b009116100ee578063a9059cbb11610097578063d4cadf6811610071578063d4cadf681461035e578063d5c096c414610366578063d73dd62314610379578063dd62ed3e1461038c576101ae565b8063a9059cbb14610330578063aaabadc514610343578063b58c95341461034b576101ae565b80638d928af8116100c85780638d928af8146102fc57806395d89b4114610311578063a50ff09714610319576101ae565b806374f3b009146102b557806377c91f70146102d657806387ec6817146102e9576101ae565b806338fff2d01161015b5780636618846311610135578063661884631461027f578063679aefce146102925780636daccffa1461029a57806370a08231146102a2576101ae565b806338fff2d0146102435780636028bfd41461024b578063618e086e1461026c576101ae565b806323b872dd1161018c57806323b872dd14610206578063313ce5671461021957806334e199071461022e576101ae565b806306fdde03146101b3578063095ea7b3146101d157806318160ddd146101f1575b600080fd5b6101bb61039f565b6040516101c89190613953565b60405180910390f35b6101e46101df366004613489565b610454565b6040516101c891906138e2565b6101f961046b565b6040516101c89190613905565b6101e4610214366004613449565b610471565b610221610534565b6040516101c891906139e5565b61024161023c3660046137fb565b610539565b005b6101f961055b565b61025e6102593660046135af565b61057f565b6040516101c89291906139c4565b6101f961027a36600461378a565b6105a8565b6101e461028d366004613489565b610654565b6101f96106bb565b6101f96107ee565b6101f96102b03660046133f5565b610812565b6102c86102c33660046135af565b61083a565b6040516101c89291906138b4565b6102416102e4366004613577565b61090f565b61025e6102f73660046135af565b610923565b61030461093c565b6040516101c89190613932565b6101bb610960565b6103216109df565b6040516101c8939291906138ed565b6101e461033e366004613489565b610a38565b610304610a45565b6101f961035936600461378a565b610a54565b6101f9610aef565b6102c86103743660046135af565b610af5565b6101e4610387366004613489565b610c85565b6101f961039a366004613411565b610cc8565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104495780601f1061041e57610100808354040283529160200191610449565b820191906000526020600020905b81548152906001019060200180831161042c57829003601f168201915b505050505090505b90565b6000610461338484610d23565b5060015b92915050565b60025490565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600160209081526040808320338085529252822054919214806104b05750828110155b6104b957600080fd5b6104c4858585610d98565b3373ffffffffffffffffffffffffffffffffffffffff86161480159061050a57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610529578281101561051c57600080fd5b6105298533858403610d23565b506001949350505050565b601290565b610541610e75565b67016345785d8a000081111561055657600080fd5b600655565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000606061059889898989898989610ed9610fa5611024565b9150915097509795505050505050565b60006105d583837f00000000000000000000000000000000000000000000000000000000000000006111e2565b60606105df6111f9565b905061060286604001518285815181106105f557fe5b6020026020010151611523565b60408701526106118582611536565b600061061f878787876115b0565b905061063e8183878151811061063157fe5b60200260200101516115f7565b905061064981611603565b979650505050505050565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915281205480831061069d5761069833856000610d23565b6106b1565b6106b133856106ac8487610d0e565b610d23565b5060019392505050565b600060607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016107389190613905565b60006040518083038186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107aa91908101906134b4565b9150506107e86107b861046b565b6107e27f00000000000000000000000000000000000000000000000000000000000000008461161a565b90611787565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000090565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b606080883373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461088057600080fd5b7f000000000000000000000000000000000000000000000000000000000000000081146108ac57600080fd5b60606108b66111f9565b90506108c28882611536565b60006060806108d68e8e8e8e8e8e8e610ed9565b9250925092506108e68d846117ed565b6108f08285610fa5565b6108fa8185610fa5565b909550935050505b5097509795505050505050565b610917610e75565b610920816118a5565b50565b60006060610598898989898989896119386119cc611024565b7f000000000000000000000000000000000000000000000000000000000000000090565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104495780601f1061041e57610100808354040283529160200191610449565b60008060006109ec611a46565b15937f000000000000000000000000000000000000000000000000000000000000000093507f000000000000000000000000000000000000000000000000000000000000000092509050565b6000610461338484610d98565b6000610a4f611a7d565b905090565b6000610a8183837f00000000000000000000000000000000000000000000000000000000000000006111e2565b610a8e8560400151611b1d565b60408601526060610a9d6111f9565b9050610ab386604001518286815181106105f557fe5b6040870152610ac28582611536565b6000610ad087878787611b41565b905061064981838681518110610ae257fe5b6020026020010151611b7e565b60065490565b606080883373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610b3b57600080fd5b7f00000000000000000000000000000000000000000000000000000000000000008114610b6757600080fd5b6060610b716111f9565b9050610b7d8882611536565b610b8561046b565b610c405760006060610b998d8d8d8a611b8a565b915091506103e8821015610bac57600080fd5b610bb960006103e8611c44565b610bc78b6103e88403611c44565b610bd181846119cc565b807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff81118015610c0957600080fd5b50604051908082528060200260200182016040528015610c33578160200160208202803683370190505b5095509550505050610902565b6000606080610c548e8e8e8e8e8e8e611938565b925092509250610c648c84611c44565b610c6e82856119cc565b610c788185610fa5565b9095509350610902915050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff8716845290915281205490916104619185906106ac9086611d01565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b80610d0a81611d13565b5050565b600082821115610d1d57600080fd5b50900390565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d8b908590613905565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610dcb57600080fd5b73ffffffffffffffffffffffffffffffffffffffff808516600090815260208190526040808220858503905591851681522054610e089083611d01565b73ffffffffffffffffffffffffffffffffffffffff80851660008181526020819052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e67908690613905565b60405180910390a350505050565b6000306000357fffffffff0000000000000000000000000000000000000000000000000000000016604051602001610eae92919061384d565b604051602081830303815290604052805190602001209050610ed08133611da5565b61092057600080fd5b60006060806060610eed8860075488611e39565b905060005b7f0000000000000000000000000000000000000000000000000000000000000000811015610f7257610f53828281518110610f2957fe5b60200260200101518a8381518110610f3d57fe5b6020026020010151610d0e90919063ffffffff16565b898281518110610f5f57fe5b6020908102919091010152600101610ef2565b5060006060610f818a88611f69565b91509150610f8f8a82611fe5565b600755909c909b50909950975050505050505050565b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561101f57611000838281518110610fdf57fe5b6020026020010151838381518110610ff357fe5b602002602001015161207e565b83828151811061100c57fe5b6020908102919091010152600101610fa8565b505050565b600060603330146111245760003073ffffffffffffffffffffffffffffffffffffffff166000366040516110599291906138a4565b6000604051808303816000865af19150503d8060008114611096576040519150601f19603f3d011682016040523d82523d6000602084013e61109b565b606091505b5050905080600081146110aa57fe5b60046000803e6000517fffffffff00000000000000000000000000000000000000000000000000000000167f43adbafb000000000000000000000000000000000000000000000000000000008114611106573d6000803e3d6000fd5b506020600460003e604060205260243d03602460403e601c3d016000f35b606061112e6111f9565b905061113a8982611536565b600060606111518e8e8e8e8e8e8e8e63ffffffff16565b509150915061116481848863ffffffff16565b80517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082018390526343adbafb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08301526020027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc82016044820181fd5b80831080156111f057508082105b61101f57600080fd5b6060807f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111801561123357600080fd5b5060405190808252806020026020018201604052801561125d578160200160208202803683370190505b5090507f0000000000000000000000000000000000000000000000000000000000000000156112c5577f0000000000000000000000000000000000000000000000000000000000000000816000815181106112b457fe5b6020026020010181815250506112cc565b9050610451565b60017f000000000000000000000000000000000000000000000000000000000000000011156112c5577f00000000000000000000000000000000000000000000000000000000000000008160018151811061132357fe5b60200260200101818152505060027f000000000000000000000000000000000000000000000000000000000000000011156112c5577f00000000000000000000000000000000000000000000000000000000000000008160028151811061138657fe5b60200260200101818152505060037f000000000000000000000000000000000000000000000000000000000000000011156112c5577f0000000000000000000000000000000000000000000000000000000000000000816003815181106113e957fe5b60200260200101818152505060047f000000000000000000000000000000000000000000000000000000000000000011156112c5577f00000000000000000000000000000000000000000000000000000000000000008160048151811061144c57fe5b60200260200101818152505060057f000000000000000000000000000000000000000000000000000000000000000011156112c5577f0000000000000000000000000000000000000000000000000000000000000000816005815181106114af57fe5b60200260200101818152505060067f000000000000000000000000000000000000000000000000000000000000000011156112c5577f00000000000000000000000000000000000000000000000000000000000000008160068151811061151257fe5b602002602001018181525050905090565b600061152f838361209b565b9392505050565b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561101f5761159183828151811061157057fe5b602002602001015183838151811061158457fe5b602002602001015161209b565b83828151811061159d57fe5b6020908102919091010152600101611539565b60006115ba6120be565b60006115ed7f00000000000000000000000000000000000000000000000000000000000000008686868a604001516120d1565b9695505050505050565b600061152f838361218d565b60006104656116136006546121bd565b83906121ee565b80516000908190815b8181101561165b5761165185828151811061163a57fe5b602002602001015184611d0190919063ffffffff16565b9250600101611623565b508161166c57600092505050610465565b6000828161167a888561209b565b905060005b60ff81101561177a57600061169b868a60008151811061158457fe5b905060015b868110156116d4576116ca6116c46116be848d858151811061158457fe5b8961209b565b8661218d565b91506001016116a0565b5083945061173461170a6116f16116eb868b61209b565b8461209b565b6117046116fe8a8961209b565b8861209b565b90611d01565b61172f61172161171b876001610d0e565b8561209b565b6117046116be8b6001611d01565b61218d565b93508484111561175a57600161174a8587610d0e565b11611755575061177a565b611771565b60016117668686610d0e565b11611771575061177a565b5060010161167f565b5090979650505050505050565b60008161179357600080fd5b670de0b6b3a764000083028315806117bb5750670de0b6b3a76400008482816117b857fe5b04145b6117c457600080fd5b600283048101818110156117d757600080fd5b60008482816117e257fe5b049695505050505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020548181101561182057600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902082820390556002546118579083610d0e565b60025560405160009073ffffffffffffffffffffffffffffffffffffffff8516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610d8b908690613905565b7f000000000000000000000000000000000000000000000000000000000000000042106118d157600080fd5b600580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790556040517fa5bc6afced71829f82830a97f26eb92aea46d29443b5acb7d47c4a52b1e273419061192d9083906138e2565b60405180910390a150565b60006060806119456120be565b60606119548860075488611e39565b905060005b7f00000000000000000000000000000000000000000000000000000000000000008110156119af57611990828281518110610f2957fe5b89828151811061199c57fe5b6020908102919091010152600101611959565b50600060606119be8a88612240565b91509150610f8f8a8261228d565b60005b7f000000000000000000000000000000000000000000000000000000000000000081101561101f57611a27838281518110611a0657fe5b6020026020010151838381518110611a1a57fe5b602002602001015161218d565b838281518110611a3357fe5b60209081029190910101526001016119cf565b60007f000000000000000000000000000000000000000000000000000000000000000042101580610a4f57505060055460ff161590565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663aaabadc56040518163ffffffff1660e01b815260040160206040518083038186803b158015611ae557600080fd5b505afa158015611af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190613652565b600080611b35600654846122fb90919063ffffffff16565b905061152f8382610d0e565b6000611b4b6120be565b60006115ed7f00000000000000000000000000000000000000000000000000000000000000008686868a6040015161235e565b600061152f838361207e565b60006060611b966120be565b6000611ba1846123e8565b90506000816002811115611bb157fe5b14611bbb57600080fd5b6060611bc6856123fe565b9050611bf381517f0000000000000000000000000000000000000000000000000000000000000000612414565b611c0481611bff6111f9565b611536565b6000611c307f00000000000000000000000000000000000000000000000000000000000000008361161a565b600781905599919850909650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040902054611c749082611d01565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260208190526040902055600254611ca79082611d01565b60025560405173ffffffffffffffffffffffffffffffffffffffff8316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611cf5908590613905565b60405180910390a35050565b60008282018381101561152f57600080fd5b600281511015611d2257610920565b600081600081518110611d3157fe5b602002602001015190506000600190505b825181101561101f576000838281518110611d5957fe5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1610611d9b57600080fd5b9150600101611d42565b6000611daf611a7d565b73ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b8152600401611de992919061390e565b60206040518083038186803b158015611e0157600080fd5b505afa158015611e15573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f9190613593565b606060008085600081518110611e4b57fe5b602002602001015190506000600190505b7f0000000000000000000000000000000000000000000000000000000000000000811015611eb4576000878281518110611e9257fe5b6020026020010151905082811115611eab578193508092505b50600101611e5c565b5060607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff81118015611eee57600080fd5b50604051908082528060200260200182016040528015611f18578160200160208202803683370190505b509050611f487f000000000000000000000000000000000000000000000000000000000000000088888689612420565b818481518110611f5457fe5b60209081029190910101529695505050505050565b600060606000611f78846123e8565b90506000816002811115611f8857fe5b1415611fa257611f988585612482565b9250925050611fde565b6001816002811115611fb057fe5b1415611fc057611f98858561258b565b6002816002811115611fce57fe5b14156101ae57611f9885856125bd565b9250929050565b6000805b7f00000000000000000000000000000000000000000000000000000000000000008110156120535761203483828151811061202057fe5b6020026020010151858381518110610f3d57fe5b84828151811061204057fe5b6020908102919091010152600101611fe9565b5061152f7f00000000000000000000000000000000000000000000000000000000000000008461161a565b60008161208a57600080fd5b81838161209357fe5b049392505050565b60008282028315806120b55750828482816120b257fe5b04145b61152f57600080fd5b6120c6611a46565b6120cf57600080fd5b565b6000806120de878761161a565b90506120f083878681518110610f3d57fe5b8685815181106120fc57fe5b602002602001018181525050600061211688888489612664565b905061213e8488878151811061212857fe5b6020026020010151611d0190919063ffffffff16565b87868151811061214a57fe5b602002602001018181525050612181600161170489898151811061216a57fe5b602002602001015184610d0e90919063ffffffff16565b98975050505050505050565b60008161219957600080fd5b826121a657506000610465565b8160018403816121b257fe5b046001019050610465565b6000670de0b6b3a76400008210156121e6576121e1670de0b6b3a764000083610d0e565b610465565b506000919050565b6000816121fa57600080fd5b8261220757506000610465565b670de0b6b3a76400008381029084828161221d57fe5b041461222857600080fd5b82600182038161223457fe5b04600101915050610465565b60006060600061224f846123e8565b9050600181600281111561225f57fe5b141561226f57611f988585612828565b600281600281111561227d57fe5b14156101ae57611f9885856128bc565b6000805b7f0000000000000000000000000000000000000000000000000000000000000000811015612053576122dc8382815181106122c857fe5b602002602001015185838151811061212857fe5b8482815181106122e857fe5b6020908102919091010152600101612291565b600082820283158061231557508284828161231257fe5b04145b61231e57600080fd5b8061232d576000915050610465565b670de0b6b3a76400007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201612234565b60008061236b878761161a565b905061237d8387878151811061212857fe5b86868151811061238957fe5b60200260200101818152505060006123a388888488612664565b90506123b584888881518110610f3d57fe5b8787815181106123c157fe5b60200260200101818152505061218160016123e2838a8981518110610f3d57fe5b90610d0e565b600081806020019051810190610465919061366e565b60608180602001905181019061152f9190613745565b808214610d0a57600080fd5b60008061242f87878787612664565b905060008187868151811061244057fe5b602002602001015111612454576000612464565b61246482888781518110610f3d57fe5b9050612181670de0b6b3a764000061247c8387612997565b906129e3565b6000606061248e6120be565b60008061249a85612a2f565b915091507f000000000000000000000000000000000000000000000000000000000000000081106124ca57600080fd5b60607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111801561250357600080fd5b5060405190808252806020026020018201604052801561252d578160200160208202803683370190505b5090506125677f000000000000000000000000000000000000000000000000000000000000000088848661255f61046b565b600654612a51565b81838151811061257357fe5b60209081029190910101529196919550909350505050565b60006060600061259a84612b49565b905060606125b086836125ab61046b565b612b5f565b9196919550909350505050565b600060606125c96120be565b606060006125d685612c11565b9150915061260582517f0000000000000000000000000000000000000000000000000000000000000000612414565b61261182611bff6111f9565b60006126497f0000000000000000000000000000000000000000000000000000000000000000888561264161046b565b600654612c29565b90508181111561265857600080fd5b96919550909350505050565b60008061267286865161209b565b905060008560008151811061268357fe5b6020026020010151905060006126a187518860008151811061158457fe5b905060015b87518110156126ed576126d26126cc6126c5848b858151811061158457fe5b8a5161209b565b8861207e565b91506126e388828151811061163a57fe5b92506001016126a6565b506127148786815181106126fd57fe5b602002602001015183610d0e90919063ffffffff16565b9150600061272b612725888961209b565b8561218d565b9050612757826107e28a898151811061274057fe5b60200260200101518461299790919063ffffffff16565b9050600061277a6127688987611787565b61170486670de0b6b3a7640000612997565b90506000806127a061278c8b85611d01565b61279a866117048e80612997565b906121ee565b905060005b60ff811015612818578192506127d56127c78c6123e28761170487600261209b565b61279a876117048680612997565b9150828211156127fa5760016127eb8385610d0e565b116127f557612818565b612810565b60016128068484610d0e565b1161281057612818565b6001016127a5565b509b9a5050505050505050505050565b6000606080600061283885612c11565b915091507f000000000000000000000000000000000000000000000000000000000000000082511461286957600080fd5b61287582611bff6111f9565b60006128ad7f000000000000000000000000000000000000000000000000000000000000000088856128a561046b565b600654612ec1565b90508181101561265857600080fd5b600060606000806128cc85612a2f565b9150915060006129097f000000000000000000000000000000000000000000000000000000000000000088848661290161046b565b600654613100565b905060607f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8111801561294457600080fd5b5060405190808252806020026020018201604052801561296e578160200160208202803683370190505b5090508181848151811061297e57fe5b6020908102919091010152929792965091945050505050565b60008282028315806129b15750828482816129ae57fe5b04145b6129ba57600080fd5b6706f05b59d3b200008101818110156129d257600080fd5b6000670de0b6b3a7640000826117e2565b6000816129ef57600080fd5b826129fc57506000610465565b670de0b6b3a764000083810290848281612a1257fe5b0414612a1d57600080fd5b828181612a2657fe5b04915050610465565b60008082806020019051810190612a46919061370f565b909590945092505050565b600080612a5e888861161a565b90506000612a7a82612a748761279a818b610d0e565b906122fb565b90506000805b8951811015612ab957612aaf8a8281518110612a9857fe5b602002602001015183611d0190919063ffffffff16565b9150600101612a80565b506000612ac88b8b858c612664565b90506000612adc828c8c81518110610f3d57fe5b90506000612b06848d8d81518110612af057fe5b60200260200101516129e390919063ffffffff16565b90506000612b13826121bd565b90506000612b218a836122fb565b9050612b36612b2f826121bd565b85906131b1565b9f9e505050505050505050505050505050565b60008180602001905181019061152f91906136e2565b60606000612b6d84846129e3565b90506060855167ffffffffffffffff81118015612b8957600080fd5b50604051908082528060200260200182016040528015612bb3578160200160208202803683370190505b50905060005b8651811015612c0757612be883888381518110612bd257fe5b60200260200101516131b190919063ffffffff16565b828281518110612bf457fe5b6020908102919091010152600101612bb9565b5095945050505050565b6060600082806020019051810190612a46919061368a565b600080612c36878761161a565b90506000805b8751811015612c5e57612c54888281518110612a9857fe5b9150600101612c3c565b506060865167ffffffffffffffff81118015612c7957600080fd5b50604051908082528060200260200182016040528015612ca3578160200160208202803683370190505b5090506000805b8951811015612d6a576000612cdb858c8481518110612cc557fe5b60200260200101516121ee90919063ffffffff16565b9050612d178b8381518110612cec57fe5b602002602001015161279a8c8581518110612d0357fe5b60200260200101518e8681518110610f3d57fe5b848381518110612d2357fe5b602002602001018181525050612d5f612d5882868581518110612d4257fe5b60200260200101516122fb90919063ffffffff16565b8490611d01565b925050600101612caa565b506060895167ffffffffffffffff81118015612d8557600080fd5b50604051908082528060200260200182016040528015612daf578160200160208202803683370190505b50905060005b8a51811015612e86576000848281518110612dcc57fe5b60200260200101518411612de257506000612e2a565b612e27612e01868481518110612df457fe5b60200260200101516121bd565b61279a878581518110612e1057fe5b602002602001015187610d0e90919063ffffffff16565b90505b6000612e368a836122fb565b90506000612e52612e46836121bd565b8e8681518110612cc557fe5b9050612e64818f8681518110610f3d57fe5b858581518110612e7057fe5b6020908102919091010152505050600101612db5565b506000612e938c8361161a565b9050612eb1612eaa612ea583896121ee565b6121bd565b8a906122fb565b9c9b505050505050505050505050565b600080612ece878761161a565b90506000805b8751811015612ef657612eec888281518110612a9857fe5b9150600101612ed4565b506060865167ffffffffffffffff81118015612f1157600080fd5b50604051908082528060200260200182016040528015612f3b578160200160208202803683370190505b5090506000805b8951811015612fcf576000612f5d858c8481518110612af057fe5b9050612f998b8381518110612f6e57fe5b602002602001015161247c8c8581518110612f8557fe5b60200260200101518e868151811061212857fe5b848381518110612fa557fe5b602002602001018181525050612fc4612d5882868581518110612bd257fe5b925050600101612f42565b506060895167ffffffffffffffff81118015612fea57600080fd5b50604051908082528060200260200182016040528015613014578160200160208202803683370190505b50905060005b8a518110156130d157600084828151811061303157fe5b6020026020010151841061304757506000613075565b613072613062670de0b6b3a7640000878581518110610f3d57fe5b61279a86888681518110610f3d57fe5b90505b60006130818a836122fb565b9050600061309d613091836121bd565b8e8681518110612bd257fe5b90506130af818f868151811061212857fe5b8585815181106130bb57fe5b602090810291909101015250505060010161301a565b5060006130de8c8361161a565b9050612eb16130f9670de0b6b3a76400006123e2848a6129e3565b8a906131b1565b60008061310d888861161a565b9050600061312382612a748761279a818b611d01565b90506000805b895181101561314b576131418a8281518110612a9857fe5b9150600101613129565b50600061315a8b8b858c612664565b9050600061316d8b8b815181106126fd57fe5b90506000613181848d8d81518110612af057fe5b9050600061318e826121bd565b9050600061319c8a836122fb565b9050612b366131aa826121bd565b85906121ee565b60008282028315806131cb5750828482816131c857fe5b04145b6131d457600080fd5b670de0b6b3a764000090049392505050565b803561046581613a3a565b600082601f830112613201578081fd5b813561321461320f82613a1a565b6139f3565b81815291506020808301908481018184028601820187101561323557600080fd5b60005b8481101561325457813584529282019290820190600101613238565b505050505092915050565b600082601f83011261326f578081fd5b815161327d61320f82613a1a565b81815291506020808301908481018184028601820187101561329e57600080fd5b60005b84811015613254578151845292820192908201906001016132a1565b600082601f8301126132cd578081fd5b813567ffffffffffffffff8111156132e3578182fd5b61331460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016139f3565b915080825283602082850101111561332b57600080fd5b8060208401602084013760009082016020015292915050565b6000610100808385031215613357578182fd5b613360816139f3565b91505061336d83836131e6565b815261337c83602084016131e6565b60208201526040820135604082015260608201356060820152608082013560808201526133ac8360a084016131e6565b60a08201526133be8360c084016131e6565b60c082015260e082013567ffffffffffffffff8111156133dd57600080fd5b6133e9848285016132bd565b60e08301525092915050565b600060208284031215613406578081fd5b813561152f81613a3a565b60008060408385031215613423578081fd5b823561342e81613a3a565b9150602083013561343e81613a3a565b809150509250929050565b60008060006060848603121561345d578081fd5b833561346881613a3a565b9250602084013561347881613a3a565b929592945050506040919091013590565b6000806040838503121561349b578182fd5b82356134a681613a3a565b946020939093013593505050565b600080604083850312156134c6578182fd5b825167ffffffffffffffff808211156134dd578384fd5b818501915085601f8301126134f0578384fd5b81516134fe61320f82613a1a565b80828252602080830192508086018a82838702890101111561351e578889fd5b8896505b8487101561354957805161353581613a3a565b845260019690960195928101928101613522565b508801519096509350505080821115613560578283fd5b5061356d8582860161325f565b9150509250929050565b600060208284031215613588578081fd5b813561152f81613a5c565b6000602082840312156135a4578081fd5b815161152f81613a5c565b600080600080600080600060e0888a0312156135c9578485fd5b8735965060208801356135db81613a3a565b955060408801356135eb81613a3a565b9450606088013567ffffffffffffffff80821115613607578485fd5b6136138b838c016131f1565b955060808a0135945060a08a0135935060c08a0135915080821115613636578283fd5b506136438a828b016132bd565b91505092959891949750929550565b600060208284031215613663578081fd5b815161152f81613a3a565b60006020828403121561367f578081fd5b815161152f81613a6a565b60008060006060848603121561369e578081fd5b83516136a981613a6a565b602085015190935067ffffffffffffffff8111156136c5578182fd5b6136d18682870161325f565b925050604084015190509250925092565b600080604083850312156136f4578182fd5b82516136ff81613a6a565b6020939093015192949293505050565b600080600060608486031215613723578081fd5b835161372e81613a6a565b602085015160409095015190969495509392505050565b60008060408385031215613757578182fd5b825161376281613a6a565b602084015190925067ffffffffffffffff81111561377e578182fd5b61356d8582860161325f565b6000806000806080858703121561379f578182fd5b843567ffffffffffffffff808211156137b6578384fd5b6137c288838901613344565b955060208701359150808211156137d7578384fd5b506137e4878288016131f1565b949794965050505060408301359260600135919050565b60006020828403121561380c578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561384257815187529582019590820190600101613826565b509495945050505050565b60609290921b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001682527fffffffff0000000000000000000000000000000000000000000000000000000016601482015260180190565b6000828483379101908152919050565b6000604082526138c76040830185613813565b82810360208401526138d98185613813565b95945050505050565b901515815260200190565b92151583526020830191909152604082015260600190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6000602080835283518082850152825b8181101561397f57858101830151858201604001528201613963565b818111156139905783604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b6000838252604060208301526139dd6040830184613813565b949350505050565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715613a1257600080fd5b604052919050565b600067ffffffffffffffff821115613a30578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461092057600080fd5b801515811461092057600080fd5b6003811061092057600080fdfea2646970667358221220be0b3a4add6d0c2ab822611fc230f74f60155fa17256f6ece8052687bc18ff1664736f6c63430007010033a264697066735822122011b20af74c6bdea9e8bb3b37aa23ae2785bf841602ebde42d445e680258e576a64736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "create(string,string,address[],uint256,uint256,uint256,uint256)": {
        "details": "Deploys a new `StablePool`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}