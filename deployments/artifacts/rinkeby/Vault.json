{
  "address": "0x001b6571f9CB4143b448918a9BFEaA52c6E438C3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "AuthorizedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "AuthorizedPoolInvestmentManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "AuthorizedTrustedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "RevokedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "RevokedPoolInvestmentManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint128[]",
          "name": "totalAmounts",
          "type": "uint128[]"
        },
        {
          "internalType": "uint128[]",
          "name": "amountsToTransfer",
          "type": "uint128[]"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "authorizeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "authorizePoolInvestmentManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        }
      ],
      "name": "authorizeTrustedOperatorReporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint128",
              "name": "tokenInIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "tokenOutIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amountIn",
              "type": "uint128"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IVault.SwapIn[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "withdrawFromUserBalance",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "depositToUserBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        }
      ],
      "name": "batchSwapGivenIn",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "poolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint128",
              "name": "tokenInIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "tokenOutIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amountOut",
              "type": "uint128"
            },
            {
              "internalType": "bytes",
              "name": "userData",
              "type": "bytes"
            }
          ],
          "internalType": "struct IVault.SwapOut[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "withdrawFromUserBalance",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "depositToUserBalance",
              "type": "bool"
            }
          ],
          "internalType": "struct IVault.FundManagement",
          "name": "funds",
          "type": "tuple"
        }
      ],
      "name": "batchSwapGivenOut",
      "outputs": [
        {
          "internalType": "int256[]",
          "name": "",
          "type": "int256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimUnaccountedForTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "investmentManager",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amountToDivest",
          "type": "uint128"
        }
      ],
      "name": "divestPoolBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_params",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "serialized",
          "type": "bytes32"
        }
      ],
      "name": "fromPoolId",
      "outputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "enum IVault.StrategyType",
          "name": "strategyType",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getInvestablePercentage",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "getPoolController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getPoolIds",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "getPoolStrategy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IVault.StrategyType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getPoolTokenBalances",
      "outputs": [
        {
          "internalType": "uint128[]",
          "name": "",
          "type": "uint128[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        }
      ],
      "name": "getPoolTokens",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTrustedOperatorReporters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTrustedOperators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTotalUnaccountedForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getTrustedOperatorReporters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getTrustedOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getUserOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getUserTokenBalance",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserTotalOperators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "investmentManager",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amountToInvest",
          "type": "uint128"
        }
      ],
      "name": "investPoolBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isOperatorFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isPoolInvestmentManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "enum IVault.StrategyType",
          "name": "strategyType",
          "type": "uint8"
        }
      ],
      "name": "newPool",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFlashLoanFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolSwapFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolWithdrawFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "investmentManager",
          "type": "address"
        }
      ],
      "name": "rebalancePoolInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint128[]",
          "name": "totalAmounts",
          "type": "uint128[]"
        },
        {
          "internalType": "uint128[]",
          "name": "amountsToTransfer",
          "type": "uint128[]"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "reportTrustedOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "revokeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "revokePoolInvestmentManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "percentage",
          "type": "uint128"
        }
      ],
      "name": "setInvestablePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "setPoolController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setProtocolFlashLoanFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setProtocolSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setProtocolWithdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "strategyType",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "poolIndex",
          "type": "uint32"
        }
      ],
      "name": "toPoolId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "poolId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amountInvested",
          "type": "uint128"
        }
      ],
      "name": "updateInvested",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ee2706c28c3e371b5bf3b989ffa5365ec411f18f3c5785ca562f25c16139c0c",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7D7dC6A9C2Af80a0C5935CcD96fCbA5351cA18a0",
    "contractAddress": null,
    "transactionIndex": 5,
    "gasUsed": "5250089",
    "logsBloom": "0x
    "blockHash": "0x16301ffcee12504e3df6d613f56998d8a24db3d353bc7ffd7f2f032d152b2ff5",
    "transactionHash": "0x6ee2706c28c3e371b5bf3b989ffa5365ec411f18f3c5785ca562f25c16139c0c",
    "logs": [],
    "blockNumber": 7628992,
    "cumulativeGasUsed": "5435400",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7D7dC6A9C2Af80a0C5935CcD96fCbA5351cA18a0"
  ],
  "solcInputHash": "04126076e1073c58f6fff18e8fc8421d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"AuthorizedPoolInvestmentManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"AuthorizedTrustedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RevokedPoolInvestmentManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"totalAmounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint128[]\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizePoolInvestmentManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"authorizeTrustedOperatorReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"tokenInIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenOutIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountIn\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SwapIn[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withdrawFromUserBalance\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"depositToUserBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"batchSwapGivenIn\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"tokenInIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"tokenOutIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amountOut\",\"type\":\"uint128\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"internalType\":\"struct IVault.SwapOut[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withdrawFromUserBalance\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"depositToUserBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IVault.FundManagement\",\"name\":\"funds\",\"type\":\"tuple\"}],\"name\":\"batchSwapGivenOut\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimUnaccountedForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investmentManager\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountToDivest\",\"type\":\"uint128\"}],\"name\":\"divestPoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serialized\",\"type\":\"bytes32\"}],\"name\":\"fromPoolId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"enum IVault.StrategyType\",\"name\":\"strategyType\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getInvestablePercentage\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getPoolIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IVault.StrategyType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getPoolTokenBalances\",\"outputs\":[{\"internalType\":\"uint128[]\",\"name\":\"\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTrustedOperatorReporters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTrustedOperators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalUnaccountedForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getTrustedOperatorReporters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getTrustedOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getUserOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getUserTokenBalance\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTotalOperators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investmentManager\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountToInvest\",\"type\":\"uint128\"}],\"name\":\"investPoolBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isPoolInvestmentManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"enum IVault.StrategyType\",\"name\":\"strategyType\",\"type\":\"uint8\"}],\"name\":\"newPool\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFlashLoanFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolSwapFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolWithdrawFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"investmentManager\",\"type\":\"address\"}],\"name\":\"rebalancePoolInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"totalAmounts\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint128[]\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"reportTrustedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokePoolInvestmentManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"percentage\",\"type\":\"uint128\"}],\"name\":\"setInvestablePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setPoolController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setProtocolFlashLoanFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setProtocolSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setProtocolWithdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"strategyType\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"poolIndex\",\"type\":\"uint32\"}],\"name\":\"toPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"poolId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amountInvested\",\"type\":\"uint128\"}],\"name\":\"updateInvested\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(bytes32,address,address[],uint128[],uint128[])\":{\"details\":\"Adds liquidity into a Pool. Can only be called by its controller. For each token, the Pool's balance will be increased by `totalAmounts[i]`. This is achieved by first transferring `amountsToTransfer[i]` tokens, and then withdrawing any amount remaining from User Balance. In both cases, the tokens will come from `from`. `from` must have granted allowance to the Vault, and the caller (Pool controller) must be an operator for `from`. If a token that was not previously in the Pool is granted balance by this function, it will become part of the Pool. This is the only way tokens can be added to a Pool.\"},\"authorizeOperator(address)\":{\"details\":\"Authorizes `operator` to act as an operator for the caller.\"},\"authorizeTrustedOperatorReporter(address)\":{\"details\":\"Authorizes `reporter` to call `reportTrustedOperator`. This is typically called on factory contracts. Can only be called by the admin.\"},\"batchSwapGivenIn((bytes32,uint128,uint128,uint128,bytes)[],address[],(address,address,bool,bool))\":{\"details\":\"Performs a series of swaps with one or multiple Pools. Each swap is validated and executed in order. However, tokens are only transferred in and out of the Vault (or withdrawn/deposited from User Balance) after all swaps have been validated and the net token balance change computed. This means it is possible to e.g. under certain conditions perform arbitrage by swapping with multiple Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in. The `diffs` array contains the addresses of all tokens involved in the swaps, along with how many tokens the caller expects to transfer into the Vault for each. Any tokens due to the Vault not included in this amount will be withdrawn from User Balance. The `swaps` array contains the information about each individual swaps. All swaps consist of a Pool receiving some amount of one of its tokens (`tokenIn`), and sending some amount of another one of its tokens (`tokenOut`). A swap cannot cause `tokenOut` to be fully drained. The Pools' Trading Strategies will validate each swap, possibly charging a swap fee on the amount going in. If so, the protocol will then charge the protocol swap fee to the Pool's own swap fee. Funds will be received according to the data in `fundsIn`, and sent according to `fundsOut`.\"},\"claimUnaccountedForTokens(address[],uint256[],address)\":{\"details\":\"Transfers to `recipient` the requested amounts of unnaccounted-for tokens. Can only be called by the admin.\"},\"deposit(address,uint128,address)\":{\"details\":\"Deposits tokens from the caller into `user`'s User Balance.\"},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"allows smartcontracts to access the liquidity of the vault within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com\",\"params\":{\"_amount\":\"the amount requested for this flashloan*\",\"_receiver\":\"The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.\",\"_token\":\"the address of the principal ERC-20 token\"}},\"getPoolController(bytes32)\":{\"details\":\"Returns a Pool's controller.\"},\"getPoolIds(uint256,uint256)\":{\"details\":\"Returns a partial list of Pool IDs, starting at index `start`, up to index `end`.\"},\"getPoolStrategy(bytes32)\":{\"details\":\"Returns a Pool's Trading Strategy and Trading Strategy Type.\"},\"getPoolTokenBalances(bytes32,address[])\":{\"details\":\"Returns the Pool's balance of `tokens`. This might be zero if the tokens are not in the Pool.\"},\"getPoolTokens(bytes32)\":{\"details\":\"Returns all tokens in the Pool (tokens for which the Pool has balance).\"},\"getTotalPools()\":{\"details\":\"Returns the number of Pools.\"},\"getTotalTrustedOperatorReporters()\":{\"details\":\"Returns the number of Trusted Operator Reporters.\"},\"getTotalTrustedOperators()\":{\"details\":\"Returns the number of Trusted Operators.\"},\"getTotalUnaccountedForTokens(address)\":{\"details\":\"Returns the number of unaccounted-for tokens for `token`.\"},\"getTrustedOperatorReporters(uint256,uint256)\":{\"details\":\"Returns a partial list of Trusted Operator Reporters, starting at index `start`, up to index `end`.\"},\"getTrustedOperators(uint256,uint256)\":{\"details\":\"Returns a partial list of Trusted Operators, starting at index `start`, up to index `end`.\"},\"getUserOperators(address,uint256,uint256)\":{\"details\":\"Returns a partial list of `user`'s operators, starting at index `start`, up to index `end`. This does not include `user` itself, nor Trusted Operators. The ordering of this list may change as operators are authorized and revoked.\"},\"getUserTokenBalance(address,address)\":{\"details\":\"Returns `user`'s User Balance for a specific token.\"},\"getUserTotalOperators(address)\":{\"details\":\"Returns the number of operators for `user`. This does not include `user` itself, nor Trusted Operators.\"},\"isOperatorFor(address,address)\":{\"details\":\"Returns true of `operator` is an operator for `user`.\"},\"newPool(address,uint8)\":{\"details\":\"Creates a new Pool with a Trading Strategy and Trading Strategy Type. The caller of this function becomes the Pool's controller. Returns the created Pool's ID. Also emits a PoolCreated event.\"},\"removeLiquidity(bytes32,address,address[],uint128[],uint128[])\":{\"details\":\"Removes liquidity from a Pool. Can only be called by its controller. For each token, the Pool's balance will be decreased by `totalAmounts[i]`. This is achieved by first transferring `amountsToTransfer[i]` tokens, and then depositing any amount remaining into User Balance. In both cases, the tokens are sent to `to`. Withdraw protocol fees are charged over any tokens transferred out. If a token that was previously in the Pool has all of its balance removed by this function, it will no longer be in the Pool. This is the only way tokens can be removed from a Pool.\"},\"reportTrustedOperator(address)\":{\"details\":\"Adds `operator` as a Trusted Operator. Can only be called by a Trusted Operator Reporter.\"},\"revokeOperator(address)\":{\"details\":\"Revokes `operator` so that it no longer is an operator for the caller. An account is always its own operator and cannot revoke itself. Trusted Operators also cannot be revoked.\"},\"setPoolController(bytes32,address)\":{\"details\":\"Sets a new controller for a Pool. Can only be called by its current controller.\"},\"withdraw(address,uint128,address)\":{\"details\":\"Withdraws tokens from the caller's User Balance, transferring them to `recipient`. Withdraw protocol fees are charged by this.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x938f2783ceb543ad266344cc5c420e1294026507081d6b7c2ec01b3303056265\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x79004a1d1471abe87e92c4497acba06d5dfa5b1f3e9894a0991a7c4669c5c02c\",\"license\":\"MIT\"},\"contracts/investmentManagers/IInvestmentManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\ninterface IInvestmentManager {\\n    function recordPoolInvestment(bytes32 poolId, uint128 tokensIn) external;\\n\\n    function recordPoolDivestment(bytes32 poolId, uint128 tokensIn) external;\\n}\\n\",\"keccak256\":\"0xea1d86e1cfdfcd8cb225f9e879a02b2d5dae68e12d4243feeb483518557adad4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint128 internal constant ONE = 10**18; // 18 decimal places\\n\\n    uint256 internal constant MIN_POW_BASE = 1 wei;\\n    uint256 internal constant MAX_POW_BASE = (2 * ONE) - 1 wei;\\n    uint256 internal constant POW_PRECISION = ONE / 10**10;\\n\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / ONE;\\n    }\\n\\n    function floor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * ONE;\\n    }\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        if (a > 0) {\\n            return uint256(a);\\n        } else {\\n            // TODO: check valid\\n            return uint256(-a);\\n        }\\n    }\\n\\n    function abs128(int128 a) internal pure returns (uint128) {\\n        if (a > 0) {\\n            return uint128(a);\\n        } else {\\n            // TODO: check valid\\n            return uint128(-a);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function add128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = subSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function subSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function sub128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        (uint128 c, bool flag) = subSign128(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function subSign128(uint128 a, uint128 b) internal pure returns (uint128, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (ONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / ONE;\\n        return c2;\\n    }\\n\\n    function mul128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint128 c1 = c0 + (ONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint128 c2 = c1 / ONE;\\n        return c2;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * ONE;\\n        require(a == 0 || c0 / a == ONE, \\\"ERR_DIV_INTERNAL\\\"); // mul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  add require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    function div128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint128 c0 = a * ONE;\\n        require(a == 0 || c0 / a == ONE, \\\"ERR_DIV_INTERNAL\\\"); // mul overflow\\n        uint128 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  add require\\n        uint128 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function powi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : ONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = mul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = mul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `powi` for `b^e` and `powK` for k iterations\\n    // of approximation of b^0.w\\n    function pow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_POW_BASE, \\\"ERR_POW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_POW_BASE, \\\"ERR_POW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = floor(exp);\\n        uint256 remain = sub(exp, whole);\\n\\n        uint256 wholePow = powi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = powApprox(base, remain, POW_PRECISION);\\n        return mul(wholePow, partialResult);\\n    }\\n\\n    function powApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = subSign(base, ONE);\\n        uint256 term = ONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * ONE;\\n            (uint256 c, bool cneg) = subSign(a, sub(bigK, ONE));\\n            term = mul(term, mul(c, x));\\n            term = div(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = sub(sum, term);\\n            } else {\\n                sum = add(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0xc28c991f829d87ad248480877a65411db805fb33db08817c5a60eb6fd348448c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/strategies/IPairTradingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITradingStrategy.sol\\\";\\n\\ninterface IPairTradingStrategy is ITradingStrategy {\\n    function quoteOutGivenIn(\\n        QuoteRequestGivenIn calldata request,\\n        uint128 currentBalanceTokenIn,\\n        uint128 currentBalanceTokenOut\\n    ) external returns (uint128 amountOut, uint128 amountInFees);\\n\\n    function quoteInGivenOut(\\n        QuoteRequestGivenOut calldata request,\\n        uint128 currentBalanceTokenIn,\\n        uint128 currentBalanceTokenOut\\n    ) external returns (uint128 amountIn, uint128 amountInFees);\\n}\\n\",\"keccak256\":\"0x7f49f268d184f736802cb17fc2fa95c34caabe86857346484888b860399f4cbc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/strategies/ITradingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITradingStrategy {\\n    // TODO: outdated docs, fix\\n    // This data structure represents a two tokens swap and is used by strategies for trade validation.\\n    // `from` is the origin address where the entering funds are coming from\\n    // `to` is the destination address where exiting funds are going to.\\n    // `tokenIn` and 'tokenOut' are the token increasing in funds and the token decreasing respectively.\\n    // `amountIn` and `amountOut` are the amount increased by `tokenIn`\\n    // and the amount decreased by `tokenOut`respectively.\\n    // `userData` is any extra data that the swap caller wants to send to the strategy to validate the swap.\\n    struct QuoteRequestGivenIn {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint128 amountIn;\\n        // Misc data\\n        bytes32 poolId;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    struct QuoteRequestGivenOut {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint128 amountOut;\\n        // Misc data\\n        bytes32 poolId;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0x9cbc082dc506bfbb4e3662c95db764742b5592af4831486983c4cf08b4c1bff5\",\"license\":\"GPL-3.0-or-later\"},\"contracts/strategies/ITupleTradingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./ITradingStrategy.sol\\\";\\n\\ninterface ITupleTradingStrategy is ITradingStrategy {\\n    function quoteOutGivenIn(\\n        QuoteRequestGivenIn calldata request,\\n        uint128[] calldata balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external returns (uint128 amountOut, uint128 amountInFees);\\n\\n    function quoteInGivenOut(\\n        QuoteRequestGivenOut calldata request,\\n        uint128[] calldata balances,\\n        uint256 indexIn,\\n        uint256 indexOut\\n    ) external returns (uint128 amountIn, uint128 amountInFees);\\n}\\n\",\"keccak256\":\"0x77d0fd4fcaf2a14649214efd96471a9ea24c350feaf30e8119f4f0b91bdb4bea\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../math/FixedPoint.sol\\\";\\n\\nimport \\\"../vendor/EnumerableSet.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./Settings.sol\\\";\\nimport \\\"./UserBalance.sol\\\";\\n\\nabstract contract Admin is IVault, Settings, UserBalance {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    address private _admin;\\n\\n    constructor(address admin) {\\n        _admin = admin;\\n    }\\n\\n    function admin() public view returns (address) {\\n        return _admin;\\n    }\\n\\n    function transferAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"Caller is not the admin\\\");\\n\\n        _admin = newAdmin;\\n    }\\n\\n    function setProtocolWithdrawFee(uint128 fee) external {\\n        require(msg.sender == _admin, \\\"Caller is not the admin\\\");\\n        _setProtocolWithdrawFee(fee);\\n    }\\n\\n    function setProtocolSwapFee(uint128 fee) external {\\n        require(msg.sender == _admin, \\\"Caller is not the admin\\\");\\n        _setProtocolSwapFee(fee);\\n    }\\n\\n    function setProtocolFlashLoanFee(uint128 fee) external {\\n        require(msg.sender == _admin, \\\"Caller is not the admin\\\");\\n        _setProtocolFlashLoanFee(fee);\\n    }\\n\\n    function authorizeTrustedOperatorReporter(address reporter) external override {\\n        require(msg.sender == _admin, \\\"Caller is not the admin\\\");\\n\\n        _trustedOperatorReporters.add(reporter);\\n    }\\n\\n    function claimUnaccountedForTokens(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external override {\\n        require(msg.sender == _admin, \\\"Caller is not the admin\\\");\\n        require(tokens.length == amounts.length, \\\"Tokens and amounts length mismatch\\\");\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            uint256 totalUnaccountedFor = getTotalUnaccountedForTokens(tokens[i]);\\n            require(totalUnaccountedFor >= amounts[i], \\\"Insufficient unaccounted for tokens\\\");\\n\\n            tokens[i].safeTransfer(recipient, amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fa57e4c8531a1a00e9044215958ae3b99b965daa8579a15fb6c4c961bc2664e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/FlashLoanProvider.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// This flash loan provider was based on the Aave protocol's open source\\n// implementation and terminology and interfaces are intentionally kept\\n// similar\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"../math/FixedPoint.sol\\\";\\nimport \\\"./IFlashLoanReceiver.sol\\\";\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./Settings.sol\\\";\\n\\nabstract contract FlashLoanProvider is IVault, Settings {\\n    using FixedPoint for uint256;\\n\\n    /**\\n     * @dev emitted when a flashloan is executed\\n     * @param _target the address of the flashLoanReceiver\\n     * @param _token the address of the ERC20 token\\n     * @param _amount the amount requested\\n     * @param _fee the fee on the amount\\n     * @param _timestamp the timestamp of the action\\n     **/\\n    event FlashLoan(address indexed _target, address indexed _token, uint256 _amount, uint256 _fee, uint256 _timestamp);\\n\\n    /**\\n     * @dev allows smartcontracts to access the liquidity of the vault within one transaction,\\n     * as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan\\n     * receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param _receiver The address of the contract receiving the funds. The receiver should implement the\\n     * IFlashLoanReceiver interface.\\n     * @param _token the address of the principal ERC-20 token\\n     * @param _amount the amount requested for this flashloan\\n     **/\\n    function flashLoan(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        bytes memory _params //TODO check for reentrancy\\n    ) external override {\\n        //check that the token has enough available liquidity\\n        uint256 availableLiquidityBefore = IERC20(_token).balanceOf(address(this));\\n\\n        require(availableLiquidityBefore >= _amount, \\\"There is not enough liquidity available to borrow\\\");\\n\\n        //calculate fee on amount\\n        uint256 amountFee = _calculateProtocolFlashLoanFee(_amount);\\n        require(amountFee > 0, \\\"The requested amount is too small for a flashLoan.\\\");\\n\\n        //get the FlashLoanReceiver instance\\n        IFlashLoanReceiver receiver = IFlashLoanReceiver(_receiver);\\n\\n        address payable userPayable = address(uint160(_receiver));\\n\\n        //transfer funds to the receiver\\n        IERC20(_token).transfer(userPayable, _amount);\\n\\n        //execute action of the receiver\\n        receiver.executeOperation(_token, _amount, amountFee, _params);\\n\\n        //check that the actual balance of the core contract includes the returned amount\\n        uint256 availableLiquidityAfter = IERC20(_token).balanceOf(address(this));\\n\\n        require(\\n            availableLiquidityAfter == availableLiquidityBefore.add(amountFee),\\n            \\\"The actual balance of the protocol is inconsistent\\\"\\n        );\\n\\n        emit FlashLoan(_receiver, _token, _amount, amountFee, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x1a38f529d7f43b98d5f7b8ed387e00295e476b8f9428753cff96740a87fb84b8\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/IFlashLoanReceiver.sol\":{\"content\":\"pragma solidity ^0.7.1;\\n\\n/**\\n * @title IFlashLoanReceiver interface\\n * @notice Interface for a recipient of a flash loan\\n * @author Aave\\n * @dev implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n **/\\ninterface IFlashLoanReceiver {\\n    function executeOperation(\\n        address _reserve,\\n        uint256 _amount,\\n        uint256 _fee,\\n        bytes calldata _params\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbfe3e4db3094dd79bb90acae6535d3fb83db0cabb8e9dfbab3a20e679de1e65d\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\npragma solidity ^0.7.1;\\n\\n// Full external interface for the Vault core contract - no external or public methods exist in the contract that don't\\n// override one of these declarations.\\ninterface IVault {\\n    // User Balance\\n\\n    /**\\n     * @dev Returns `user`'s User Balance for a specific token.\\n     */\\n    function getUserTokenBalance(address user, IERC20 token) external view returns (uint128);\\n\\n    /**\\n     * @dev Deposits tokens from the caller into `user`'s User Balance.\\n     */\\n    function deposit(\\n        IERC20 token,\\n        uint128 amount,\\n        address user\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws tokens from the caller's User Balance, transferring them to `recipient`. Withdraw protocol fees\\n     * are charged by this.\\n     */\\n    function withdraw(\\n        IERC20 token,\\n        uint128 amount,\\n        address recipient\\n    ) external;\\n\\n    // Operators\\n\\n    /**\\n     * @dev Authorizes `operator` to act as an operator for the caller.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revokes `operator` so that it no longer is an operator for the caller. An account is always its own operator\\n     * and cannot revoke itself. Trusted Operators also cannot be revoked.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns true of `operator` is an operator for `user`.\\n     */\\n    function isOperatorFor(address user, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the number of operators for `user`. This does not include `user` itself, nor Trusted Operators.\\n     */\\n    function getUserTotalOperators(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of `user`'s operators, starting at index `start`, up to index `end`. This does not\\n     * include `user` itself, nor Trusted Operators.\\n     *\\n     * The ordering of this list may change as operators are authorized and revoked.\\n     */\\n    function getUserOperators(\\n        address user,\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (address[] memory);\\n\\n    // Trusted operators\\n\\n    /**\\n     @dev Returns the number of Trusted Operators.\\n     */\\n    function getTotalTrustedOperators() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of Trusted Operators, starting at index `start`, up to index `end`.\\n     */\\n    function getTrustedOperators(uint256 start, uint256 end) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the number of Trusted Operator Reporters.\\n     */\\n    function getTotalTrustedOperatorReporters() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of Trusted Operator Reporters, starting at index `start`, up to index `end`.\\n     */\\n    function getTrustedOperatorReporters(uint256 start, uint256 end) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Adds `operator` as a Trusted Operator. Can only be called by a Trusted Operator Reporter.\\n     */\\n    function reportTrustedOperator(address operator) external;\\n\\n    // Pools\\n\\n    // There are two variants of Trading Strategies for Pools: Pair Trading Strategies, and Tuple Trading Strategies.\\n    // These require different data from the Vault, which is reflected in their differing interfaces\\n    // (IPairTradingStrategy and ITupleTradingStrategy, respectively).\\n    enum StrategyType { PAIR, TUPLE }\\n\\n    /**\\n     * @dev Creates a new Pool with a Trading Strategy and Trading Strategy Type. The caller of this function becomes\\n     * the Pool's controller.\\n     *\\n     * Returns the created Pool's ID. Also emits a PoolCreated event.\\n     */\\n    function newPool(address strategy, StrategyType strategyType) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is created by calling `newPool`. Contains the Pool ID of the created pool.\\n     */\\n    event PoolCreated(bytes32 poolId);\\n\\n    // Pool Queries\\n\\n    /**\\n     * @dev Returns the number of Pools.\\n     */\\n    function getTotalPools() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of Pool IDs, starting at index `start`, up to index `end`.\\n     */\\n    function getPoolIds(uint256 start, uint256 end) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns a Pool's controller.\\n     */\\n    function getPoolController(bytes32 poolId) external view returns (address);\\n\\n    /**\\n     * @dev Returns a Pool's Trading Strategy and Trading Strategy Type.\\n     */\\n    function getPoolStrategy(bytes32 poolId) external view returns (address, StrategyType);\\n\\n    /**\\n     * @dev Returns all tokens in the Pool (tokens for which the Pool has balance).\\n     */\\n    function getPoolTokens(bytes32 poolId) external view returns (IERC20[] memory);\\n\\n    /**\\n     * @dev Returns the Pool's balance of `tokens`. This might be zero if the tokens are not in the Pool.\\n     */\\n    function getPoolTokenBalances(bytes32 poolId, IERC20[] calldata tokens) external view returns (uint128[] memory);\\n\\n    function getInvestablePercentage(bytes32 poolId, IERC20 token) external view returns (uint128);\\n\\n    // Pool Management\\n\\n    /**\\n     * @dev Sets a new controller for a Pool. Can only be called by its current controller.\\n     */\\n    function setPoolController(bytes32 poolId, address controller) external;\\n\\n    function authorizePoolInvestmentManager(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address operator\\n    ) external;\\n\\n    function revokePoolInvestmentManager(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address operator\\n    ) external;\\n\\n    /**\\n     * @dev Adds liquidity into a Pool. Can only be called by its controller.\\n     *\\n     * For each token, the Pool's balance will be increased by `totalAmounts[i]`. This is achieved by first transferring\\n     * `amountsToTransfer[i]` tokens, and then withdrawing any amount remaining from User Balance. In both cases, the\\n     * tokens will come from `from`. `from` must have granted allowance to the Vault, and the caller (Pool controller)\\n     * must be an operator for `from`.\\n     *\\n     * If a token that was not previously in the Pool is granted balance by this function, it will become part of the\\n     * Pool. This is the only way tokens can be added to a Pool.\\n     */\\n    function addLiquidity(\\n        bytes32 poolId,\\n        address from,\\n        IERC20[] calldata tokens,\\n        uint128[] calldata totalAmounts,\\n        uint128[] calldata amountsToTransfer\\n    ) external;\\n\\n    /**\\n     * @dev Removes liquidity from a Pool. Can only be called by its controller.\\n     *\\n     * For each token, the Pool's balance will be decreased by `totalAmounts[i]`. This is achieved by first transferring\\n     * `amountsToTransfer[i]` tokens, and then depositing any amount remaining into User Balance. In both cases, the\\n     * tokens are sent to `to`. Withdraw protocol fees are charged over any tokens transferred out.\\n     *\\n     * If a token that was previously in the Pool has all of its balance removed by this function, it will no longer be\\n     * in the Pool. This is the only way tokens can be removed from a Pool.\\n     */\\n    function removeLiquidity(\\n        bytes32 poolId,\\n        address to,\\n        IERC20[] calldata tokens,\\n        uint128[] calldata totalAmounts,\\n        uint128[] calldata amountsToTransfer\\n    ) external;\\n\\n    // Trading interface\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. Each swap is validated and executed in order.\\n     * However, tokens are only transferred in and out of the Vault (or withdrawn/deposited from User Balance) after all\\n     * swaps have been validated and the net token balance change computed. This means it is possible to e.g. under\\n     * certain conditions perform arbitrage by swapping with multiple Pools in a way that results in net token movement\\n     * out of the Vault (profit), with no tokens being sent in.\\n     *\\n     * The `diffs` array contains the addresses of all tokens involved in the swaps, along with how many tokens the\\n     * caller expects to transfer into the Vault for each. Any tokens due to the Vault not included in this amount will\\n     * be withdrawn from User Balance.\\n     *\\n     * The `swaps` array contains the information about each individual swaps. All swaps consist of a Pool receiving\\n     * some amount of one of its tokens (`tokenIn`), and sending some amount of another one of its tokens (`tokenOut`).\\n     * A swap cannot cause `tokenOut` to be fully drained. The Pools' Trading Strategies will validate each swap,\\n     * possibly charging a swap fee on the amount going in. If so, the protocol will then charge the protocol swap fee\\n     * to the Pool's own swap fee.\\n     *\\n     * Funds will be received according to the data in `fundsIn`, and sent according to `fundsOut`.\\n     */\\n    function batchSwapGivenIn(\\n        SwapIn[] calldata swaps,\\n        IERC20[] memory tokens,\\n        FundManagement calldata funds\\n    ) external returns (int256[] memory vaultDeltas);\\n\\n    function batchSwapGivenOut(\\n        SwapOut[] calldata swaps,\\n        IERC20[] memory tokens,\\n        FundManagement calldata funds\\n    ) external returns (int256[] memory vaultDeltas);\\n\\n    // batchSwap helper data structures\\n\\n    // A batched swap is made up of a number of Swaps. Each swap indicates a token balance increasing (tokenIn) and one\\n    // decreasing (tokenOut) in a pool.\\n    // Indexes instead of token addresses to not perform lookup in the tokens array.\\n    struct SwapIn {\\n        bytes32 poolId;\\n        uint128 tokenInIndex;\\n        uint128 tokenOutIndex;\\n        uint128 amountIn;\\n        bytes userData;\\n    }\\n\\n    struct SwapOut {\\n        bytes32 poolId;\\n        uint128 tokenInIndex;\\n        uint128 tokenOutIndex;\\n        uint128 amountOut;\\n        bytes userData;\\n    }\\n\\n    // Funds in are received by `IERC20.transferFrom` from `withdrawFrom`. If received funds are not enough, they are\\n    // withdrawn from withdrawFrom's User Balance.\\n    // In any case, the caller must be an operator for withdrawFrom.\\n    // Funds out are deposited to recipient's User Balance, or transferred out if transferToRecipient is true.\\n    struct FundManagement {\\n        address sender;\\n        address recipient;\\n        bool withdrawFromUserBalance;\\n        bool depositToUserBalance;\\n    }\\n\\n    // Flash Loan interface\\n    function flashLoan(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        bytes memory _params //TODO check for reentrancy\\n    ) external;\\n\\n    // Investment interface\\n    function setInvestablePercentage(\\n        bytes32 poolId,\\n        IERC20 token,\\n        uint128 percentage\\n    ) external;\\n\\n    function updateInvested(\\n        bytes32 poolId,\\n        IERC20 token,\\n        uint128 amountInvested\\n    ) external;\\n\\n    // Unaccounted-for Tokens\\n\\n    /**\\n     * @dev Returns the number of unaccounted-for tokens for `token`.\\n     */\\n    function getTotalUnaccountedForTokens(IERC20 token) external view returns (uint256);\\n\\n    // Admin Controls\\n\\n    /**\\n     * @dev Authorizes `reporter` to call `reportTrustedOperator`. This is typically called on factory contracts. Can\\n     * only be called by the admin.\\n     */\\n    function authorizeTrustedOperatorReporter(address reporter) external;\\n\\n    /**\\n     * @dev Transfers to `recipient` the requested amounts of unnaccounted-for tokens. Can only be called by the admin.\\n     */\\n    function claimUnaccountedForTokens(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    // Missing here: setting protocol fees, changing admin\\n}\\n\",\"keccak256\":\"0xa441530f4d21f40ad0f6561af864fa6630fb71e87cf073894588cd37cd3097ff\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/PoolRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../vendor/EnumerableSet.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./VaultAccounting.sol\\\";\\nimport \\\"./UserBalance.sol\\\";\\nimport \\\"../investmentManagers/IInvestmentManager.sol\\\";\\n\\nabstract contract PoolRegistry is ReentrancyGuard, IVault, VaultAccounting, UserBalance {\\n    using EnumerableSet for EnumerableSet.BytesSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    using BalanceLib for BalanceLib.Balance;\\n\\n    using FixedPoint for uint128;\\n\\n    struct PoolStrategy {\\n        address strategy;\\n        StrategyType strategyType;\\n    }\\n\\n    // Set with all pools in the system\\n    // TODO do we need this? can pools be deleted? if not, an array should be good enough\\n    EnumerableSet.BytesSet internal _pools;\\n\\n    // The controller of a pool is the only account that can:\\n    //  - change the controller\\n    //  - change the trading strategy\\n    //  - add tokens\\n    //  - remove tokens\\n    // The creator of a pool is the initial controller.\\n    mapping(bytes32 => address) internal _poolController;\\n\\n    // Set with all tokens in a pool\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _poolTokens;\\n\\n    // Tokens in a pool have non-zero balances, which can be used as a shortcut to check\\n    // at once if a) a pool exists and b) a token is in that pool.\\n    mapping(bytes32 => mapping(IERC20 => BalanceLib.Balance)) internal _poolTokenBalance;\\n    // poolid => token => pool balance\\n\\n    modifier withExistingPool(bytes32 poolId) {\\n        require(_pools.contains(poolId), \\\"Inexistent pool\\\");\\n        _;\\n    }\\n\\n    // investable percentage per token\\n    mapping(bytes32 => mapping(IERC20 => uint128)) internal _investablePercentage;\\n\\n    // operators are allowed to use a pools tokens for an investment\\n    mapping(bytes32 => mapping(IERC20 => address)) private _poolInvestmentManagers;\\n\\n    event AuthorizedPoolInvestmentManager(bytes32 indexed poolId, IERC20 indexed token, address indexed operator);\\n    event RevokedPoolInvestmentManager(bytes32 indexed poolId, IERC20 indexed token, address indexed operator);\\n\\n    modifier onlyPoolController(bytes32 poolId) {\\n        require(_poolController[poolId] == msg.sender, \\\"Caller is not the pool controller\\\");\\n        _;\\n    }\\n\\n    function toPoolId(\\n        address strategy,\\n        uint16 strategyType,\\n        uint32 poolIndex\\n    ) public pure returns (bytes32) {\\n        uint256 serialized;\\n        serialized |= uint256(poolIndex) << (22 * 8);\\n        serialized |= uint256(strategyType) << (20 * 8);\\n        serialized |= uint256(strategy);\\n        return bytes32(serialized);\\n    }\\n\\n    function fromPoolId(bytes32 serialized) public pure returns (address strategy, StrategyType strategyType) {\\n        //|| 6 bytes empty | 4 bytes count of pools | 2 bytes strategyType | 20 bytes address ||\\n        strategy = address(uint256(serialized) & (2**(20 * 8) - 1));\\n        strategyType = StrategyType(uint256(serialized >> (20 * 8)) & (2**(2 * 8) - 1));\\n    }\\n\\n    function newPool(address strategy, StrategyType strategyType) external override returns (bytes32) {\\n        bytes32 poolId = toPoolId(strategy, uint16(strategyType), uint32(_pools.length()));\\n\\n        require(!_pools.contains(poolId), \\\"Pool ID already exists\\\");\\n        require(strategy != address(0), \\\"Strategy must be set\\\");\\n\\n        _pools.add(poolId);\\n        _poolController[poolId] = msg.sender;\\n\\n        emit PoolCreated(poolId);\\n\\n        return poolId;\\n    }\\n\\n    function getTotalPools() external view override returns (uint256) {\\n        return _pools.length();\\n    }\\n\\n    function getPoolIds(uint256 start, uint256 end) external view override returns (bytes32[] memory) {\\n        require((end >= start) && (end - start) <= _pools.length(), \\\"Bad indices\\\");\\n\\n        bytes32[] memory poolIds = new bytes32[](end - start);\\n        for (uint256 i = 0; i < poolIds.length; ++i) {\\n            poolIds[i] = _pools.at(i + start);\\n        }\\n\\n        return poolIds;\\n    }\\n\\n    function getPoolTokens(bytes32 poolId) external view override withExistingPool(poolId) returns (IERC20[] memory) {\\n        IERC20[] memory tokens = new IERC20[](_poolTokens[poolId].length());\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            tokens[i] = IERC20(_poolTokens[poolId].at(i));\\n        }\\n\\n        return tokens;\\n    }\\n\\n    function getPoolTokenBalances(bytes32 poolId, IERC20[] calldata tokens)\\n        external\\n        view\\n        override\\n        withExistingPool(poolId)\\n        returns (uint128[] memory)\\n    {\\n        uint128[] memory balances = new uint128[](tokens.length);\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            balances[i] = _poolTokenBalance[poolId][tokens[i]].total;\\n        }\\n\\n        return balances;\\n    }\\n\\n    function getPoolController(bytes32 poolId) external view override withExistingPool(poolId) returns (address) {\\n        return _poolController[poolId];\\n    }\\n\\n    function getPoolStrategy(bytes32 poolId)\\n        external\\n        view\\n        override\\n        withExistingPool(poolId)\\n        returns (address, StrategyType)\\n    {\\n        (address strategy, StrategyType strategyType) = fromPoolId(poolId);\\n        return (strategy, strategyType);\\n    }\\n\\n    function setPoolController(bytes32 poolId, address controller)\\n        external\\n        override\\n        nonReentrant\\n        withExistingPool(poolId)\\n        onlyPoolController(poolId)\\n    {\\n        _poolController[poolId] = controller;\\n    }\\n\\n    function addLiquidity(\\n        bytes32 poolId,\\n        address from,\\n        IERC20[] calldata tokens,\\n        uint128[] calldata totalAmounts,\\n        uint128[] calldata amountsToTransfer\\n    ) external override withExistingPool(poolId) onlyPoolController(poolId) {\\n        require(tokens.length == totalAmounts.length, \\\"Tokens and total amounts length mismatch\\\");\\n\\n        require(totalAmounts.length == amountsToTransfer.length, \\\"Amount arrays length mismatch\\\");\\n\\n        require(isOperatorFor(from, msg.sender), \\\"Caller is not operator\\\");\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            {\\n                // scope for received - avoids 'stack too deep' error\\n\\n                uint128 received = _pullTokens(tokens[i], from, amountsToTransfer[i]);\\n\\n                {\\n                    // scope for amountFromuserBalance - avoids 'stack too deep' error\\n\\n                    // This checks totalAmounts[i] >= amountsTransferred[i] (assuming amountsTransferred[i] >= received)\\n                    uint128 amountFromUserBalance = totalAmounts[i].sub128(received);\\n\\n                    if (amountFromUserBalance > 0) {\\n                        _userTokenBalance[from][tokens[i]] = _userTokenBalance[from][tokens[i]].sub128(\\n                            amountFromUserBalance\\n                        );\\n                    }\\n                }\\n            }\\n\\n            if (totalAmounts[i] > 0) {\\n                BalanceLib.Balance memory currentBalance = _poolTokenBalance[poolId][tokens[i]];\\n\\n                if (currentBalance.total == 0) {\\n                    // No tokens with zero balance should ever be in the _poolTokens set\\n                    assert(_poolTokens[poolId].add(address(tokens[i])));\\n                }\\n\\n                _poolTokenBalance[poolId][tokens[i]] = _poolTokenBalance[poolId][tokens[i]].increase(totalAmounts[i]);\\n            }\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        bytes32 poolId,\\n        address to,\\n        IERC20[] calldata tokens,\\n        uint128[] calldata totalAmounts,\\n        uint128[] calldata amountsToTransfer\\n    ) external override withExistingPool(poolId) onlyPoolController(poolId) {\\n        require(tokens.length == totalAmounts.length, \\\"Tokens and total amounts length mismatch\\\");\\n\\n        require(totalAmounts.length == amountsToTransfer.length, \\\"Amount arrays length mismatch\\\");\\n\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            require(_poolTokens[poolId].contains(address(tokens[i])), \\\"Token not in pool\\\");\\n\\n            // This asserts  totalAmounts[i] >= amountsToTransfer[i]\\n            uint128 amountToUserBalance = totalAmounts[i].sub128(amountsToTransfer[i]);\\n\\n            _pushTokens(tokens[i], to, amountsToTransfer[i], true);\\n\\n            if (amountToUserBalance > 0) {\\n                _userTokenBalance[to][tokens[i]] = _userTokenBalance[to][tokens[i]].add128(amountToUserBalance);\\n            }\\n\\n            _poolTokenBalance[poolId][tokens[i]] = _poolTokenBalance[poolId][tokens[i]].decrease(totalAmounts[i]);\\n\\n            if (_poolTokenBalance[poolId][tokens[i]].total == 0) {\\n                _poolTokens[poolId].remove(address(tokens[i]));\\n            }\\n        }\\n    }\\n\\n    function getInvestablePercentage(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        override\\n        withExistingPool(poolId)\\n        returns (uint128)\\n    {\\n        return _investablePercentage[poolId][token];\\n    }\\n\\n    function setInvestablePercentage(\\n        bytes32 poolId,\\n        IERC20 token,\\n        uint128 percentage\\n    ) external override nonReentrant withExistingPool(poolId) onlyPoolController(poolId) {\\n        require(percentage <= FixedPoint.ONE, \\\"Percentage must be between 0 and 100%\\\");\\n        _investablePercentage[poolId][token] = percentage;\\n    }\\n\\n    function authorizePoolInvestmentManager(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address operator\\n    ) external override onlyPoolController(poolId) {\\n        require(\\n            _poolInvestmentManagers[poolId][token] == address(0) ||\\n                _poolTokenBalance[poolId][token].cash == _poolTokenBalance[poolId][token].total,\\n            \\\"Cannot set a new investment manager with outstanding investment\\\"\\n        );\\n        _poolInvestmentManagers[poolId][token] = operator;\\n        emit AuthorizedPoolInvestmentManager(poolId, token, operator);\\n    }\\n\\n    function revokePoolInvestmentManager(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address operator\\n    ) external override onlyPoolController(poolId) {\\n        require(\\n            _poolInvestmentManagers[poolId][token] != address(0) &&\\n                _poolTokenBalance[poolId][token].cash == _poolTokenBalance[poolId][token].total,\\n            \\\"Cannot remove an investment manager with outstanding investment\\\"\\n        );\\n\\n        delete _poolInvestmentManagers[poolId][token];\\n        emit RevokedPoolInvestmentManager(poolId, token, operator);\\n    }\\n\\n    modifier onlyPoolInvestmentManager(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address operator\\n    ) {\\n        require(isPoolInvestmentManager(poolId, token, operator), \\\"Only pool investment operator\\\");\\n        _;\\n    }\\n\\n    function isPoolInvestmentManager(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address operator\\n    ) public view returns (bool) {\\n        return _poolInvestmentManagers[poolId][token] == operator;\\n    }\\n\\n    // Investments\\n    // how the investment manager receives more tokens to invest\\n    // callable by anyone\\n    function investPoolBalance(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address investmentManager,\\n        uint128 amountToInvest // must be less than total allowed\\n    ) public onlyPoolInvestmentManager(poolId, token, investmentManager) {\\n        uint128 targetUtilization = _investablePercentage[poolId][token];\\n        uint128 targetInvestableAmount = _poolTokenBalance[poolId][token].total.mul128(targetUtilization);\\n\\n        uint128 investedAmount = _poolTokenBalance[poolId][token].invested();\\n\\n        require(\\n            investedAmount.add128(amountToInvest) <= targetInvestableAmount,\\n            \\\"over investment amount - cannot invest\\\"\\n        );\\n\\n        _poolTokenBalance[poolId][token].cash = _poolTokenBalance[poolId][token].cash.sub128(amountToInvest);\\n\\n        _pushTokens(token, investmentManager, amountToInvest, false);\\n        IInvestmentManager(investmentManager).recordPoolInvestment(poolId, amountToInvest);\\n    }\\n\\n    function divestPoolBalance(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address investmentManager,\\n        uint128 amountToDivest // must be less than total allowed\\n    ) public onlyPoolInvestmentManager(poolId, token, investmentManager) {\\n        uint128 targetUtilization = _investablePercentage[poolId][token];\\n        uint128 targetInvestableAmount = _poolTokenBalance[poolId][token].total.mul128(targetUtilization);\\n        uint128 investedAmount = _poolTokenBalance[poolId][token].invested();\\n        require(\\n            investedAmount.sub128(amountToDivest) >= targetInvestableAmount,\\n            \\\"under investment amount - cannot divest\\\"\\n        );\\n\\n        _poolTokenBalance[poolId][token].cash = _poolTokenBalance[poolId][token].cash.add128(amountToDivest);\\n\\n        // think about what happens with tokens that charge a transfer fee\\n        _pullTokens(token, investmentManager, amountToDivest);\\n        IInvestmentManager(investmentManager).recordPoolDivestment(poolId, amountToDivest);\\n    }\\n\\n    function rebalancePoolInvestment(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address investmentManager\\n    ) public onlyPoolInvestmentManager(poolId, token, investmentManager) {\\n        uint128 targetUtilization = _investablePercentage[poolId][token];\\n        uint128 targetInvestableAmount = _poolTokenBalance[poolId][token].total.mul128(targetUtilization);\\n        uint128 investedAmount = _poolTokenBalance[poolId][token].invested();\\n\\n        if (targetInvestableAmount > investedAmount) {\\n            uint128 amountToInvest = targetInvestableAmount.sub128(investedAmount);\\n            _poolTokenBalance[poolId][token].cash = _poolTokenBalance[poolId][token].cash.sub128(amountToInvest);\\n\\n            _pushTokens(token, investmentManager, amountToInvest, false);\\n            IInvestmentManager(investmentManager).recordPoolInvestment(poolId, amountToInvest);\\n        } else if (targetInvestableAmount < investedAmount) {\\n            uint128 amountToDivest = investedAmount.sub128(targetInvestableAmount);\\n            _poolTokenBalance[poolId][token].cash = _poolTokenBalance[poolId][token].cash.add128(amountToDivest);\\n\\n            // think about what happens with tokens that charge a transfer fee\\n            _pullTokens(token, investmentManager, amountToDivest);\\n            IInvestmentManager(investmentManager).recordPoolDivestment(poolId, amountToDivest);\\n        } else {\\n            revert(\\\"Pool balance is already balanced between cash and investment\\\");\\n        }\\n    }\\n\\n    // how the investment manager updates the value of invested tokens to the curves knowledge\\n    function updateInvested(\\n        bytes32 poolId,\\n        IERC20 token,\\n        uint128 amountInvested\\n    ) public override onlyPoolInvestmentManager(poolId, token, msg.sender) {\\n        _poolTokenBalance[poolId][token].total = amountInvested.add128(_poolTokenBalance[poolId][token].cash);\\n    }\\n}\\n\",\"keccak256\":\"0xe81bfcded9731f45c1f9493652ef0d8a64205fb5398ed3d0b4275363c39de36d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/Settings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../math/FixedPoint.sol\\\";\\nimport \\\"./IVault.sol\\\";\\n\\n// solhint-disable var-name-mixedcase\\n\\nabstract contract Settings is IVault {\\n    using FixedPoint for uint256;\\n    using FixedPoint for uint128;\\n\\n    // Protocol fees: these are charged as unaccounted for tokens, and can therefore be claimed and distributed by the\\n    // system admin.\\n\\n    // The withdraw fee is charged whenever tokens exit the vault (except in the case of swaps), and is a\\n    // percentage of the tokens exiting\\n    uint128 private _protocolWithdrawFee;\\n\\n    // The swap fee is charged whenever a swap occurs, and is a percentage of the fee charged by the trading strategy.\\n    // The Vault relies on the trading strategy being honest and reporting the actuall fee it charged.\\n    uint128 private _protocolSwapFee;\\n\\n    uint128 private immutable _MAX_PROTOCOL_WITHDRAW_FEE = FixedPoint.ONE.mul128(2).div128(100); // 0.02 (2%)\\n\\n    // The flash loan fee is charged whenever a flash loan occurs, and is a percentage of the tokens lent\\n    uint256 private _protocolFlashLoanFee;\\n\\n    uint128 private immutable _MAX_PROTOCOL_SWAP_FEE = FixedPoint.ONE.mul128(50).div128(100); // 0.5 (50%)\\n\\n    uint256 private immutable _MAX_PROTOCOL_FLASH_LOAN_FEE = FixedPoint.ONE.mul128(50).div128(100); // 0.5 (50%)\\n\\n    function _setProtocolWithdrawFee(uint128 newFee) internal {\\n        require(newFee <= _MAX_PROTOCOL_WITHDRAW_FEE, \\\"Withdraw fee too high\\\");\\n        _protocolWithdrawFee = newFee;\\n    }\\n\\n    function protocolWithdrawFee() public view returns (uint128) {\\n        return _protocolWithdrawFee;\\n    }\\n\\n    function _applyProtocolWithdrawFee(uint128 amount) internal view returns (uint128) {\\n        uint128 fee = amount.mul128(_protocolWithdrawFee);\\n        return amount.sub128(fee);\\n    }\\n\\n    function _setProtocolSwapFee(uint128 newFee) internal {\\n        require(newFee <= _MAX_PROTOCOL_SWAP_FEE, \\\"Swap fee too high\\\");\\n        _protocolSwapFee = newFee;\\n    }\\n\\n    function protocolSwapFee() public view returns (uint128) {\\n        return _protocolSwapFee;\\n    }\\n\\n    function _calculateProtocolSwapFee(uint128 swapFeeAmount) internal view returns (uint128) {\\n        return swapFeeAmount.mul128(_protocolSwapFee);\\n    }\\n\\n    function _setProtocolFlashLoanFee(uint256 newFee) internal {\\n        require(newFee <= _MAX_PROTOCOL_FLASH_LOAN_FEE, \\\"FlashLoan fee too high\\\");\\n        _protocolFlashLoanFee = newFee;\\n    }\\n\\n    function protocolFlashLoanFee() public view returns (uint256) {\\n        return _protocolFlashLoanFee;\\n    }\\n\\n    function _calculateProtocolFlashLoanFee(uint256 swapFeeAmount) internal view returns (uint256) {\\n        return swapFeeAmount.mul(_protocolFlashLoanFee);\\n    }\\n}\\n\",\"keccak256\":\"0x9464b45518500feb6a4aabe8fd83b6780347db27acd9c93c16cef0aa15d6ea7e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/Swaps.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../vendor/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\nimport \\\"../math/FixedPoint.sol\\\";\\n\\nimport \\\"../strategies/ITradingStrategy.sol\\\";\\nimport \\\"../strategies/IPairTradingStrategy.sol\\\";\\nimport \\\"../strategies/ITupleTradingStrategy.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./VaultAccounting.sol\\\";\\nimport \\\"./PoolRegistry.sol\\\";\\nimport \\\"./UserBalance.sol\\\";\\n\\nabstract contract Swaps is ReentrancyGuard, IVault, VaultAccounting, UserBalance, PoolRegistry {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using BalanceLib for BalanceLib.Balance;\\n    using FixedPoint for uint256;\\n    using FixedPoint for uint128;\\n    using SafeCast for uint256;\\n    using SafeCast for uint128;\\n\\n    // Despite the external API having two separate functions for given in and given out, internally their are handled\\n    // together to avoid unnecessary code duplication. This enum indicates which kind of swap we're processing.\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    // This struct is identical in layout to SwapIn and SwapOut, except the 'amountIn/Out' field is named 'amount'.\\n    struct SwapInternal {\\n        bytes32 poolId;\\n        uint128 tokenInIndex;\\n        uint128 tokenOutIndex;\\n        uint128 amount;\\n        bytes userData;\\n    }\\n\\n    function batchSwapGivenIn(\\n        SwapIn[] memory swaps,\\n        IERC20[] memory tokens,\\n        FundManagement memory funds\\n    ) external override returns (int256[] memory) {\\n        return _batchSwap(_toInternalSwap(swaps), tokens, funds, SwapKind.GIVEN_IN);\\n    }\\n\\n    function batchSwapGivenOut(\\n        SwapOut[] memory swaps,\\n        IERC20[] memory tokens,\\n        FundManagement memory funds\\n    ) external override returns (int256[] memory) {\\n        return _batchSwap(_toInternalSwap(swaps), tokens, funds, SwapKind.GIVEN_OUT);\\n    }\\n\\n    // We use inline assembly to cast from the external struct types to the internal one. This doesn't trigger any\\n    // conversions or runtime analysis: it is just coercing the type system to reinterpret the data as another type.\\n\\n    function _toInternalSwap(SwapIn[] memory swapsIn) private pure returns (SwapInternal[] memory swapsInternal) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            swapsInternal := swapsIn\\n        }\\n    }\\n\\n    function _toInternalSwap(SwapOut[] memory swapsOut) private pure returns (SwapInternal[] memory swapsInternal) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            swapsInternal := swapsOut\\n        }\\n    }\\n\\n    // This struct is identical in layout to QuoteRequestGivenIn and QuoteRequestGivenIn from ITradingStrategy, except\\n    // the 'amountIn/Out' is named 'amount'.\\n    struct QuoteRequestInternal {\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint128 amount;\\n        bytes32 poolId;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n\\n    // We use inline assembly to cast from the internal struct type to the external ones, depending on the swap kind.\\n    // This doesn't trigger any conversions or runtime analysis: it is just coercing the type system to reinterpret the\\n    // data as another type.\\n\\n    function _toQuoteGivenIn(QuoteRequestInternal memory requestInternal)\\n        private\\n        pure\\n        returns (ITradingStrategy.QuoteRequestGivenIn memory requestGivenIn)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            requestGivenIn := requestInternal\\n        }\\n    }\\n\\n    function _toQuoteGivenOut(QuoteRequestInternal memory requestInternal)\\n        private\\n        pure\\n        returns (ITradingStrategy.QuoteRequestGivenOut memory requestGivenOut)\\n    {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            requestGivenOut := requestInternal\\n        }\\n    }\\n\\n    function _batchSwap(\\n        SwapInternal[] memory swaps,\\n        IERC20[] memory tokens,\\n        FundManagement memory funds,\\n        SwapKind kind\\n    ) private nonReentrant returns (int256[] memory) {\\n        //TODO: avoid reentrancy\\n\\n        // Any net token amount going into the Vault will be taken from `funds.sender`, so they must have\\n        // approved the caller to use their funds.\\n        require(isOperatorFor(funds.sender, msg.sender), \\\"Caller is not operator\\\");\\n\\n        int256[] memory tokenDeltas = new int256[](tokens.length);\\n\\n        // Contains the swap protocol fees charged for each token\\n        uint128[] memory tokenSwapProtocolFees = new uint128[](tokens.length);\\n\\n        LastSwapData memory previous;\\n        SwapInternal memory swap;\\n\\n        // Steps 1, 2 & 3:\\n        //  - check swaps are valid\\n        //  - update pool balances\\n        //  - accumulate token diffs\\n        for (uint256 i = 0; i < swaps.length; ++i) {\\n            swap = swaps[i];\\n\\n            (uint128 amountIn, uint128 amountOut, uint128 protocolSwapFee) = _swapWithPool(\\n                tokens,\\n                swap,\\n                funds.sender,\\n                funds.recipient,\\n                previous,\\n                kind\\n            );\\n\\n            // 3: Accumulate token diffs\\n            tokenDeltas[swap.tokenInIndex] += amountIn;\\n            tokenDeltas[swap.tokenOutIndex] -= amountOut;\\n\\n            // 3b: Accumulate token swap protocol fees\\n            tokenSwapProtocolFees[swap.tokenInIndex] = tokenSwapProtocolFees[swap.tokenInIndex].add128(protocolSwapFee);\\n        }\\n\\n        // Step 4: Receive tokens due to the Vault, withdrawing missing amounts from User Balance\\n        // Step 5: Send tokens due to the recipient\\n        // Step 6: Deduct swap protocol swap fees from the Vault's balance - this makes them unaccounted-for\\n        for (uint256 i = 0; i < tokens.length; ++i) {\\n            IERC20 token = tokens[i];\\n\\n            if (tokenDeltas[i] > 0) {\\n                uint128 toReceive = uint128(tokenDeltas[i]);\\n\\n                if (funds.withdrawFromUserBalance) {\\n                    uint128 toWithdraw = uint128(Math.min(_userTokenBalance[funds.sender][token], toReceive));\\n\\n                    _userTokenBalance[funds.sender][token] -= toWithdraw;\\n                    toReceive -= toWithdraw;\\n                }\\n\\n                uint128 received = _pullTokens(token, funds.sender, toReceive);\\n                require(received == toReceive, \\\"Not enough tokens received\\\");\\n            } else {\\n                // Make delta positive\\n                uint128 toSend = uint128(-tokenDeltas[i]);\\n\\n                if (funds.depositToUserBalance) {\\n                    // Deposit tokens to the recipient's User Balance - the Vault's balance doesn't change\\n                    _userTokenBalance[funds.recipient][token] = _userTokenBalance[funds.recipient][token].add128(\\n                        toSend\\n                    );\\n                } else {\\n                    // Actually transfer the tokens to the recipient\\n                    _pushTokens(token, funds.recipient, toSend, false);\\n                }\\n            }\\n\\n            _vaultTokenBalance[token] = _vaultTokenBalance[token].decrease(tokenSwapProtocolFees[i]);\\n        }\\n\\n        return tokenDeltas;\\n    }\\n\\n    // This struct helps implement the multihop logic: if the amount given is not provided for a swap, then the token\\n    // given must match the previous token quoted, and the previous amount quoted becomes the new amount given.\\n    // For swaps of kind given in, amount in and token in are given, while amount out and token out quoted.\\n    // For swaps of kind given out, amount out and token out are given, while amount in and token in quoted.\\n    struct LastSwapData {\\n        IERC20 tokenQuoted;\\n        uint128 amountQuoted;\\n    }\\n\\n    function _tokenGiven(\\n        SwapKind kind,\\n        IERC20 tokenIn,\\n        IERC20 tokenOut\\n    ) private pure returns (IERC20) {\\n        return kind == SwapKind.GIVEN_IN ? tokenIn : tokenOut;\\n    }\\n\\n    function _tokenQuoted(\\n        SwapKind kind,\\n        IERC20 tokenIn,\\n        IERC20 tokenOut\\n    ) private pure returns (IERC20) {\\n        return kind == SwapKind.GIVEN_IN ? tokenOut : tokenIn;\\n    }\\n\\n    function _getAmounts(\\n        SwapKind kind,\\n        uint128 amountGiven,\\n        uint128 amountQuoted\\n    ) private pure returns (uint128 amountIn, uint128 amountOut) {\\n        if (kind == SwapKind.GIVEN_IN) {\\n            (amountIn, amountOut) = (amountGiven, amountQuoted);\\n        } else {\\n            (amountIn, amountOut) = (amountQuoted, amountGiven);\\n        }\\n    }\\n\\n    function _swapWithPool(\\n        IERC20[] memory tokens,\\n        SwapInternal memory swap,\\n        address from,\\n        address to,\\n        LastSwapData memory previous,\\n        SwapKind kind\\n    )\\n        private\\n        returns (\\n            uint128 amountIn,\\n            uint128 amountOut,\\n            uint128 protocolSwapFee\\n        )\\n    {\\n        IERC20 tokenIn = tokens[swap.tokenInIndex];\\n        IERC20 tokenOut = tokens[swap.tokenOutIndex];\\n        require(tokenIn != tokenOut, \\\"Swap for same token\\\");\\n\\n        uint128 amountGiven = swap.amount;\\n        if (amountGiven == 0) {\\n            require(previous.tokenQuoted != IERC20(0), \\\"Unknown amount in on first swap\\\");\\n            require(previous.tokenQuoted == _tokenGiven(kind, tokenIn, tokenOut), \\\"Misconstructed multihop swap\\\");\\n\\n            amountGiven = previous.amountQuoted;\\n        }\\n\\n        QuoteRequestInternal memory request = QuoteRequestInternal({\\n            tokenIn: tokenIn,\\n            tokenOut: tokenOut,\\n            amount: amountGiven,\\n            poolId: swap.poolId,\\n            from: from,\\n            to: to,\\n            userData: swap.userData\\n        });\\n\\n        uint128 amountQuoted;\\n        (amountQuoted, protocolSwapFee) = _processQuoteRequest(request, kind);\\n\\n        previous.tokenQuoted = _tokenQuoted(kind, tokenIn, tokenOut);\\n        previous.amountQuoted = amountQuoted;\\n\\n        (amountIn, amountOut) = _getAmounts(kind, amountGiven, amountQuoted);\\n    }\\n\\n    function _processQuoteRequest(QuoteRequestInternal memory request, SwapKind kind)\\n        private\\n        returns (uint128 amountQuoted, uint128 protocolSwapFee)\\n    {\\n        (address strategy, StrategyType strategyType) = fromPoolId(request.poolId);\\n\\n        BalanceLib.Balance memory tokenInFinalBalance;\\n        BalanceLib.Balance memory tokenOutFinalBalance;\\n\\n        if (strategyType == StrategyType.PAIR) {\\n            (\\n                tokenInFinalBalance,\\n                tokenOutFinalBalance,\\n                amountQuoted,\\n                protocolSwapFee\\n            ) = _processPairTradingStrategyQuoteRequest(request, IPairTradingStrategy(strategy), kind);\\n        } else if (strategyType == StrategyType.TUPLE) {\\n            (\\n                tokenInFinalBalance,\\n                tokenOutFinalBalance,\\n                amountQuoted,\\n                protocolSwapFee\\n            ) = _processTupleTradingStrategyQuoteRequest(request, ITupleTradingStrategy(strategy), kind);\\n        } else {\\n            revert(\\\"Unknown strategy type\\\");\\n        }\\n\\n        // 2: Update Pool balances - these have been deducted the swap protocol fees\\n        _poolTokenBalance[request.poolId][request.tokenIn] = tokenInFinalBalance;\\n        _poolTokenBalance[request.poolId][request.tokenOut] = tokenOutFinalBalance;\\n    }\\n\\n    function _processPairTradingStrategyQuoteRequest(\\n        QuoteRequestInternal memory request,\\n        IPairTradingStrategy strategy,\\n        SwapKind kind\\n    )\\n        private\\n        returns (\\n            BalanceLib.Balance memory poolTokenInBalance,\\n            BalanceLib.Balance memory poolTokenOutBalance,\\n            uint128,\\n            uint128 protocolSwapFee\\n        )\\n    {\\n        poolTokenInBalance = _poolTokenBalance[request.poolId][request.tokenIn];\\n        require(poolTokenInBalance.total > 0, \\\"Token A not in pool\\\");\\n\\n        poolTokenOutBalance = _poolTokenBalance[request.poolId][request.tokenOut];\\n        require(poolTokenOutBalance.total > 0, \\\"Token B not in pool\\\");\\n\\n        if (kind == SwapKind.GIVEN_IN) {\\n            (uint128 amountOut, uint128 tokenInFeeAmount) = strategy.quoteOutGivenIn(\\n                _toQuoteGivenIn(request),\\n                poolTokenInBalance.total,\\n                poolTokenOutBalance.total\\n            );\\n\\n            protocolSwapFee = _calculateProtocolSwapFee(tokenInFeeAmount);\\n\\n            return (\\n                poolTokenInBalance.increase(request.amount.sub128(protocolSwapFee)),\\n                poolTokenOutBalance.decrease(amountOut),\\n                amountOut,\\n                protocolSwapFee\\n            );\\n        } else {\\n            (uint128 amountIn, uint128 tokenInFeeAmount) = strategy.quoteInGivenOut(\\n                _toQuoteGivenOut(request),\\n                poolTokenInBalance.total,\\n                poolTokenOutBalance.total\\n            );\\n\\n            protocolSwapFee = _calculateProtocolSwapFee(tokenInFeeAmount);\\n\\n            return (\\n                poolTokenInBalance.increase(amountIn.sub128(protocolSwapFee)),\\n                poolTokenOutBalance.decrease(request.amount),\\n                amountIn,\\n                protocolSwapFee\\n            );\\n        }\\n    }\\n\\n    // TODO: Temporary struct to workaround stack-too-deep: remove once #73 is implemented\\n    struct Helper {\\n        uint256 indexIn;\\n        uint256 indexOut;\\n    }\\n\\n    function _processTupleTradingStrategyQuoteRequest(\\n        QuoteRequestInternal memory request,\\n        ITupleTradingStrategy strategy,\\n        SwapKind kind\\n    )\\n        private\\n        returns (\\n            BalanceLib.Balance memory poolTokenInBalance,\\n            BalanceLib.Balance memory poolTokenOutBalance,\\n            uint128,\\n            uint128 protocolSwapFee\\n        )\\n    {\\n        uint128[] memory currentBalances = new uint128[](_poolTokens[request.poolId].length());\\n\\n        Helper memory helper;\\n\\n        for (uint256 i = 0; i < _poolTokens[request.poolId].length(); i++) {\\n            IERC20 token = IERC20(_poolTokens[request.poolId].at(i));\\n            BalanceLib.Balance memory balance = _poolTokenBalance[request.poolId][token];\\n\\n            currentBalances[i] = balance.total;\\n\\n            if (token == request.tokenIn) {\\n                helper.indexIn = i;\\n                poolTokenInBalance = balance;\\n            } else if (token == request.tokenOut) {\\n                helper.indexOut = i;\\n                poolTokenOutBalance = balance;\\n            }\\n        }\\n\\n        require(poolTokenInBalance.total > 0, \\\"Token A not in pool\\\");\\n        require(poolTokenOutBalance.total > 0, \\\"Token B not in pool\\\");\\n\\n        if (kind == SwapKind.GIVEN_IN) {\\n            (uint128 amountOut, uint128 tokenInFeeAmount) = strategy.quoteOutGivenIn(\\n                _toQuoteGivenIn(request),\\n                currentBalances,\\n                helper.indexIn,\\n                helper.indexOut\\n            );\\n\\n            protocolSwapFee = _calculateProtocolSwapFee(tokenInFeeAmount);\\n\\n            return (\\n                poolTokenInBalance.increase(request.amount.sub128(protocolSwapFee)),\\n                poolTokenOutBalance.decrease(amountOut),\\n                amountOut,\\n                protocolSwapFee\\n            );\\n        } else {\\n            (uint128 amountIn, uint128 tokenInFeeAmount) = strategy.quoteInGivenOut(\\n                _toQuoteGivenOut(request),\\n                currentBalances,\\n                helper.indexIn,\\n                helper.indexOut\\n            );\\n\\n            protocolSwapFee = _calculateProtocolSwapFee(tokenInFeeAmount);\\n\\n            return (\\n                poolTokenInBalance.increase(amountIn.sub128(protocolSwapFee)),\\n                poolTokenOutBalance.decrease(request.amount),\\n                amountIn,\\n                protocolSwapFee\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd17be86d48f12909e29030c54e5fc8e7aee5fbe85eb5019f609fe0b584bb848c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/UserBalance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"../vendor/EnumerableSet.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./VaultAccounting.sol\\\";\\n\\nimport \\\"../math/FixedPoint.sol\\\";\\n\\nabstract contract UserBalance is IVault, VaultAccounting {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using FixedPoint for uint128;\\n\\n    mapping(address => mapping(IERC20 => uint128)) internal _userTokenBalance; // user -> token -> user balance\\n\\n    // Operators are allowed to use a user's tokens in a swap\\n    mapping(address => EnumerableSet.AddressSet) private _userOperators;\\n\\n    // Trusted operators are operators for all users, without needing to be authorized. Trusted operators cannot be\\n    // revoked.\\n    EnumerableSet.AddressSet private _trustedOperators;\\n\\n    // Trusted operators reporters can report new trusted operators\\n    EnumerableSet.AddressSet internal _trustedOperatorReporters;\\n\\n    event Deposited(address indexed depositor, address indexed user, IERC20 indexed token, uint128 amount);\\n\\n    event Withdrawn(address indexed user, address indexed recipient, IERC20 indexed token, uint128 amount);\\n\\n    event AuthorizedOperator(address indexed user, address indexed operator);\\n    event RevokedOperator(address indexed user, address indexed operator);\\n\\n    event AuthorizedTrustedOperator(address indexed operator);\\n\\n    function getUserTokenBalance(address user, IERC20 token) public view override returns (uint128) {\\n        return _userTokenBalance[user][token];\\n    }\\n\\n    function deposit(\\n        IERC20 token,\\n        uint128 amount,\\n        address user\\n    ) external override {\\n        // Pulling from the sender - no need to check for operators\\n        uint128 received = _pullTokens(token, msg.sender, amount);\\n\\n        // TODO: check overflow\\n        _userTokenBalance[user][token] = _userTokenBalance[user][token].add128(received);\\n        emit Deposited(msg.sender, user, token, received);\\n    }\\n\\n    function withdraw(\\n        IERC20 token,\\n        uint128 amount,\\n        address recipient\\n    ) external override {\\n        require(_userTokenBalance[msg.sender][token] >= amount, \\\"Vault: withdraw amount exceeds balance\\\");\\n\\n        _userTokenBalance[msg.sender][token] -= amount;\\n        _pushTokens(token, recipient, amount, true);\\n\\n        emit Withdrawn(msg.sender, recipient, token, amount);\\n    }\\n\\n    function authorizeOperator(address operator) external override {\\n        if (_userOperators[msg.sender].add(operator)) {\\n            emit AuthorizedOperator(msg.sender, operator);\\n        }\\n    }\\n\\n    function revokeOperator(address operator) external override {\\n        if (_userOperators[msg.sender].remove(operator)) {\\n            emit RevokedOperator(msg.sender, operator);\\n        }\\n    }\\n\\n    function isOperatorFor(address user, address operator) public view override returns (bool) {\\n        return (user == operator) || _trustedOperators.contains(operator) || _userOperators[user].contains(operator);\\n    }\\n\\n    function getUserTotalOperators(address user) external view override returns (uint256) {\\n        return _userOperators[user].length();\\n    }\\n\\n    function getUserOperators(\\n        address user,\\n        uint256 start,\\n        uint256 end\\n    ) external view override returns (address[] memory) {\\n        require((end >= start) && (end - start) <= _userOperators[user].length(), \\\"Bad indices\\\");\\n\\n        // Ideally we'd use a native implemenation: see\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2390\\n        address[] memory operators = new address[](end - start);\\n\\n        for (uint256 i = 0; i < operators.length; ++i) {\\n            operators[i] = _userOperators[user].at(i + start);\\n        }\\n\\n        return operators;\\n    }\\n\\n    function getTotalTrustedOperators() external view override returns (uint256) {\\n        return _trustedOperators.length();\\n    }\\n\\n    function getTrustedOperators(uint256 start, uint256 end) external view override returns (address[] memory) {\\n        require((end >= start) && (end - start) <= _trustedOperators.length(), \\\"Bad indices\\\");\\n\\n        // Ideally we'd use a native implemenation: see\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2390\\n        address[] memory operators = new address[](end - start);\\n\\n        for (uint256 i = 0; i < operators.length; ++i) {\\n            operators[i] = _trustedOperators.at(i + start);\\n        }\\n\\n        return operators;\\n    }\\n\\n    function getTotalTrustedOperatorReporters() external view override returns (uint256) {\\n        return _trustedOperatorReporters.length();\\n    }\\n\\n    function getTrustedOperatorReporters(uint256 start, uint256 end) external view override returns (address[] memory) {\\n        require((end >= start) && (end - start) <= _trustedOperatorReporters.length(), \\\"Bad indices\\\");\\n\\n        // Ideally we'd use a native implemenation: see\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/issues/2390\\n        address[] memory operatorReporters = new address[](end - start);\\n\\n        for (uint256 i = 0; i < operatorReporters.length; ++i) {\\n            operatorReporters[i] = _trustedOperatorReporters.at(i + start);\\n        }\\n\\n        return operatorReporters;\\n    }\\n\\n    function reportTrustedOperator(address operator) external override {\\n        require(_trustedOperatorReporters.contains(msg.sender), \\\"Caller is not trusted operator reporter\\\");\\n\\n        if (_trustedOperators.add(operator)) {\\n            emit AuthorizedTrustedOperator(operator);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x057ac0f61bfe1526188b0a45bf2c6f885ab1f55cfa36b096162f6c9682d8aa51\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./Settings.sol\\\";\\nimport \\\"./VaultAccounting.sol\\\";\\nimport \\\"./UserBalance.sol\\\";\\nimport \\\"./PoolRegistry.sol\\\";\\nimport \\\"./FlashLoanProvider.sol\\\";\\nimport \\\"./Settings.sol\\\";\\nimport \\\"./Swaps.sol\\\";\\nimport \\\"./Admin.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n\\ncontract Vault is IVault, Settings, VaultAccounting, UserBalance, PoolRegistry, FlashLoanProvider, Swaps, Admin {\\n    constructor(address _admin) Admin(_admin) {}\\n}\\n\",\"keccak256\":\"0x8d0ac6eaaad15b09755b840da148fba311ece657b4120ea5ad9a966d9b1c9068\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/VaultAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\nimport \\\"../math/FixedPoint.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./Settings.sol\\\";\\n\\nlibrary BalanceLib {\\n    using FixedPoint for uint128;\\n\\n    // This data structure is used to represent a token's balance for a Pool. 'cash' is how many tokens the Pool has\\n    // sitting inside of the Vault. 'total' is always larger or equal to 'cash', and represents the Pool's total token\\n    // balance, including tokens that are *not* inside of the Vault.\\n    //\\n    // Cash and total are updated in concordance whenever tokens are added/removed from a Pool, except when interacting\\n    // with the Pool's Investment Manager. The Investment Manager updates the new 'total' value (according to its own)\\n    // internal logic, which the Vault uses when validating swaps with the Pool's Trading Strategy, as well as returns\\n    // profits by returning invested 'cash'.\\n    //\\n    // The Vault disallows the Pool's 'cash' ever becoming negative, in other words, it can never use any tokens that\\n    // are not inside of the Vault.\\n    struct Balance {\\n        uint128 cash;\\n        uint128 total;\\n    }\\n\\n    /**\\n     * @dev The number of invested assets. This is simply the difference between 'total' and 'cash' - the Vault has no\\n     * insights into how the assets are used by the Investment Manager.\\n     */\\n    function invested(Balance memory self) internal pure returns (uint128) {\\n        return self.total - self.cash;\\n    }\\n\\n    /**\\n     * @dev Increases a Pool's balance. Called when tokens are added to the Pool (except from the Investment Manager).\\n     */\\n    function increase(Balance memory self, uint128 amount) internal pure returns (Balance memory) {\\n        return Balance({ cash: self.cash.add128(amount), total: self.total.add128(amount) });\\n    }\\n\\n    /**\\n     * @dev Decreases a Pool's balance. Called when tokens are removed from the Pool (except to the Investment Manager).\\n     */\\n    function decrease(Balance memory self, uint128 amount) internal pure returns (Balance memory) {\\n        return Balance({ cash: self.cash.sub128(amount), total: self.total.sub128(amount) });\\n    }\\n}\\n\\nabstract contract VaultAccounting is IVault, Settings {\\n    using BalanceLib for BalanceLib.Balance;\\n    using FixedPoint for uint256;\\n    using FixedPoint for uint128;\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // The Vault's accounted-for balance for each token. This should always be equal to the sum of all User Balance\\n    // tokens, plus all 'cash' of all Pools.\\n    // TODO: make this uint128 and not Balance, since it consists exclusively of 'cash'.\\n    mapping(IERC20 => BalanceLib.Balance) internal _vaultTokenBalance; // token -> vault balance\\n\\n    function getTotalUnaccountedForTokens(IERC20 token) public view override returns (uint256) {\\n        uint256 totalBalance = token.balanceOf(address(this));\\n        assert(totalBalance >= _vaultTokenBalance[token].cash);\\n\\n        return totalBalance - _vaultTokenBalance[token].cash;\\n    }\\n\\n    /**\\n     * @dev Transfers tokens into the Vault from `from`. The caller must verify that this action was authorized by\\n     * `from` (typically by the entry-point function being called by an operator for `from`).\\n     *\\n     * The number of tokens received are measured as a delta, by calling `IERC20.balanceOf` before and after the\\n     * transfer. This means tokens with a transfer fee are supported. The number of tokens received is returned.\\n     */\\n    function _pullTokens(\\n        IERC20 token,\\n        address from,\\n        uint128 amount\\n    ) internal returns (uint128) {\\n        if (amount == 0) {\\n            return 0;\\n        }\\n\\n        uint256 currentBalance = token.balanceOf(address(this));\\n\\n        token.safeTransferFrom(from, address(this), amount);\\n\\n        uint256 newBalance = token.balanceOf(address(this));\\n\\n        uint128 received = newBalance.sub(currentBalance).toUint128();\\n\\n        _vaultTokenBalance[token] = _vaultTokenBalance[token].increase(received);\\n\\n        return received;\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from the Vault to `to`. If `chargeFee` is true, a withdrawal fee will be charged as\\n     * unaccounted-for tokens.\\n     */\\n    function _pushTokens(\\n        IERC20 token,\\n        address to,\\n        uint128 amount,\\n        bool chargeFee\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        _vaultTokenBalance[token] = _vaultTokenBalance[token].decrease(amount);\\n\\n        uint128 amountToSend = chargeFee ? _applyProtocolWithdrawFee(amount) : amount;\\n\\n        token.safeTransfer(to, amountToSend);\\n    }\\n}\\n\",\"keccak256\":\"0x2f865cd2f1a56d89256756f457ca74fb7811cfe4902a9567ba13c13ed9bfe380\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vendor/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// Based on the EnumerableSet library from OpenZeppelin contracts, altered to include\\n// a set for bytes32.\\n// See https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2395\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`BytesSet`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // BytesSet\\n\\n    struct BytesSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(BytesSet storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(BytesSet storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(BytesSet storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(BytesSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(BytesSet storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x2e45dfb86a2534de0fedb64b00b3b34cc0bc5df3f8ee59c4d38a41bd24b51fc4\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.8.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xd3f9eb69241af8de5174a6cfa3da3cbc94e351dee495002d8675b665865ba417\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052620000536064620000366002670de0b6b3a76400006001600160801b03166200012960201b62002b531790919060201c565b6001600160801b0316620001f560201b62002c0e1790919060201c565b608090811b6001600160801b03191690526200008b606462000036670de0b6b3a7640000603262000129602090811b62002b5317901c565b60801b6001600160801b03191660a052620000c2606462000036670de0b6b3a7640000603262000129602090811b62002b5317901c565b6001600160801b031660c052348015620000db57600080fd5b506040516200608838038062006088833981016040819052620000fe91620002ed565b6001600055601180546001600160a01b0319166001600160a01b039290921691909117905562000397565b60008282026001600160801b0384161580620001725750826001600160801b0316846001600160801b0316826001600160801b0316816200016657fe5b046001600160801b0316145b6200019a5760405162461bcd60e51b8152600401620001919062000347565b60405180910390fd5b6706f05b59d3b2000081016001600160801b038083169082161015620001d45760405162461bcd60e51b8152600401620001919062000347565b6000670de0b6b3a76400006001600160801b0383165b049695505050505050565b60006001600160801b038216620002205760405162461bcd60e51b8152600401620001919062000371565b670de0b6b3a764000083026001600160801b0384161580620002685750670de0b6b3a76400006001600160801b03858116908316816200025c57fe5b046001600160801b0316145b620002875760405162461bcd60e51b815260040162000191906200031d565b600060026001600160801b0385160482019050816001600160801b0316816001600160801b03161015620002cf5760405162461bcd60e51b815260040162000191906200031d565b6000846001600160801b0316826001600160801b031681620001ea57fe5b600060208284031215620002ff578081fd5b81516001600160a01b038116811462000316578182fd5b9392505050565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b60805160801c60a05160801c60c051615cbe620003ca600039806137d35250806131b052508061313c5250615cbe6000f3fe608060405234801561001057600080fd5b50600436106102305760003560e01c80630feae83614610235578063105988f61461024a57806314d5bc7d14610273578063150e9201146102865780631561d316146102a757806318c1496d146102ba57806323eeca01146102cd5780632c250d2c146102ed5780632f1139541461030057806335abcd891461031357806336cf0d081461032657806339fc9fde1461033b5780633cd80de31461034e5780633dc60c5b146103615780635af40f78146103745780635cffe9de146103875780636b141c811461039a5780636feec229146103ba57806373f8fd4b146103cd57806375829def146103e05780637fac59d6146103f357806380f2dd021461041357806381158ad9146104265780638ad8f318146104465780638d56ec93146104595780638daf7dc81461046c578063959b8c3f1461047f5780639b53422f14610492578063a6520fe8146104a5578063b06459b5146104b8578063b7b0ef93146104c0578063bb141ca3146104c8578063bb7972ae146104db578063bf79c946146104ee578063c018e8aa14610501578063c4ff170914610509578063d3ffe67a1461051c578063d4782a5114610524578063d4c173e014610537578063d95b63711461054a578063de22f4b71461055d578063ea82e22814610570578063eb1192c314610583578063f68b998f14610596578063f851a4401461059e578063f94d4668146105a6578063fad8b32a146105b9578063fe8f2cb2146105cc575b600080fd5b610248610243366004614b12565b6105ec565b005b61025d610258366004614ade565b6106fc565b60405161026a9190615068565b60405180910390f35b61025d610281366004614ea4565b6107fa565b610299610294366004614c1f565b6108c9565b60405161026a92919061500a565b6102486102b5366004614c5b565b6108f0565b6102486102c8366004614d8b565b610d51565b6102e06102db366004614ea4565b610f59565b60405161026a91906150b5565b6102996102fb366004614c1f565b611011565b61024861030e366004614e13565b611055565b610248610321366004614e42565b61114e565b61032e611184565b60405161026a9190615b95565b610248610349366004614ddd565b611193565b61025d61035c366004614ea4565b611296565b61024861036f366004614e42565b61135b565b610248610382366004614ddd565b61138e565b6102486103953660046149db565b611438565b6103ad6103a8366004614d55565b6116f2565b60405161026a9190615100565b6102486103c8366004614d55565b61171f565b61032e6103db366004614a44565b611843565b6102486103ee366004614987565b611877565b610406610401366004614c1f565b6118c3565b60405161026a9190614fb9565b61032e610421366004614c37565b61190a565b610439610434366004614a56565b611967565b60405161026a919061510b565b6102e0610454366004614b92565b611a3d565b610439610467366004614987565b611a5c565b61024861047a366004614987565b611b34565b61024861048d366004614987565b611b6d565b6102486104a0366004614d55565b611bc4565b6104396104b3366004614a86565b611ebe565b61032e611ee8565b610439611efe565b6102486104d6366004614c37565b611f04565b6102486104e9366004614d8b565b611fc0565b6104396104fc366004614987565b612186565b6104396121a7565b610248610517366004614d55565b6121b8565b6104396122da565b6102e0610532366004614b92565b6122e6565b610248610545366004614c5b565b6122fd565b6103ad6105583660046149a3565b61271f565b61024861056b366004614e42565b61276f565b61024861057e366004614e13565b6127ab565b610248610591366004614987565b61287f565b6104396128ec565b6104066128f8565b61025d6105b4366004614c1f565b612907565b6102486105c7366004614987565b6129e5565b6105df6105da366004614d0c565b612a3c565b60405161026a91906150ed565b6011546001600160a01b0316331461061f5760405162461bcd60e51b815260040161061690615779565b60405180910390fd5b83821461063e5760405162461bcd60e51b81526004016106169061536f565b60005b848110156106f457600061066f87878481811061065a57fe5b90506020020160208101906104679190614987565b905084848381811061067d57fe5b905060200201358110156106a35760405162461bcd60e51b815260040161061690615ae6565b6106eb838686858181106106b357fe5b905060200201358989868181106106c657fe5b90506020020160208101906106db9190614987565b6001600160a01b03169190612cfa565b50600101610641565b505050505050565b606082821015801561073057506001600160a01b038416600090815260056020526040902061072a90612d55565b83830311155b61074c5760405162461bcd60e51b8152600401610616906158c8565b60608383036001600160401b038111801561076657600080fd5b50604051908082528060200260200182016040528015610790578160200160208202803683370190505b50905060005b81518110156107ef576001600160a01b03861660009081526005602052604090206107c390828701612d60565b8282815181106107cf57fe5b6001600160a01b0390921660209283029190910190910152600101610796565b5090505b9392505050565b606082821015801561081757506108116006612d55565b83830311155b6108335760405162461bcd60e51b8152600401610616906158c8565b60608383036001600160401b038111801561084d57600080fd5b50604051908082528060200260200182016040528015610877578160200160208202803683370190505b50905060005b81518110156108bf576108936006828701612d60565b82828151811061089f57fe5b6001600160a01b039092166020928302919091019091015260010161087d565b5090505b92915050565b6001600160a01b038116600061ffff60a084901c1660018111156108e957fe5b9050915091565b876108fc600a82612d6c565b6109185760405162461bcd60e51b815260040161061690615201565b6000898152600c602052604090205489906001600160a01b031633146109505760405162461bcd60e51b815260040161061690615415565b86851461096f5760405162461bcd60e51b815260040161061690615552565b84831461098e5760405162461bcd60e51b8152600401610616906156eb565b610998893361271f565b6109b45760405162461bcd60e51b815260040161061690615669565b60005b87811015610d44576000610a0c8a8a848181106109d057fe5b90506020020160208101906109e59190614987565b8c8888868181106109f257fe5b9050602002016020810190610a079190614e42565b612d78565b90506000610a44828a8a86818110610a2057fe5b9050602002016020810190610a359190614e42565b6001600160801b031690612f69565b90506001600160801b03811615610b30576001600160a01b038c166000908152600460205260408120610abe918391908e8e88818110610a8057fe5b9050602002016020810190610a959190614987565b6001600160a01b031681526020810191909152604001600020546001600160801b031690612f69565b6001600160a01b038d166000908152600460205260408120908d8d87818110610ae357fe5b9050602002016020810190610af89190614987565b6001600160a01b03168152602081019190915260400160002080546001600160801b0319166001600160801b03929092169190911790555b50506000878783818110610b4057fe5b9050602002016020810190610b559190614e42565b6001600160801b03161115610d3c57610b6c614684565b60008c8152600e60205260408120908b8b85818110610b8757fe5b9050602002016020810190610b9c9190614987565b6001600160a01b0316815260208082019290925260409081016000208151808301909252546001600160801b038082168352600160801b909104169181018290529150610c2157610c1b8a8a84818110610bf257fe5b9050602002016020810190610c079190614987565b60008e8152600d6020526040902090612f9a565b610c2157fe5b610cbd888884818110610c3057fe5b9050602002016020810190610c459190614e42565b60008e8152600e60205260408120908d8d87818110610c6057fe5b9050602002016020810190610c759190614987565b6001600160a01b0316815260208082019290925260409081016000208151808301909252546001600160801b038082168352600160801b909104169181019190915290612faf565b60008d8152600e60205260408120908c8c86818110610cd857fe5b9050602002016020810190610ced9190614987565b6001600160a01b031681526020808201929092526040016000208251815493909201516001600160801b03908116600160801b029281166001600160801b031990941693909317909216179055505b6001016109b7565b5050505050505050505050565b838383610d5f8383836116f2565b610d7b5760405162461bcd60e51b815260040161061690615835565b6000878152600f602090815260408083206001600160a01b038a16808552908352818420548b8552600e845282852091855292528220546001600160801b039182169291610dd191600160801b90041683612b53565b60008a8152600e602090815260408083206001600160a01b038d16845282528083208151808301909252546001600160801b038082168352600160801b909104169181019190915291925090610e2690613018565b90506001600160801b0380831690610e4090831689613024565b6001600160801b03161115610e675760405162461bcd60e51b8152600401610616906152b5565b60008a8152600e602090815260408083206001600160a01b038d168452909152902054610e9d906001600160801b031688612f69565b60008b8152600e602090815260408083206001600160a01b038e168452909152812080546001600160801b0319166001600160801b039390931692909217909155610eed908a908a908a90613055565b60405163353d3aef60e01b81526001600160a01b0389169063353d3aef90610f1b908d908b90600401615114565b600060405180830381600087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b5050505050505050505050505050565b6060828210158015610f765750610f70600a612d55565b83830311155b610f925760405162461bcd60e51b8152600401610616906158c8565b60608383036001600160401b0381118015610fac57600080fd5b50604051908082528060200260200182016040528015610fd6578160200160208202803683370190505b50905060005b81518110156108bf57610ff2600a828701612d60565b828281518110610ffe57fe5b6020908102919091010152600101610fdc565b60008082611020600a82612d6c565b61103c5760405162461bcd60e51b815260040161061690615201565b600080611048866108c9565b9095509350505050915091565b3360009081526004602090815260408083206001600160a01b03871684529091529020546001600160801b03808416911610156110a45760405162461bcd60e51b81526004016106169061522a565b3360009081526004602090815260408083206001600160a01b0387168452909152902080546001600160801b03808216859003166001600160801b03199091161790556110f48382846001613055565b826001600160a01b0316816001600160a01b0316336001600160a01b03167fa3e61fe8acce189666029aee3e5bb4d10746d1558d76b8564f6765a16d0725b8856040516111419190615b95565b60405180910390a4505050565b6011546001600160a01b031633146111785760405162461bcd60e51b815260040161061690615779565b6111818161313a565b50565b6001546001600160801b031690565b600260005414156111b65760405162461bcd60e51b815260040161061690615a55565b6002600055826111c7600a82612d6c565b6111e35760405162461bcd60e51b815260040161061690615201565b6000848152600c602052604090205484906001600160a01b0316331461121b5760405162461bcd60e51b815260040161061690615415565b670de0b6b3a76400006001600160801b038416111561124c5760405162461bcd60e51b815260040161061690615270565b50506000928352600f602090815260408085206001600160a01b0394909416855292905290822080546001600160801b0319166001600160801b0390921691909117905560019055565b60608282101580156112b357506112ad6008612d55565b83830311155b6112cf5760405162461bcd60e51b8152600401610616906158c8565b60608383036001600160401b03811180156112e957600080fd5b50604051908082528060200260200182016040528015611313578160200160208202803683370190505b50905060005b81518110156108bf5761132f6008828701612d60565b82828151811061133b57fe5b6001600160a01b0390921660209283029190910190910152600101611319565b6011546001600160a01b031633146113855760405162461bcd60e51b815260040161061690615779565b611181816131ae565b82823361139c8383836116f2565b6113b85760405162461bcd60e51b815260040161061690615835565b6000868152600e602090815260408083206001600160a01b03891684529091529020546113f1906001600160801b038681169116613024565b6000968752600e602090815260408089206001600160a01b0390981689529690529490952080546001600160801b03958616600160801b0295169490941790935550505050565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190611467903090600401614fb9565b60206040518083038186803b15801561147f57600080fd5b505afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b79190614e8c565b9050828110156114d95760405162461bcd60e51b8152600401610616906151b0565b60006114e48461321f565b9050600081116115065760405162461bcd60e51b815260040161061690615699565b60405163a9059cbb60e01b8152869081906001600160a01b0388169063a9059cbb906115389084908a90600401614fcd565b602060405180830381600087803b15801561155257600080fd5b505af1158015611566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158a9190614c03565b50604051631dd0e4ab60e31b81526001600160a01b0383169063ee872558906115bd908a908a9088908b90600401615031565b600060405180830381600087803b1580156115d757600080fd5b505af11580156115eb573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b038a1691506370a082319061161e903090600401614fb9565b60206040518083038186803b15801561163657600080fd5b505afa15801561164a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166e9190614e8c565b905061167a8585613236565b81146116985760405162461bcd60e51b815260040161061690615500565b876001600160a01b0316896001600160a01b03167fea9aac78e0e48af4897630506e75b1ddba28503b58e70fe7bd92bce4f6efde7c8987426040516116df93929190615ba9565b60405180910390a3505050505050505050565b60009283526010602090815260408085206001600160a01b03948516865290915290922054811691161490565b6000838152600c602052604090205483906001600160a01b031633146117575760405162461bcd60e51b815260040161061690615415565b60008481526010602090815260408083206001600160a01b0387811685529252909120541615806117bc57506000848152600e602090815260408083206001600160a01b0387168452909152902054600160801b81046001600160801b039081169116145b6117d85760405162461bcd60e51b815260040161061690615456565b60008481526010602090815260408083206001600160a01b038781168086529190935281842080546001600160a01b031916938716938417905590519192909187917f293bd9bcd163a008da869f64fc5e12158b1e8cd908aab3f05296624b6c08bf1991a450505050565b6001600160a01b0391821660009081526004602090815260408083209390941682529190915220546001600160801b031690565b6011546001600160a01b031633146118a15760405162461bcd60e51b815260040161061690615779565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6000816118d1600a82612d6c565b6118ed5760405162461bcd60e51b815260040161061690615201565b50506000908152600c60205260409020546001600160a01b031690565b600082611918600a82612d6c565b6119345760405162461bcd60e51b815260040161061690615201565b50506000918252600f602090815260408084206001600160a01b039390931684529190529020546001600160801b031690565b6000806119848484600181111561197a57fe5b6104b3600a612d55565b9050611991600a82612d6c565b156119ae5760405162461bcd60e51b81526004016106169061560b565b6001600160a01b0384166119d45760405162461bcd60e51b81526004016106169061563b565b6119df600a8261325b565b506000818152600c60205260409081902080546001600160a01b03191633179055517f76c4350174727086805a3b026998a38a23dec4eaa173f2eb5449eb961e69c04390611a2e90839061510b565b60405180910390a19392505050565b6060611a54611a4b85613267565b8484600161326a565b949350505050565b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611a8b9190614fb9565b60206040518083038186803b158015611aa357600080fd5b505afa158015611ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adb9190614e8c565b6001600160a01b0384166000908152600360205260409020549091506001600160801b0316811015611b0957fe5b6001600160a01b0383166000908152600360205260409020546001600160801b031690039050919050565b6011546001600160a01b03163314611b5e5760405162461bcd60e51b815260040161061690615779565b611b69600882612f9a565b5050565b336000908152600560205260409020611b869082612f9a565b15611181576040516001600160a01b0382169033907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b828282611bd28383836116f2565b611bee5760405162461bcd60e51b815260040161061690615835565b6000868152600f602090815260408083206001600160a01b038916808552908352818420548a8552600e845282852091855292528220546001600160801b039182169291611c4491600160801b90041683612b53565b6000898152600e602090815260408083206001600160a01b038c16845282528083208151808301909252546001600160801b038082168352600160801b909104169181019190915291925090611c9990613018565b9050806001600160801b0316826001600160801b03161115611db9576000611cca6001600160801b03841683612f69565b60008b8152600e602090815260408083206001600160a01b038e168452909152902054909150611d03906001600160801b031682612f69565b60008b8152600e602090815260408083206001600160a01b038e168452909152812080546001600160801b0319166001600160801b039390931692909217909155611d53908a908a908490613055565b60405163353d3aef60e01b81526001600160a01b0389169063353d3aef90611d81908d908590600401615114565b600060405180830381600087803b158015611d9b57600080fd5b505af1158015611daf573d6000803e3d6000fd5b5050505050611eb3565b806001600160801b0316826001600160801b03161015611e9b576000611de86001600160801b03831684612f69565b60008b8152600e602090815260408083206001600160a01b038e168452909152902054909150611e21906001600160801b031682613024565b60008b8152600e602090815260408083206001600160a01b038e168452909152902080546001600160801b0319166001600160801b0392909216919091179055611e6c898983612d78565b506040516319a2259b60e31b81526001600160a01b0389169063cd112cd890611d81908d908590600401615114565b60405162461bcd60e51b81526004016106169061586c565b505050505050505050565b60b01b63ffffffff60b01b1660a09190911b61ffff60a01b16176001600160a01b03919091161790565b600154600160801b90046001600160801b031690565b60025490565b60026000541415611f275760405162461bcd60e51b815260040161061690615a55565b600260005581611f38600a82612d6c565b611f545760405162461bcd60e51b815260040161061690615201565b6000838152600c602052604090205483906001600160a01b03163314611f8c5760405162461bcd60e51b815260040161061690615415565b50506000918252600c6020526040822080546001600160a01b0319166001600160a01b039290921691909117905560019055565b838383611fce8383836116f2565b611fea5760405162461bcd60e51b815260040161061690615835565b6000878152600f602090815260408083206001600160a01b038a16808552908352818420548b8552600e845282852091855292528220546001600160801b03918216929161204091600160801b90041683612b53565b60008a8152600e602090815260408083206001600160a01b038d16845282528083208151808301909252546001600160801b038082168352600160801b90910416918101919091529192509061209590613018565b90506001600160801b03808316906120af90831689612f69565b6001600160801b031610156120d65760405162461bcd60e51b8152600401610616906155c4565b60008a8152600e602090815260408083206001600160a01b038d16845290915290205461210c906001600160801b031688613024565b60008b8152600e602090815260408083206001600160a01b038e168452909152902080546001600160801b0319166001600160801b0392909216919091179055612157898989612d78565b506040516319a2259b60e31b81526001600160a01b0389169063cd112cd890610f1b908d908b90600401615114565b6001600160a01b03811660009081526005602052604081206108c390612d55565b60006121b36008612d55565b905090565b6000838152600c602052604090205483906001600160a01b031633146121f05760405162461bcd60e51b815260040161061690615415565b60008481526010602090815260408083206001600160a01b038781168552925290912054161580159061225757506000848152600e602090815260408083206001600160a01b0387168452909152902054600160801b81046001600160801b039081169116145b6122735760405162461bcd60e51b815260040161061690615924565b60008481526010602090815260408083206001600160a01b038088168086529190935281842080546001600160a01b0319169055905191851692909187917ff06fdd8b5faff2b5f5288a691e9dbbe565e7f445d6fc266a6795c97089e8e7ba91a450505050565b60006121b3600a612d55565b6060611a546122f485613267565b8484600061326a565b87612309600a82612d6c565b6123255760405162461bcd60e51b815260040161061690615201565b6000898152600c602052604090205489906001600160a01b0316331461235d5760405162461bcd60e51b815260040161061690615415565b86851461237c5760405162461bcd60e51b815260040161061690615552565b84831461239b5760405162461bcd60e51b8152600401610616906156eb565b60005b87811015610d44576123de8989838181106123b557fe5b90506020020160208101906123ca9190614987565b60008d8152600d6020526040902090613750565b6123fa5760405162461bcd60e51b815260040161061690615abb565b600061242c86868481811061240b57fe5b90506020020160208101906124209190614e42565b898985818110610a2057fe5b905061247b8a8a8481811061243d57fe5b90506020020160208101906124529190614987565b8c88888681811061245f57fe5b90506020020160208101906124749190614e42565b6001613055565b6001600160801b03811615612565576001600160a01b038b1660009081526004602052604081206124f3918391908d8d878181106124b557fe5b90506020020160208101906124ca9190614987565b6001600160a01b031681526020810191909152604001600020546001600160801b031690613024565b6001600160a01b038c166000908152600460205260408120908c8c8681811061251857fe5b905060200201602081019061252d9190614987565b6001600160a01b03168152602081019190915260400160002080546001600160801b0319166001600160801b03929092169190911790555b61260188888481811061257457fe5b90506020020160208101906125899190614e42565b60008e8152600e60205260408120908d8d878181106125a457fe5b90506020020160208101906125b99190614987565b6001600160a01b0316815260208082019290925260409081016000208151808301909252546001600160801b038082168352600160801b909104169181019190915290613765565b60008d8152600e60205260408120908c8c8681811061261c57fe5b90506020020160208101906126319190614987565b6001600160a01b031681526020808201929092526040908101600090812084518154958501516001600160801b03199096166001600160801b03918216178116600160801b9190961602949094179093558e8352600e9091528120908b8b8581811061269957fe5b90506020020160208101906126ae9190614987565b6001600160a01b03168152602081019190915260400160002054600160801b90046001600160801b0316612716576127148a8a848181106126eb57fe5b90506020020160208101906127009190614987565b60008e8152600d60205260409020906137bc565b505b5060010161239e565b6000816001600160a01b0316836001600160a01b031614806127475750612747600683613750565b806107f357506001600160a01b03831660009081526005602052604090206107f39083613750565b6011546001600160a01b031633146127995760405162461bcd60e51b815260040161061690615779565b611181816001600160801b03166137d1565b60006127b8843385612d78565b6001600160a01b038084166000908152600460209081526040808320938916835292905220549091506127f4906001600160801b031682613024565b6001600160a01b038381166000818152600460209081526040808320948a16808452949091529081902080546001600160801b0319166001600160801b039590951694909417909355915190919033907f1afb0bb546173e6a0cfd9a89e8194cc30f3ef142e522d0211bd643a72f22628790612871908690615b95565b60405180910390a450505050565b61288a600833613750565b6128a65760405162461bcd60e51b815260040161061690615a0e565b6128b1600682612f9a565b15611181576040516001600160a01b038216907e3a28a533346977ad012a278cc3a0fd93d207d74e458ba699c9d4dc285dde7890600090a250565b60006121b36006612d55565b6011546001600160a01b031690565b606081612915600a82612d6c565b6129315760405162461bcd60e51b815260040161061690615201565b6000838152600d6020526040902060609061294b90612d55565b6001600160401b038111801561296057600080fd5b5060405190808252806020026020018201604052801561298a578160200160208202803683370190505b50905060005b81518110156129dd576000858152600d602052604090206129b19082612d60565b8282815181106129bd57fe5b6001600160a01b0390921660209283029190910190910152600101612990565b509392505050565b3360009081526005602052604090206129fe90826137bc565b15611181576040516001600160a01b0382169033907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b606083612a4a600a82612d6c565b612a665760405162461bcd60e51b815260040161061690615201565b6060836001600160401b0381118015612a7e57600080fd5b50604051908082528060200260200182016040528015612aa8578160200160208202803683370190505b50905060005b84811015612b49576000878152600e6020526040812090878784818110612ad157fe5b9050602002016020810190612ae69190614987565b6001600160a01b03166001600160a01b0316815260200190815260200160002060000160109054906101000a90046001600160801b0316828281518110612b2957fe5b6001600160801b0390921660209283029190910190910152600101612aae565b5095945050505050565b60008282026001600160801b0384161580612b9a5750826001600160801b0316846001600160801b0316826001600160801b031681612b8e57fe5b046001600160801b0316145b612bb65760405162461bcd60e51b81526004016106169061574f565b6706f05b59d3b2000081016001600160801b038083169082161015612bed5760405162461bcd60e51b81526004016106169061574f565b6000670de0b6b3a76400006001600160801b0383165b049695505050505050565b60006001600160801b038216612c365760405162461bcd60e51b8152600401610616906157d9565b670de0b6b3a764000083026001600160801b0384161580612c7c5750670de0b6b3a76400006001600160801b0385811690831681612c7057fe5b046001600160801b0316145b612c985760405162461bcd60e51b81526004016106169061559a565b600060026001600160801b0385160482019050816001600160801b0316816001600160801b03161015612cdd5760405162461bcd60e51b81526004016106169061559a565b6000846001600160801b0316826001600160801b031681612c0357fe5b612d508363a9059cbb60e01b8484604051602401612d19929190614fcd565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613816565b505050565b60006108c3826138a5565b60006107f383836138a9565b60006107f383836138ee565b60006001600160801b038216612d90575060006107f3565b6040516370a0823160e01b81526000906001600160a01b038616906370a0823190612dbf903090600401614fb9565b60206040518083038186803b158015612dd757600080fd5b505afa158015612deb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0f9190614e8c565b9050612e2f6001600160a01b03861685306001600160801b038716613906565b6040516370a0823160e01b81526000906001600160a01b038716906370a0823190612e5e903090600401614fb9565b60206040518083038186803b158015612e7657600080fd5b505afa158015612e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eae9190614e8c565b90506000612ec4612ebf8385613927565b613936565b6001600160a01b0388166000908152600360209081526040918290208251808401909352546001600160801b038082168452600160801b9091041690820152909150612f109082612faf565b6001600160a01b03881660009081526003602090815260409091208251815493909201516001600160801b03908116600160801b029281166001600160801b031990941693909317909216179055925050509392505050565b6000806000612f78858561395f565b9150915080156108bf5760405162461bcd60e51b81526004016106169061596f565b60006107f3836001600160a01b038416613996565b612fb7614684565b6040805180820190915283518190612fd8906001600160801b031685613024565b6001600160801b031681526020016130068486602001516001600160801b031661302490919063ffffffff16565b6001600160801b031690529392505050565b80516020909101510390565b60008282016001600160801b0380851690821610156107f35760405162461bcd60e51b81526004016106169061599a565b6001600160801b03821661306857613134565b6001600160a01b0384166000908152600360209081526040918290208251808401909352546001600160801b038082168452600160801b90910416908201526130b19083613765565b6001600160a01b038516600090815260036020908152604082208351815494909201516001600160801b03908116600160801b029281166001600160801b031990951694909417909316179091558161310a5782613113565b613113836139e0565b90506131326001600160a01b038616856001600160801b038416612cfa565b505b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316816001600160801b0316111561318c5760405162461bcd60e51b8152600401610616906157aa565b600180546001600160801b0319166001600160801b0392909216919091179055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b0316816001600160801b031611156132005760405162461bcd60e51b8152600401610616906154a1565b600180546001600160801b03928316600160801b029216919091179055565b60006108c360025483613a1390919063ffffffff16565b6000828201838110156107f35760405162461bcd60e51b81526004016106169061599a565b60006107f38383613996565b90565b60606002600054141561328f5760405162461bcd60e51b815260040161061690615a55565b600260005582516132a0903361271f565b6132bc5760405162461bcd60e51b815260040161061690615669565b606084516001600160401b03811180156132d557600080fd5b506040519080825280602002602001820160405280156132ff578160200160208202803683370190505b509050606085516001600160401b038111801561331b57600080fd5b50604051908082528060200260200182016040528015613345578160200160208202803683370190505b509050613350614684565b61335861469b565b60005b89518110156134885789818151811061337057fe5b6020026020010151915060008060006133958c868d600001518e602001518a8f613a85565b925092509250826001600160801b03168886602001516001600160801b0316815181106133be57fe5b602002602001018181510191508181525050816001600160801b03168886604001516001600160801b0316815181106133f357fe5b602002602001018181510391508181525050613441818887602001516001600160801b03168151811061342257fe5b60200260200101516001600160801b031661302490919063ffffffff16565b8786602001516001600160801b03168151811061345a57fe5b60200260200101906001600160801b031690816001600160801b03168152505050505080600101905061335b565b5060005b885181101561373d5760008982815181106134a357fe5b6020026020010151905060008683815181106134bb57fe5b602002602001015113156135c45760008683815181106134d757fe5b602002602001015190508960400151156135795789516001600160a01b03908116600090815260046020908152604080832093861683529290529081205461352c906001600160801b03908116908416613c4e565b8b516001600160a01b03908116600090815260046020908152604080832093881683529290522080546001600160801b03808216849003166001600160801b031990911617905590910390505b600061358a838c6000015184612d78565b9050816001600160801b0316816001600160801b0316146135bd5760405162461bcd60e51b8152600401610616906154cc565b5050613687565b60008683815181106135d257fe5b60200260200101516000039050896060015115613674576020808b01516001600160a01b039081166000908152600483526040808220928616825291909252902054613627906001600160801b031682613024565b60208b8101516001600160a01b039081166000908152600483526040808220928716825291909252902080546001600160801b0319166001600160801b0392909216919091179055613685565b613685828b60200151836000613055565b505b6136e685838151811061369657fe5b6020908102919091018101516001600160a01b0384166000908152600383526040908190208151808301909252546001600160801b038082168352600160801b9091041692810192909252613765565b6001600160a01b0390911660009081526003602090815260409091208251815493909201516001600160801b03908116600160801b029281166001600160801b03199094169390931790921617905560010161348c565b5050600160005550909695505050505050565b60006107f3836001600160a01b0384166138ee565b61376d614684565b604080518082019091528351819061378e906001600160801b031685612f69565b6001600160801b031681526020016130068486602001516001600160801b0316612f6990919063ffffffff16565b60006107f3836001600160a01b038416613c64565b7f00000000000000000000000000000000000000000000000000000000000000008111156138115760405162461bcd60e51b81526004016106169061513e565b600255565b606061386b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d2a9092919063ffffffff16565b805190915015612d5057808060200190518101906138899190614c03565b612d505760405162461bcd60e51b8152600401610616906159c4565b5490565b815460009082106138cc5760405162461bcd60e51b81526004016106169061516e565b8260000182815481106138db57fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b613134846323b872dd60e01b858585604051602401612d1993929190614fe6565b6000806000612f788585613d39565b6000600160801b821061395b5760405162461bcd60e51b8152600401610616906152fb565b5090565b600080826001600160801b0316846001600160801b031610613987575050808203600061398f565b505081810360015b9250929050565b60006139a283836138ee565b6139d8575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108c3565b5060006108c3565b60015460009081906139fe906001600160801b038581169116612b53565b90506107f36001600160801b03841682612f69565b6000828202831580613a2d575082848281613a2a57fe5b04145b613a495760405162461bcd60e51b81526004016106169061574f565b6706f05b59d3b20000810181811015613a745760405162461bcd60e51b81526004016106169061574f565b6000670de0b6b3a764000082612c03565b6000806000808989602001516001600160801b031681518110613aa457fe5b6020026020010151905060008a8a604001516001600160801b031681518110613ac957fe5b60200260200101519050806001600160a01b0316826001600160a01b03161415613b055760405162461bcd60e51b815260040161061690615722565b60608a01516001600160801b038116613b855787516001600160a01b0316613b3f5760405162461bcd60e51b8152600401610616906153b1565b613b4a878484613d4f565b6001600160a01b031688600001516001600160a01b031614613b7e5760405162461bcd60e51b8152600401610616906157ff565b5060208701515b613b8d6146cb565b6040518060e00160405280856001600160a01b03168152602001846001600160a01b03168152602001836001600160801b031681526020018d6000015181526020018c6001600160a01b031681526020018b6001600160a01b031681526020018d6080015181525090506000613c03828a613d71565b96509050613c12898686613e9d565b6001600160a01b03168a526001600160801b03811660208b0152613c37898483613ebe565b909f909e50959c50949a5050505050505050505050565b6000818310613c5d57816107f3565b5090919050565b60008181526001830160205260408120548015613d205783546000198083019190810190600090879083908110613c9757fe5b9060005260206000200154905080876000018481548110613cb457fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080613ce457fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506108c3565b60009150506108c3565b6060611a548484600085613eec565b600080828410613987575050808203600061398f565b600080846001811115613d5e57fe5b14613d695781611a54565b509092915050565b600080600080613d8486606001516108c9565b91509150613d90614684565b613d98614684565b6000836001811115613da657fe5b1415613dc657613db7888589613fb0565b90985096509092509050613dfd565b6001836001811115613dd457fe5b1415613de557613db7888589614267565b60405162461bcd60e51b815260040161061690615a8c565b6060880180516000908152600e602081815260408084208d516001600160a01b03908116865290835281852088518154998501516001600160801b03199a8b166001600160801b03928316178216600160801b918316820217909255965186529383528185209d8301511684529b81529a9091208351815494909b0151939094169982169990991781169116909702969096179095555090939092509050565b600080846001811115613eac57fe5b14613eb75782611a54565b5092915050565b60008080856001811115613ece57fe5b1415613ede575082905081613ee4565b50819050825b935093915050565b6060613ef785614620565b613f135760405162461bcd60e51b8152600401610616906158ed565b60006060866001600160a01b03168587604051613f309190614f9d565b60006040518083038185875af1925050503d8060008114613f6d576040519150601f19603f3d011682016040523d82523d6000602084013e613f72565b606091505b50915091508115613f86579150611a549050565b805115613f965780518082602001fd5b8360405162461bcd60e51b8152600401610616919061512b565b613fb8614684565b613fc0614684565b60608501516000908152600e6020908152604080832088516001600160a01b0316845282528083208151808301909252546001600160801b038082168352600160801b909104169181018290529350819061402d5760405162461bcd60e51b8152600401610616906153e8565b60608701516000908152600e60209081526040808320828b01516001600160a01b031684528252918290208251808401909352546001600160801b038082168452600160801b9091041690820181905290935061409c5760405162461bcd60e51b815260040161061690615342565b60008560018111156140aa57fe5b141561419557600080876001600160a01b031663f9ddfe3e6140cb8b614659565b886020015188602001516040518463ffffffff1660e01b81526004016140f393929190615b62565b6040805180830381600087803b15801561410c57600080fd5b505af1158015614120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141449190614e5e565b9150915061415181614661565b925061417d614176848b604001516001600160801b0316612f6990919063ffffffff16565b8790612faf565b6141878684613765565b83955095509550505061425e565b600080876001600160a01b0316637ee65e536141b08b614659565b886020015188602001516040518463ffffffff1660e01b81526004016141d893929190615b62565b6040805180830381600087803b1580156141f157600080fd5b505af1158015614205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142299190614e5e565b9150915061423681614661565b925061424e6141766001600160801b03841685612f69565b60408a0151614187908790613765565b93509350935093565b61426f614684565b614277614684565b600080606061429b600d60008a606001518152602001908152602001600020612d55565b6001600160401b03811180156142b057600080fd5b506040519080825280602002602001820160405280156142da578160200160208202803683370190505b5090506142e5614709565b60005b60608a01516000908152600d6020526040902061430490612d55565b8110156143f95760608a01516000908152600d602052604081206143289083612d60565b9050614332614684565b5060608b01516000908152600e602090815260408083206001600160a01b03851684528252918290208251808401909352546001600160801b038082168452600160801b90910416908201819052855186908590811061438e57fe5b6001600160801b03909216602092830291909101909101528b516001600160a01b03838116911614156143c6578284529750876143ef565b8b602001516001600160a01b0316826001600160a01b031614156143ef57602084018390529650865b50506001016142e8565b50600086602001516001600160801b0316116144275760405162461bcd60e51b8152600401610616906153e8565b600085602001516001600160801b0316116144545760405162461bcd60e51b815260040161061690615342565b600087600181111561446257fe5b141561455357600080896001600160a01b031663100f37e76144838d614659565b855160208701516040516001600160e01b031960e086901b1681526144af93928a929091600401615b29565b6040805180830381600087803b1580156144c857600080fd5b505af11580156144dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145009190614e5e565b9150915061450d81614661565b9450614539614532868d604001516001600160801b0316612f6990919063ffffffff16565b8990612faf565b6145438884613765565b839750975097505050505061425e565b600080896001600160a01b031663befd70e061456e8d614659565b855160208701516040516001600160e01b031960e086901b16815261459a93928a929091600401615b29565b6040805180830381600087803b1580156145b357600080fd5b505af11580156145c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145eb9190614e5e565b915091506145f881614661565b94506146106145326001600160801b03841687612f69565b60408c0151614543908990613765565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611a54575050151592915050565b61395b6146cb565b6001546000906108c3906001600160801b0384811691600160801b900416612b53565b604080518082019091526000808252602082015290565b6040805160a081018252600080825260208201819052918101829052606080820192909252608081019190915290565b6040805160e08101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c081019190915290565b604051806040016040528060008152602001600081525090565b60008083601f840112614734578182fd5b5081356001600160401b0381111561474a578182fd5b602083019150836020808302850101111561398f57600080fd5b600082601f830112614774578081fd5b813561478761478282615be5565b615bbf565b8181529150602080830190848101818402860182018710156147a857600080fd5b60005b848110156147d05781356147be81615c30565b845292820192908201906001016147ab565b505050505092915050565b600082601f8301126147eb578081fd5b81356147f961478282615be5565b818152915060208083019084810160005b848110156147d0578135870160a080601f19838c0301121561482b57600080fd5b61483481615bbf565b85830135815260408084013561484981615c53565b8288015260608481013561485c81615c53565b808385015250608091508185013561487381615c53565b9083015291830135916001600160401b0383111561489057600080fd5b61489e8c88858701016148b6565b9082015286525050928201929082019060010161480a565b600082601f8301126148c6578081fd5b81356001600160401b038111156148db578182fd5b6148ee601f8201601f1916602001615bbf565b915080825283602082850101111561490557600080fd5b8060208401602084013760009082016020015292915050565b60006080828403121561492f578081fd5b6149396080615bbf565b9050813561494681615c30565b8152602082013561495681615c30565b6020820152604082013561496981615c45565b6040820152606082013561497c81615c45565b606082015292915050565b600060208284031215614998578081fd5b81356107f381615c30565b600080604083850312156149b5578081fd5b82356149c081615c30565b915060208301356149d081615c30565b809150509250929050565b600080600080608085870312156149f0578182fd5b84356149fb81615c30565b93506020850135614a0b81615c30565b92506040850135915060608501356001600160401b03811115614a2c578182fd5b614a38878288016148b6565b91505092959194509250565b600080604083850312156149b5578182fd5b60008060408385031215614a68578182fd5b8235614a7381615c30565b91506020830135600281106149d0578182fd5b600080600060608486031215614a9a578081fd5b8335614aa581615c30565b9250602084013561ffff81168114614abb578182fd5b9150604084013563ffffffff81168114614ad3578182fd5b809150509250925092565b600080600060608486031215614af2578081fd5b8335614afd81615c30565b95602085013595506040909401359392505050565b600080600080600060608688031215614b29578283fd5b85356001600160401b0380821115614b3f578485fd5b614b4b89838a01614723565b90975095506020880135915080821115614b63578485fd5b50614b7088828901614723565b9094509250506040860135614b8481615c30565b809150509295509295909350565b600080600060c08486031215614ba6578081fd5b83356001600160401b0380821115614bbc578283fd5b614bc8878388016147db565b94506020860135915080821115614bdd578283fd5b50614bea86828701614764565b925050614bfa856040860161491e565b90509250925092565b600060208284031215614c14578081fd5b81516107f381615c45565b600060208284031215614c30578081fd5b5035919050565b60008060408385031215614c49578182fd5b8235915060208301356149d081615c30565b60008060008060008060008060a0898b031215614c76578586fd5b883597506020890135614c8881615c30565b965060408901356001600160401b0380821115614ca3578788fd5b614caf8c838d01614723565b909850965060608b0135915080821115614cc7578485fd5b614cd38c838d01614723565b909650945060808b0135915080821115614ceb578384fd5b50614cf88b828c01614723565b999c989b5096995094979396929594505050565b600080600060408486031215614d20578081fd5b8335925060208401356001600160401b03811115614d3c578182fd5b614d4886828701614723565b9497909650939450505050565b600080600060608486031215614d69578081fd5b833592506020840135614d7b81615c30565b91506040840135614ad381615c30565b60008060008060808587031215614da0578182fd5b843593506020850135614db281615c30565b92506040850135614dc281615c30565b91506060850135614dd281615c53565b939692955090935050565b600080600060608486031215614df1578081fd5b833592506020840135614e0381615c30565b91506040840135614ad381615c53565b600080600060608486031215614e27578081fd5b8335614e3281615c30565b92506020840135614d7b81615c53565b600060208284031215614e53578081fd5b81356107f381615c53565b60008060408385031215614e70578182fd5b8251614e7b81615c53565b60208401519092506149d081615c53565b600060208284031215614e9d578081fd5b5051919050565b60008060408385031215614eb6578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015614efd5781516001600160801b031687529582019590820190600101614ed8565b509495945050505050565b60008151808452614f20816020860160208601615c04565b601f01601f19169290920160200192915050565b600060018060a01b0380835116845280602084015116602085015260018060801b036040840151166040850152606083015160608501528060808401511660808501528060a08401511660a08501525060c082015160e060c0850152611a5460e0850182614f08565b60008251614faf818460208701615c04565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0383168152604081016002831061502457fe5b8260208301529392505050565b600060018060a01b03861682528460208301528360408301526080606083015261505e6080830184614f08565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156150a95783516001600160a01b031683529284019291840191600101615084565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156150a9578351835292840192918401916001016150d1565b6000602082526107f36020830184614ec5565b901515815260200190565b90815260200190565b9182526001600160801b0316602082015260400190565b6000602082526107f36020830184614f08565b60208082526016908201527508cd8c2e6d098dec2dc40cccaca40e8dede40d0d2ced60531b604082015260600190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526031908201527f5468657265206973206e6f7420656e6f756768206c697175696469747920617660408201527061696c61626c6520746f20626f72726f7760781b606082015260800190565b6020808252600f908201526e125b995e1a5cdd195b9d081c1bdbdb608a1b604082015260600190565b60208082526026908201527f5661756c743a20776974686472617720616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526025908201527f50657263656e74616765206d757374206265206265747765656e203020616e64604082015264203130302560d81b606082015260800190565b60208082526026908201527f6f76657220696e766573746d656e7420616d6f756e74202d2063616e6e6f74206040820152651a5b9d995cdd60d21b606082015260800190565b60208082526027908201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316040820152663238206269747360c81b606082015260800190565b602080825260139082015272151bdad95b8810881b9bdd081a5b881c1bdbdb606a1b604082015260600190565b60208082526022908201527f546f6b656e7320616e6420616d6f756e7473206c656e677468206d69736d61746040820152610c6d60f31b606082015260800190565b6020808252601f908201527f556e6b6e6f776e20616d6f756e7420696e206f6e206669727374207377617000604082015260600190565b602080825260139082015272151bdad95b8810481b9bdd081a5b881c1bdbdb606a1b604082015260600190565b60208082526021908201527f43616c6c6572206973206e6f742074686520706f6f6c20636f6e74726f6c6c656040820152603960f91b606082015260800190565b6020808252603f908201527f43616e6e6f74207365742061206e657720696e766573746d656e74206d616e616040820152600080516020615c69833981519152606082015260800190565b6020808252601190820152700a6eec2e040cccaca40e8dede40d0d2ced607b1b604082015260600190565b6020808252601a9082015279139bdd08195b9bdd59da081d1bdad95b9cc81c9958d95a5d995960321b604082015260600190565b60208082526032908201527f5468652061637475616c2062616c616e6365206f66207468652070726f746f636040820152711bdb081a5cc81a5b98dbdb9cda5cdd195b9d60721b606082015260800190565b60208082526028908201527f546f6b656e7320616e6420746f74616c20616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b60208082526027908201527f756e64657220696e766573746d656e7420616d6f756e74202d2063616e6e6f7460408201526608191a5d995cdd60ca1b606082015260800190565b602080825260169082015275506f6f6c20494420616c72656164792065786973747360501b604082015260600190565b60208082526014908201527314dd1c985d1959de481b5d5cdd081899481cd95d60621b604082015260600190565b60208082526016908201527521b0b63632b91034b9903737ba1037b832b930ba37b960511b604082015260600190565b60208082526032908201527f5468652072657175657374656420616d6f756e7420697320746f6f20736d616c60408201527136103337b9103090333630b9b42637b0b71760711b606082015260800190565b6020808252601d908201527f416d6f756e7420617272617973206c656e677468206d69736d61746368000000604082015260600190565b60208082526013908201527229bbb0b8103337b91039b0b6b2903a37b5b2b760691b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b60208082526017908201527621b0b63632b91034b9903737ba103a34329030b236b4b760491b604082015260600190565b6020808252601590820152740aed2e8d0c8e4c2ee40cccaca40e8dede40d0d2ced605b1b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b6020808252601c908201527b04d6973636f6e7374727563746564206d756c7469686f7020737761760241b604082015260600190565b6020808252601d908201527f4f6e6c7920706f6f6c20696e766573746d656e74206f70657261746f72000000604082015260600190565b6020808252603c908201527f506f6f6c2062616c616e636520697320616c72656164792062616c616e63656460408201527b0818995d1dd9595b8818d85cda08185b99081a5b9d995cdd1b595b9d60221b606082015260800190565b6020808252600b908201526a42616420696e646963657360a81b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252603f908201527f43616e6e6f742072656d6f766520616e20696e766573746d656e74206d616e616040820152600080516020615c69833981519152606082015260800190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526027908201527f43616c6c6572206973206e6f742074727573746564206f70657261746f72207260408201526632b837b93a32b960c91b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b602080825260159082015274556e6b6e6f776e207374726174656779207479706560581b604082015260600190565b602080825260119082015270151bdad95b881b9bdd081a5b881c1bdbdb607a1b604082015260600190565b60208082526023908201527f496e73756666696369656e7420756e6163636f756e74656420666f7220746f6b604082015262656e7360e81b606082015260800190565b600060808252615b3c6080830187614f34565b8281036020840152615b4e8187614ec5565b604084019590955250506060015292915050565b600060608252615b756060830186614f34565b6001600160801b0394851660208401529290931660409091015292915050565b6001600160801b0391909116815260200190565b9283526020830191909152604082015260600190565b6040518181016001600160401b0381118282101715615bdd57600080fd5b604052919050565b60006001600160401b03821115615bfa578081fd5b5060209081020190565b60005b83811015615c1f578181015183820152602001615c07565b838111156131345750506000910152565b6001600160a01b038116811461118157600080fd5b801515811461118157600080fd5b6001600160801b038116811461118157600080fdfe6765722077697468206f75747374616e64696e6720696e766573746d656e7400a2646970667358221220a04844ab691012cb9fe6376942937906aad2e0b7d004e853146228d14ec233a364736f6c63430007010033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(bytes32,address,address[],uint128[],uint128[])": {
        "details": "Adds liquidity into a Pool. Can only be called by its controller. For each token, the Pool's balance will be increased by `totalAmounts[i]`. This is achieved by first transferring `amountsToTransfer[i]` tokens, and then withdrawing any amount remaining from User Balance. In both cases, the tokens will come from `from`. `from` must have granted allowance to the Vault, and the caller (Pool controller) must be an operator for `from`. If a token that was not previously in the Pool is granted balance by this function, it will become part of the Pool. This is the only way tokens can be added to a Pool."
      },
      "authorizeOperator(address)": {
        "details": "Authorizes `operator` to act as an operator for the caller."
      },
      "authorizeTrustedOperatorReporter(address)": {
        "details": "Authorizes `reporter` to call `reportTrustedOperator`. This is typically called on factory contracts. Can only be called by the admin."
      },
      "batchSwapGivenIn((bytes32,uint128,uint128,uint128,bytes)[],address[],(address,address,bool,bool))": {
        "details": "Performs a series of swaps with one or multiple Pools. Each swap is validated and executed in order. However, tokens are only transferred in and out of the Vault (or withdrawn/deposited from User Balance) after all swaps have been validated and the net token balance change computed. This means it is possible to e.g. under certain conditions perform arbitrage by swapping with multiple Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in. The `diffs` array contains the addresses of all tokens involved in the swaps, along with how many tokens the caller expects to transfer into the Vault for each. Any tokens due to the Vault not included in this amount will be withdrawn from User Balance. The `swaps` array contains the information about each individual swaps. All swaps consist of a Pool receiving some amount of one of its tokens (`tokenIn`), and sending some amount of another one of its tokens (`tokenOut`). A swap cannot cause `tokenOut` to be fully drained. The Pools' Trading Strategies will validate each swap, possibly charging a swap fee on the amount going in. If so, the protocol will then charge the protocol swap fee to the Pool's own swap fee. Funds will be received according to the data in `fundsIn`, and sent according to `fundsOut`."
      },
      "claimUnaccountedForTokens(address[],uint256[],address)": {
        "details": "Transfers to `recipient` the requested amounts of unnaccounted-for tokens. Can only be called by the admin."
      },
      "deposit(address,uint128,address)": {
        "details": "Deposits tokens from the caller into `user`'s User Balance."
      },
      "flashLoan(address,address,uint256,bytes)": {
        "details": "allows smartcontracts to access the liquidity of the vault within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com",
        "params": {
          "_amount": "the amount requested for this flashloan*",
          "_receiver": "The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.",
          "_token": "the address of the principal ERC-20 token"
        }
      },
      "getPoolController(bytes32)": {
        "details": "Returns a Pool's controller."
      },
      "getPoolIds(uint256,uint256)": {
        "details": "Returns a partial list of Pool IDs, starting at index `start`, up to index `end`."
      },
      "getPoolStrategy(bytes32)": {
        "details": "Returns a Pool's Trading Strategy and Trading Strategy Type."
      },
      "getPoolTokenBalances(bytes32,address[])": {
        "details": "Returns the Pool's balance of `tokens`. This might be zero if the tokens are not in the Pool."
      },
      "getPoolTokens(bytes32)": {
        "details": "Returns all tokens in the Pool (tokens for which the Pool has balance)."
      },
      "getTotalPools()": {
        "details": "Returns the number of Pools."
      },
      "getTotalTrustedOperatorReporters()": {
        "details": "Returns the number of Trusted Operator Reporters."
      },
      "getTotalTrustedOperators()": {
        "details": "Returns the number of Trusted Operators."
      },
      "getTotalUnaccountedForTokens(address)": {
        "details": "Returns the number of unaccounted-for tokens for `token`."
      },
      "getTrustedOperatorReporters(uint256,uint256)": {
        "details": "Returns a partial list of Trusted Operator Reporters, starting at index `start`, up to index `end`."
      },
      "getTrustedOperators(uint256,uint256)": {
        "details": "Returns a partial list of Trusted Operators, starting at index `start`, up to index `end`."
      },
      "getUserOperators(address,uint256,uint256)": {
        "details": "Returns a partial list of `user`'s operators, starting at index `start`, up to index `end`. This does not include `user` itself, nor Trusted Operators. The ordering of this list may change as operators are authorized and revoked."
      },
      "getUserTokenBalance(address,address)": {
        "details": "Returns `user`'s User Balance for a specific token."
      },
      "getUserTotalOperators(address)": {
        "details": "Returns the number of operators for `user`. This does not include `user` itself, nor Trusted Operators."
      },
      "isOperatorFor(address,address)": {
        "details": "Returns true of `operator` is an operator for `user`."
      },
      "newPool(address,uint8)": {
        "details": "Creates a new Pool with a Trading Strategy and Trading Strategy Type. The caller of this function becomes the Pool's controller. Returns the created Pool's ID. Also emits a PoolCreated event."
      },
      "removeLiquidity(bytes32,address,address[],uint128[],uint128[])": {
        "details": "Removes liquidity from a Pool. Can only be called by its controller. For each token, the Pool's balance will be decreased by `totalAmounts[i]`. This is achieved by first transferring `amountsToTransfer[i]` tokens, and then depositing any amount remaining into User Balance. In both cases, the tokens are sent to `to`. Withdraw protocol fees are charged over any tokens transferred out. If a token that was previously in the Pool has all of its balance removed by this function, it will no longer be in the Pool. This is the only way tokens can be removed from a Pool."
      },
      "reportTrustedOperator(address)": {
        "details": "Adds `operator` as a Trusted Operator. Can only be called by a Trusted Operator Reporter."
      },
      "revokeOperator(address)": {
        "details": "Revokes `operator` so that it no longer is an operator for the caller. An account is always its own operator and cannot revoke itself. Trusted Operators also cannot be revoked."
      },
      "setPoolController(bytes32,address)": {
        "details": "Sets a new controller for a Pool. Can only be called by its current controller."
      },
      "withdraw(address,uint128,address)": {
        "details": "Withdraws tokens from the caller's User Balance, transferring them to `recipient`. Withdraw protocol fees are charged by this."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2199,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10496,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_protocolWithdrawFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 10498,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_protocolSwapFee",
        "offset": 16,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 10510,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_protocolFlashLoanFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 12414,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_vaultTokenBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20)1268,t_struct(Balance)12327_storage)"
      },
      {
        "astId": 11775,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_userTokenBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)1268,t_uint128))"
      },
      {
        "astId": 11779,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_userOperators",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressSet)12845_storage)"
      },
      {
        "astId": 11781,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_trustedOperators",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)12845_storage"
      },
      {
        "astId": 11783,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_trustedOperatorReporters",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(AddressSet)12845_storage"
      },
      {
        "astId": 9098,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_pools",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(BytesSet)12760_storage"
      },
      {
        "astId": 9102,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_poolController",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 9106,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_poolTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)12845_storage)"
      },
      {
        "astId": 9112,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_poolTokenBalance",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)1268,t_struct(Balance)12327_storage))"
      },
      {
        "astId": 9132,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_investablePercentage",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)1268,t_uint128))"
      },
      {
        "astId": 9138,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_poolInvestmentManagers",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)1268,t_address))"
      },
      {
        "astId": 8348,
        "contract": "contracts/vault/Vault.sol:Vault",
        "label": "_admin",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1268": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)1268,t_uint128))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1268,t_uint128)"
      },
      "t_mapping(t_address,t_struct(AddressSet)12845_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)12845_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)1268,t_address))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(contract IERC20 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1268,t_address)"
      },
      "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)1268,t_struct(Balance)12327_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(contract IERC20 => struct BalanceLib.Balance))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1268,t_struct(Balance)12327_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_contract(IERC20)1268,t_uint128))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(contract IERC20 => uint128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)1268,t_uint128)"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)12845_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)12845_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1268,t_address)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1268",
        "label": "mapping(contract IERC20 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)1268,t_struct(Balance)12327_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1268",
        "label": "mapping(contract IERC20 => struct BalanceLib.Balance)",
        "numberOfBytes": "32",
        "value": "t_struct(Balance)12327_storage"
      },
      "t_mapping(t_contract(IERC20)1268,t_uint128)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1268",
        "label": "mapping(contract IERC20 => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_struct(AddressSet)12845_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 12844,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)12580_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Balance)12327_storage": {
        "encoding": "inplace",
        "label": "struct BalanceLib.Balance",
        "members": [
          {
            "astId": 12324,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "cash",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 12326,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "total",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(BytesSet)12760_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.BytesSet",
        "members": [
          {
            "astId": 12759,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)12580_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)12580_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 12575,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 12579,
            "contract": "contracts/vault/Vault.sol:Vault",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}