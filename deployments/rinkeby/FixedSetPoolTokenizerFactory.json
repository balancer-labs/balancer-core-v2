{
  "address": "0x029B4d8C9C5D446fd663444B469ae3EF851cBdf6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "enum IVault.StrategyType",
          "name": "strategyType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "initialBPT",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint128[]",
          "name": "amounts",
          "type": "uint128[]"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x65ba6d60baa0f25bc4cebe4ee6f2434b6f2651b4176bee7a18080e711de1fa51",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x7D7dC6A9C2Af80a0C5935CcD96fCbA5351cA18a0",
    "contractAddress": null,
    "transactionIndex": 11,
    "gasUsed": "2600007",
    "logsBloom": "0x
    "blockHash": "0x24d33172c8e18fad21fa9e2cfb47b49734bd2d5579df81bec9028b5cb4ab1b10",
    "transactionHash": "0x65ba6d60baa0f25bc4cebe4ee6f2434b6f2651b4176bee7a18080e711de1fa51",
    "logs": [],
    "blockNumber": 7628993,
    "cumulativeGasUsed": "3592726",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x001b6571f9CB4143b448918a9BFEaA52c6E438C3"
  ],
  "solcInputHash": "04126076e1073c58f6fff18e8fc8421d",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"enum IVault.StrategyType\",\"name\":\"strategyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialBPT\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"amounts\",\"type\":\"uint128[]\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/controllers/FixedSetPoolTokenizerFactory.sol\":\"FixedSetPoolTokenizerFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint256(_data));\\n    }\\n}\\n\",\"keccak256\":\"0x539295edd21ad514c0b1a0d1c89ada0831942f379ea83b6eb85769211fc7937e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x938f2783ceb543ad266344cc5c420e1294026507081d6b7c2ec01b3303056265\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x79004a1d1471abe87e92c4497acba06d5dfa5b1f3e9894a0991a7c4669c5c02c\",\"license\":\"MIT\"},\"contracts/controllers/BToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n// Highly opinionated token implementation\\n// * It includes functions to increase and decrease allowance as a workaround\\n//   for the well-known issue with 'approve':\\n//   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n// * It allows for 'infinite allowance', where an allowance of 0xff..ff is not\\n//   decreased by calls to transferFrom\\n// * It lets a token holder use 'transferFrom' to send their own tokens,\\n//   without first setting allowance\\n// * It emits 'Approval' events whenever allowance is changed by 'transferFrom'\\nabstract contract BTokenBase is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = _balance[address(this)].add(amt);\\n        _totalSupply = _totalSupply.add(amt);\\n\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        _balance[address(this)] = _balance[address(this)].sub(amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _totalSupply = _totalSupply.sub(amt);\\n\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        _balance[src] = _balance[src].sub(amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[dst] = _balance[dst].add(amt);\\n\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase {\\n    using SafeMath for uint256;\\n\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n\\n        emit Approval(msg.sender, dst, amt);\\n\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = _allowance[msg.sender][dst].add(amt);\\n\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = oldValue.sub(amt);\\n        }\\n\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n\\n        _move(src, dst, amt);\\n\\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(-1)) {\\n            _allowance[src][msg.sender] = _allowance[src][msg.sender].sub(amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x8f2644f32e0127cbbd83aebdd197392b1939eb40a25f67b4bc389789971f072e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/controllers/BasePoolControllerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\nabstract contract BasePoolControllerFactory {\\n    using Address for address;\\n\\n    IVault public immutable vault;\\n\\n    event ControllerCreated(address indexed controller);\\n\\n    constructor(IVault _vault) {\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @dev Deploys a controller contract defined by `creationCode`. The `salt` value is only used in determining the\\n     * resulting controller address. Any value can be passed, but reusing `salt` for a given `creationCode` results in\\n     * a revert.\\n     *\\n     * Before the constructor of the created contract is executed, the factory will register it in the Vault as a\\n     * Trusted Operator. This means the contract will be able to pull funds from both User Balance and tokens that have\\n     * been granted allowance. As is always the case when dealing with Trusted Operators, the contract should be careful\\n     * to authenticate any addresses they use this way.\\n     *\\n     * The creation code for a Solidity contract can be constructed by concatenating the `creationCode` property of the\\n     * contract type with the ABI-encoded constructor arguments. Note that the compiler doesn't perform any type\\n     * checking here: all factory-created contracts should be subject to at least basic testing.\\n     *\\n     * Sample usage using abi.encodePacked to concatenate the `bytes` arrays:\\n     *   _create(abi.encodePacked(type(ERC20).creationCode, abi.encode(\\\"My Token\\\", \\\"TKN\\\", 18)), salt);\\n     *\\n     * Emits a `ControllerCreated` event.\\n     *\\n     * Returns the address of the created contract.\\n     */\\n    function _create(bytes memory creationCode, bytes32 salt) internal returns (address) {\\n        address expectedController = Create2.computeAddress(salt, keccak256(creationCode));\\n        require(!expectedController.isContract(), \\\"Salt cannot be reused\\\");\\n\\n        vault.reportTrustedOperator(expectedController);\\n\\n        address controller = Create2.deploy(0, salt, creationCode);\\n        assert(controller == expectedController);\\n\\n        emit ControllerCreated(controller);\\n\\n        return controller;\\n    }\\n}\\n\",\"keccak256\":\"0x7326dd16c50819109180b32eeba00babb252204e37b53f1c566531a26e34c750\",\"license\":\"GPL-3.0-or-later\"},\"contracts/controllers/FixedSetPoolTokenizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\npragma solidity ^0.7.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"../math/FixedPoint.sol\\\";\\n\\nimport \\\"./BToken.sol\\\";\\n\\ncontract FixedSetPoolTokenizer is BToken, ReentrancyGuard {\\n    using FixedPoint for uint128;\\n    using FixedPoint for uint256;\\n    using SafeCast for uint256;\\n\\n    IVault public immutable vault;\\n    bytes32 public immutable poolId;\\n\\n    constructor(\\n        IVault _vault,\\n        address strategy,\\n        IVault.StrategyType strategyType,\\n        uint256 initialBPT,\\n        IERC20[] memory tokens,\\n        uint128[] memory amounts,\\n        address from\\n    ) {\\n        bytes32 _poolId = _vault.newPool(strategy, strategyType);\\n        _vault.addLiquidity(_poolId, from, tokens, amounts, amounts);\\n\\n        _mintPoolShare(initialBPT);\\n        _pushPoolShare(from, initialBPT);\\n\\n        // Set immutable state variables - these cannot be read from during construction\\n        vault = _vault;\\n        poolId = _poolId;\\n    }\\n\\n    // Joining a pool\\n    // poolAmountOut - how much bpt the user expects to get\\n    // maxAmountsIn - the max amounts of each token the user is willing to add to the vault\\n    // The set of tokens is not specified because it is read from the Vault - and remains immutable that way.\\n    function joinPool(\\n        uint256 poolAmountOut,\\n        uint128[] calldata maxAmountsIn,\\n        bool transferTokens,\\n        address beneficiary\\n    ) external nonReentrant {\\n        uint256 poolTotal = totalSupply();\\n        uint128 ratio = poolAmountOut.div(poolTotal).toUint128();\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        IERC20[] memory tokens = vault.getPoolTokens(poolId);\\n        uint128[] memory balances = vault.getPoolTokenBalances(poolId, tokens);\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"Tokens and amounts length mismatch\\\");\\n\\n        uint128[] memory amountsIn = new uint128[](tokens.length);\\n        uint128[] memory amountsToTransfer = new uint128[](tokens.length);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            amountsIn[i] = balances[i].mul128(ratio);\\n            require(amountsIn[i] <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            if (transferTokens) {\\n                amountsToTransfer[i] = amountsIn[i];\\n            } else {\\n                // This leads into user balance withdrawals\\n                amountsToTransfer[i] = 0;\\n            }\\n        }\\n\\n        vault.addLiquidity(poolId, msg.sender, tokens, amountsIn, amountsToTransfer);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(beneficiary, poolAmountOut);\\n    }\\n\\n    function exitPool(\\n        uint256 poolAmountIn,\\n        uint256[] calldata minAmountsOut,\\n        bool withdrawTokens,\\n        address beneficiary\\n    ) external nonReentrant {\\n        uint256 poolTotal = totalSupply();\\n        uint128 ratio = poolAmountIn.div(poolTotal).toUint128();\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        IERC20[] memory tokens = vault.getPoolTokens(poolId);\\n        uint128[] memory balances = vault.getPoolTokenBalances(poolId, tokens);\\n\\n        require(minAmountsOut.length == tokens.length, \\\"Tokens and amounts length mismatch\\\");\\n\\n        uint128[] memory amountsOut = new uint128[](tokens.length);\\n        uint128[] memory amountsToTransfer = new uint128[](tokens.length);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            amountsOut[i] = balances[i].mul128(ratio);\\n            require(amountsOut[i] >= minAmountsOut[i], \\\"NOT EXITING ENOUGH\\\");\\n\\n            if (withdrawTokens) {\\n                amountsToTransfer[i] = amountsOut[i];\\n            } else {\\n                // This leads into user balance deposits\\n                amountsToTransfer[i] = 0;\\n            }\\n        }\\n\\n        vault.removeLiquidity(poolId, beneficiary, tokens, amountsOut, amountsToTransfer);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(poolAmountIn);\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2d7d8565277e69583d33c8b3d4fbf6bb097833009048054318c629e4d346b85f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/controllers/FixedSetPoolTokenizerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\nimport \\\"./BasePoolControllerFactory.sol\\\";\\nimport \\\"./FixedSetPoolTokenizer.sol\\\";\\n\\ncontract FixedSetPoolTokenizerFactory is BasePoolControllerFactory {\\n    constructor(IVault _vault) BasePoolControllerFactory(_vault) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    function create(\\n        address strategy,\\n        IVault.StrategyType strategyType,\\n        uint256 initialBPT,\\n        address[] memory tokens,\\n        uint128[] memory amounts,\\n        bytes32 salt\\n    ) external returns (address) {\\n        return\\n            _create(\\n                abi.encodePacked(\\n                    type(FixedSetPoolTokenizer).creationCode,\\n                    // Make the sender the `from` address\\n                    abi.encode(vault, strategy, strategyType, initialBPT, tokens, amounts, msg.sender)\\n                ),\\n                salt\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x23a622dc00eb5220b3b16b62325bb77f0400686e70c5c2ada453dda7c31c95be\",\"license\":\"GPL-3.0-or-later\"},\"contracts/math/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.1;\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\nlibrary FixedPoint {\\n    uint128 internal constant ONE = 10**18; // 18 decimal places\\n\\n    uint256 internal constant MIN_POW_BASE = 1 wei;\\n    uint256 internal constant MAX_POW_BASE = (2 * ONE) - 1 wei;\\n    uint256 internal constant POW_PRECISION = ONE / 10**10;\\n\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / ONE;\\n    }\\n\\n    function floor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * ONE;\\n    }\\n\\n    function abs(int256 a) internal pure returns (uint256) {\\n        if (a > 0) {\\n            return uint256(a);\\n        } else {\\n            // TODO: check valid\\n            return uint256(-a);\\n        }\\n    }\\n\\n    function abs128(int128 a) internal pure returns (uint128) {\\n        if (a > 0) {\\n            return uint128(a);\\n        } else {\\n            // TODO: check valid\\n            return uint128(-a);\\n        }\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function add128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = subSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function subSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function sub128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        (uint128 c, bool flag) = subSign128(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function subSign128(uint128 a, uint128 b) internal pure returns (uint128, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (ONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / ONE;\\n        return c2;\\n    }\\n\\n    function mul128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint128 c1 = c0 + (ONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint128 c2 = c1 / ONE;\\n        return c2;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * ONE;\\n        require(a == 0 || c0 / a == ONE, \\\"ERR_DIV_INTERNAL\\\"); // mul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  add require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    function div128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint128 c0 = a * ONE;\\n        require(a == 0 || c0 / a == ONE, \\\"ERR_DIV_INTERNAL\\\"); // mul overflow\\n        uint128 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  add require\\n        uint128 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function powi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : ONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = mul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = mul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `powi` for `b^e` and `powK` for k iterations\\n    // of approximation of b^0.w\\n    function pow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_POW_BASE, \\\"ERR_POW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_POW_BASE, \\\"ERR_POW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = floor(exp);\\n        uint256 remain = sub(exp, whole);\\n\\n        uint256 wholePow = powi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = powApprox(base, remain, POW_PRECISION);\\n        return mul(wholePow, partialResult);\\n    }\\n\\n    function powApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = subSign(base, ONE);\\n        uint256 term = ONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * ONE;\\n            (uint256 c, bool cneg) = subSign(a, sub(bigK, ONE));\\n            term = mul(term, mul(c, x));\\n            term = div(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = sub(sum, term);\\n            } else {\\n                sum = add(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0xc28c991f829d87ad248480877a65411db805fb33db08817c5a60eb6fd348448c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\npragma solidity ^0.7.1;\\n\\n// Full external interface for the Vault core contract - no external or public methods exist in the contract that don't\\n// override one of these declarations.\\ninterface IVault {\\n    // User Balance\\n\\n    /**\\n     * @dev Returns `user`'s User Balance for a specific token.\\n     */\\n    function getUserTokenBalance(address user, IERC20 token) external view returns (uint128);\\n\\n    /**\\n     * @dev Deposits tokens from the caller into `user`'s User Balance.\\n     */\\n    function deposit(\\n        IERC20 token,\\n        uint128 amount,\\n        address user\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws tokens from the caller's User Balance, transferring them to `recipient`. Withdraw protocol fees\\n     * are charged by this.\\n     */\\n    function withdraw(\\n        IERC20 token,\\n        uint128 amount,\\n        address recipient\\n    ) external;\\n\\n    // Operators\\n\\n    /**\\n     * @dev Authorizes `operator` to act as an operator for the caller.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revokes `operator` so that it no longer is an operator for the caller. An account is always its own operator\\n     * and cannot revoke itself. Trusted Operators also cannot be revoked.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns true of `operator` is an operator for `user`.\\n     */\\n    function isOperatorFor(address user, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the number of operators for `user`. This does not include `user` itself, nor Trusted Operators.\\n     */\\n    function getUserTotalOperators(address user) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of `user`'s operators, starting at index `start`, up to index `end`. This does not\\n     * include `user` itself, nor Trusted Operators.\\n     *\\n     * The ordering of this list may change as operators are authorized and revoked.\\n     */\\n    function getUserOperators(\\n        address user,\\n        uint256 start,\\n        uint256 end\\n    ) external view returns (address[] memory);\\n\\n    // Trusted operators\\n\\n    /**\\n     @dev Returns the number of Trusted Operators.\\n     */\\n    function getTotalTrustedOperators() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of Trusted Operators, starting at index `start`, up to index `end`.\\n     */\\n    function getTrustedOperators(uint256 start, uint256 end) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the number of Trusted Operator Reporters.\\n     */\\n    function getTotalTrustedOperatorReporters() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of Trusted Operator Reporters, starting at index `start`, up to index `end`.\\n     */\\n    function getTrustedOperatorReporters(uint256 start, uint256 end) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Adds `operator` as a Trusted Operator. Can only be called by a Trusted Operator Reporter.\\n     */\\n    function reportTrustedOperator(address operator) external;\\n\\n    // Pools\\n\\n    // There are two variants of Trading Strategies for Pools: Pair Trading Strategies, and Tuple Trading Strategies.\\n    // These require different data from the Vault, which is reflected in their differing interfaces\\n    // (IPairTradingStrategy and ITupleTradingStrategy, respectively).\\n    enum StrategyType { PAIR, TUPLE }\\n\\n    /**\\n     * @dev Creates a new Pool with a Trading Strategy and Trading Strategy Type. The caller of this function becomes\\n     * the Pool's controller.\\n     *\\n     * Returns the created Pool's ID. Also emits a PoolCreated event.\\n     */\\n    function newPool(address strategy, StrategyType strategyType) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is created by calling `newPool`. Contains the Pool ID of the created pool.\\n     */\\n    event PoolCreated(bytes32 poolId);\\n\\n    // Pool Queries\\n\\n    /**\\n     * @dev Returns the number of Pools.\\n     */\\n    function getTotalPools() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a partial list of Pool IDs, starting at index `start`, up to index `end`.\\n     */\\n    function getPoolIds(uint256 start, uint256 end) external view returns (bytes32[] memory);\\n\\n    /**\\n     * @dev Returns a Pool's controller.\\n     */\\n    function getPoolController(bytes32 poolId) external view returns (address);\\n\\n    /**\\n     * @dev Returns a Pool's Trading Strategy and Trading Strategy Type.\\n     */\\n    function getPoolStrategy(bytes32 poolId) external view returns (address, StrategyType);\\n\\n    /**\\n     * @dev Returns all tokens in the Pool (tokens for which the Pool has balance).\\n     */\\n    function getPoolTokens(bytes32 poolId) external view returns (IERC20[] memory);\\n\\n    /**\\n     * @dev Returns the Pool's balance of `tokens`. This might be zero if the tokens are not in the Pool.\\n     */\\n    function getPoolTokenBalances(bytes32 poolId, IERC20[] calldata tokens) external view returns (uint128[] memory);\\n\\n    function getInvestablePercentage(bytes32 poolId, IERC20 token) external view returns (uint128);\\n\\n    // Pool Management\\n\\n    /**\\n     * @dev Sets a new controller for a Pool. Can only be called by its current controller.\\n     */\\n    function setPoolController(bytes32 poolId, address controller) external;\\n\\n    function authorizePoolInvestmentManager(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address operator\\n    ) external;\\n\\n    function revokePoolInvestmentManager(\\n        bytes32 poolId,\\n        IERC20 token,\\n        address operator\\n    ) external;\\n\\n    /**\\n     * @dev Adds liquidity into a Pool. Can only be called by its controller.\\n     *\\n     * For each token, the Pool's balance will be increased by `totalAmounts[i]`. This is achieved by first transferring\\n     * `amountsToTransfer[i]` tokens, and then withdrawing any amount remaining from User Balance. In both cases, the\\n     * tokens will come from `from`. `from` must have granted allowance to the Vault, and the caller (Pool controller)\\n     * must be an operator for `from`.\\n     *\\n     * If a token that was not previously in the Pool is granted balance by this function, it will become part of the\\n     * Pool. This is the only way tokens can be added to a Pool.\\n     */\\n    function addLiquidity(\\n        bytes32 poolId,\\n        address from,\\n        IERC20[] calldata tokens,\\n        uint128[] calldata totalAmounts,\\n        uint128[] calldata amountsToTransfer\\n    ) external;\\n\\n    /**\\n     * @dev Removes liquidity from a Pool. Can only be called by its controller.\\n     *\\n     * For each token, the Pool's balance will be decreased by `totalAmounts[i]`. This is achieved by first transferring\\n     * `amountsToTransfer[i]` tokens, and then depositing any amount remaining into User Balance. In both cases, the\\n     * tokens are sent to `to`. Withdraw protocol fees are charged over any tokens transferred out.\\n     *\\n     * If a token that was previously in the Pool has all of its balance removed by this function, it will no longer be\\n     * in the Pool. This is the only way tokens can be removed from a Pool.\\n     */\\n    function removeLiquidity(\\n        bytes32 poolId,\\n        address to,\\n        IERC20[] calldata tokens,\\n        uint128[] calldata totalAmounts,\\n        uint128[] calldata amountsToTransfer\\n    ) external;\\n\\n    // Trading interface\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. Each swap is validated and executed in order.\\n     * However, tokens are only transferred in and out of the Vault (or withdrawn/deposited from User Balance) after all\\n     * swaps have been validated and the net token balance change computed. This means it is possible to e.g. under\\n     * certain conditions perform arbitrage by swapping with multiple Pools in a way that results in net token movement\\n     * out of the Vault (profit), with no tokens being sent in.\\n     *\\n     * The `diffs` array contains the addresses of all tokens involved in the swaps, along with how many tokens the\\n     * caller expects to transfer into the Vault for each. Any tokens due to the Vault not included in this amount will\\n     * be withdrawn from User Balance.\\n     *\\n     * The `swaps` array contains the information about each individual swaps. All swaps consist of a Pool receiving\\n     * some amount of one of its tokens (`tokenIn`), and sending some amount of another one of its tokens (`tokenOut`).\\n     * A swap cannot cause `tokenOut` to be fully drained. The Pools' Trading Strategies will validate each swap,\\n     * possibly charging a swap fee on the amount going in. If so, the protocol will then charge the protocol swap fee\\n     * to the Pool's own swap fee.\\n     *\\n     * Funds will be received according to the data in `fundsIn`, and sent according to `fundsOut`.\\n     */\\n    function batchSwapGivenIn(\\n        SwapIn[] calldata swaps,\\n        IERC20[] memory tokens,\\n        FundManagement calldata funds\\n    ) external returns (int256[] memory vaultDeltas);\\n\\n    function batchSwapGivenOut(\\n        SwapOut[] calldata swaps,\\n        IERC20[] memory tokens,\\n        FundManagement calldata funds\\n    ) external returns (int256[] memory vaultDeltas);\\n\\n    // batchSwap helper data structures\\n\\n    // A batched swap is made up of a number of Swaps. Each swap indicates a token balance increasing (tokenIn) and one\\n    // decreasing (tokenOut) in a pool.\\n    // Indexes instead of token addresses to not perform lookup in the tokens array.\\n    struct SwapIn {\\n        bytes32 poolId;\\n        uint128 tokenInIndex;\\n        uint128 tokenOutIndex;\\n        uint128 amountIn;\\n        bytes userData;\\n    }\\n\\n    struct SwapOut {\\n        bytes32 poolId;\\n        uint128 tokenInIndex;\\n        uint128 tokenOutIndex;\\n        uint128 amountOut;\\n        bytes userData;\\n    }\\n\\n    // Funds in are received by `IERC20.transferFrom` from `withdrawFrom`. If received funds are not enough, they are\\n    // withdrawn from withdrawFrom's User Balance.\\n    // In any case, the caller must be an operator for withdrawFrom.\\n    // Funds out are deposited to recipient's User Balance, or transferred out if transferToRecipient is true.\\n    struct FundManagement {\\n        address sender;\\n        address recipient;\\n        bool withdrawFromUserBalance;\\n        bool depositToUserBalance;\\n    }\\n\\n    // Flash Loan interface\\n    function flashLoan(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        bytes memory _params //TODO check for reentrancy\\n    ) external;\\n\\n    // Investment interface\\n    function setInvestablePercentage(\\n        bytes32 poolId,\\n        IERC20 token,\\n        uint128 percentage\\n    ) external;\\n\\n    function updateInvested(\\n        bytes32 poolId,\\n        IERC20 token,\\n        uint128 amountInvested\\n    ) external;\\n\\n    // Unaccounted-for Tokens\\n\\n    /**\\n     * @dev Returns the number of unaccounted-for tokens for `token`.\\n     */\\n    function getTotalUnaccountedForTokens(IERC20 token) external view returns (uint256);\\n\\n    // Admin Controls\\n\\n    /**\\n     * @dev Authorizes `reporter` to call `reportTrustedOperator`. This is typically called on factory contracts. Can\\n     * only be called by the admin.\\n     */\\n    function authorizeTrustedOperatorReporter(address reporter) external;\\n\\n    /**\\n     * @dev Transfers to `recipient` the requested amounts of unnaccounted-for tokens. Can only be called by the admin.\\n     */\\n    function claimUnaccountedForTokens(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    // Missing here: setting protocol fees, changing admin\\n}\\n\",\"keccak256\":\"0xa441530f4d21f40ad0f6561af864fa6630fb71e87cf073894588cd37cd3097ff\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051612eb0380380612eb083398101604081905261002f91610044565b60601b6001600160601b031916608052610072565b600060208284031215610055578081fd5b81516001600160a01b038116811461006b578182fd5b9392505050565b60805160601c612e186100986000398060ac528061012452806101b25250612e186000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c8063d65bc1eb146200003f578063fbfa77cf146200006e575b600080fd5b62000056620000503660046200044b565b62000078565b60405162000065919062000630565b60405180910390f35b6200005662000122565b60006200011760405180602001620000909062000398565b601f1982820381018352601f909101166040819052620000e1907f0000000000000000000000000000000000000000000000000000000000000000908b908b908b908b908b90339060200162000644565b60408051601f198184030181529082905262000101929160200162000617565b6040516020818303038152906040528362000146565b979650505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806200015c83858051906020012062000289565b905062000172816001600160a01b03166200029f565b156200019b5760405162461bcd60e51b8152600401620001929062000758565b60405180910390fd5b60405163eb1192c360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063eb1192c390620001e990849060040162000630565b600060405180830381600087803b1580156200020457600080fd5b505af115801562000219573d6000803e3d6000fd5b5050505060006200022d60008587620002dc565b9050816001600160a01b0316816001600160a01b0316146200024b57fe5b6040516001600160a01b038216907f61a1525f83a9a659cdc1dfd5ba0a75b20537f5127a4abcebba133b6440e431ff90600090a29150505b92915050565b60006200029883833062000357565b9392505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590620002d457508115155b949350505050565b60008084471015620003025760405162461bcd60e51b8152600401620001929062000787565b8251620003235760405162461bcd60e51b81526004016200019290620006f0565b8383516020850187f590506001600160a01b038116620002d45760405162461bcd60e51b8152600401620001929062000725565b60008060ff60f81b838686604051602001620003779493929190620005e3565b60408051808303601f19018152919052805160209091012095945050505050565b6125c3806200082083390190565b80356001600160a01b03811681146200028357600080fd5b600082601f830112620003cf578081fd5b8135620003e6620003e082620007e5565b620007be565b8181529150602080830190848101818402860182018710156200040857600080fd5b6000805b858110156200043f5782356001600160801b03811681146200042c578283fd5b855293830193918301916001016200040c565b50505050505092915050565b60008060008060008060c0878903121562000464578182fd5b620004708888620003a6565b95506020808801356002811062000485578384fd5b95506040880135945060608801356001600160401b0380821115620004a8578485fd5b818a0191508a601f830112620004bc578485fd5b8135620004cd620003e082620007e5565b81815284810190848601868402860187018f1015620004ea578889fd5b8895505b838610156200051857620005038f82620003a6565b835260019590950194918601918601620004ee565b509750505060808a013592508083111562000531578485fd5b50506200054189828a01620003be565b92505060a087013590509295509295509295565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156200059c5781516001600160801b03168752958201959082019060010162000575565b509495945050505050565b60008151815b81811015620005c95760208185018101518683015201620005ad565b81811115620005d85782828601525b509290920192915050565b6001600160f81b031994909416845260609290921b6001600160601b03191660018401526015830152603582015260550190565b6000620002d4620006298386620005a7565b84620005a7565b6001600160a01b0391909116815260200190565b600060e0820160018060a01b03808b1684526020818b16818601526200066a8a62000811565b604085018a90526060850189905260e060808601528751928390528088019261010086019250845b81811015620006ba57620006a7855162000805565b8452938201939282019260010162000692565b50505083810360a0850152620006d1818762000562565b92505050620006e460c083018462000555565b98975050505050505050565b6020808252818101527f437265617465323a2062797465636f6465206c656e677468206973207a65726f604082015260600190565b602080825260199082015278437265617465323a204661696c6564206f6e206465706c6f7960381b604082015260600190565b60208082526015908201527414d85b1d0818d85b9b9bdd081899481c995d5cd959605a1b604082015260600190565b6020808252601d908201527f437265617465323a20696e73756666696369656e742062616c616e6365000000604082015260600190565b6040518181016001600160401b0381118282101715620007dd57600080fd5b604052919050565b60006001600160401b03821115620007fb578081fd5b5060209081020190565b6001600160a01b031690565b600281106200081c57fe5b5056fe610100604052601360c08190527f42616c616e63657220506f6f6c20546f6b656e0000000000000000000000000060e0908152620000419160039190620006b7565b506040805180820190915260038082526210941560ea1b60209092019182526200006e91600491620006b7565b506005805460ff191660121790553480156200008957600080fd5b50604051620025c3380380620025c3833981810160405260e0811015620000af57600080fd5b8151602083015160408085015160608601516080870180519351959794969295919491939282019284640100000000821115620000eb57600080fd5b9083019060208201858111156200010157600080fd5b82518660208202830111640100000000821117156200011f57600080fd5b82525081516020918201928201910280838360005b838110156200014e57818101518382015260200162000134565b50505050905001604052602001805160405193929190846401000000008211156200017857600080fd5b9083019060208201858111156200018e57600080fd5b8251866020820283011164010000000082111715620001ac57600080fd5b82525081516020918201928201910280838360005b83811015620001db578181015183820152602001620001c1565b505050509050016040526020018051906020019092919050505060016006819055506000876001600160a01b03166381158ad988886040518363ffffffff1660e01b815260040180836001600160a01b031681526020018260018111156200023f57fe5b815260200192505050602060405180830381600087803b1580156200026357600080fd5b505af115801562000278573d6000803e3d6000fd5b505050506040513d60208110156200028f57600080fd5b5051604051630ab0e98b60e11b8152600481018281526001600160a01b03858116602484015260a060448401908152885160a48501528851949550908c1693631561d31693869388938b938b93849392916064820191608481019160c4909101906020898101910280838360005b8381101562000317578181015183820152602001620002fd565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015620003585781810151838201526020016200033e565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015620003995781810151838201526020016200037f565b5050505090500198505050505050505050600060405180830381600087803b158015620003c557600080fd5b505af1158015620003da573d6000803e3d6000fd5b50505050620003ef856200042160201b60201c565b620003fb82866200042f565b60609790971b6001600160601b03191660805250505060a0939093525062000753915050565b6200042c816200043f565b50565b6200043b8282620004c0565b5050565b30600090815260208181526040909120546200046691839062001778620004cd821b17901c565b30600090815260208181526040909120919091556002546200049391839062001778620004cd821b17901c565b6002556040805182815290513091600091600080516020620025a38339815191529181900360200190a350565b6200043b3083836200052f565b60008282018381101562000528576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080518082018252601481527f4552525f494e53554646494349454e545f42414c0000000000000000000000006020808301919091526001600160a01b03861660009081528082529290922054620005959290918491620017d76200061c821b17901c565b6001600160a01b038085166000908152602081815260408083209490945591851681529190912054620005d391839062001778620004cd821b17901c565b6001600160a01b03808416600081815260208181526040918290209490945580518581529051919392871692600080516020620025a383398151915292918290030190a3505050565b60008184841115620006af5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200067357818101518382015260200162000659565b50505050905090810190601f168015620006a15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006fa57805160ff19168380011785556200072a565b828001600101855582156200072a579182015b828111156200072a5782518255916020019190600101906200070d565b50620007389291506200073c565b5090565b5b808211156200073857600081556001016200073d565b60805160601c60a051611ded620007b6600039806105e652806107355280610ae25280610dde528061105252806111a152806115455250806105b752806107065280610b2c52806110235280611172528061151652806117565250611ded6000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c806306fdde03146100ca578063095ea7b314610147578063127cdc421461018757806318160ddd1461020f57806323b872dd14610229578063313ce5671461025f5780633e0dc34e1461027d578063661884631461028557806370a08231146102b157806395d89b41146102d7578063a9059cbb146102df578063b5db9b8b1461030b578063d73dd62314610391578063dd62ed3e146103bd578063fbfa77cf146103eb575b600080fd5b6100d261040f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010c5781810151838201526020016100f4565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101736004803603604081101561015d57600080fd5b506001600160a01b0381351690602001356104a5565b604080519115158252519081900360200190f35b61020d6004803603608081101561019d57600080fd5b81359190810190604081016020820135600160201b8111156101be57600080fd5b8201836020820111156101d057600080fd5b803590602001918460208302840111600160201b831117156101f157600080fd5b91935091508035151590602001356001600160a01b03166104f9565b005b610217610c73565b60408051918252519081900360200190f35b6101736004803603606081101561023f57600080fd5b506001600160a01b03813581169160208101359091169060400135610c79565b610267610dd3565b6040805160ff9092168252519081900360200190f35b610217610ddc565b6101736004803603604081101561029b57600080fd5b506001600160a01b038135169060200135610e00565b610217600480360360208110156102c757600080fd5b50356001600160a01b0316610ed8565b6100d2610ef3565b610173600480360360408110156102f557600080fd5b506001600160a01b038135169060200135610f54565b61020d6004803603608081101561032157600080fd5b81359190810190604081016020820135600160201b81111561034257600080fd5b82018360208201111561035457600080fd5b803590602001918460208302840111600160201b8311171561037557600080fd5b91935091508035151590602001356001600160a01b0316610f6a565b610173600480360360408110156103a757600080fd5b506001600160a01b0381351690602001356116a8565b610217600480360360408110156103d357600080fd5b506001600160a01b0381358116916020013516611729565b6103f3611754565b604080516001600160a01b039092168252519081900360200190f35b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561049b5780601f106104705761010080835404028352916020019161049b565b820191906000526020600020905b81548152906001019060200180831161047e57829003601f168201915b5050505050905090565b3360008181526001602090815260408083206001600160a01b03871680855290835281842086905581518681529151939490939092600080516020611d98833981519152928290030190a350600192915050565b6002600654141561053f576040805162461bcd60e51b815260206004820152601f6024820152600080516020611d0f833981519152604482015290519081900360640190fd5b6002600655600061054e610c73565b9050600061056461055f888461186e565b611981565b90506001600160801b0381166105b3576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561063957600080fd5b505afa15801561064d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561067657600080fd5b8101908080516040519392919084600160201b82111561069557600080fd5b9083019060208201858111156106aa57600080fd5b82518660208202830111600160201b821117156106c657600080fd5b82525081516020918201928201910280838360005b838110156106f35781810151838201526020016106db565b50505050905001604052505050905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fe8f2cb27f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156107aa578181015183820152602001610792565b50505050905001935050505060006040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561080b57600080fd5b8101908080516040519392919084600160201b82111561082a57600080fd5b90830190602082018581111561083f57600080fd5b82518660208202830111600160201b8211171561085b57600080fd5b82525081516020918201928201910280838360005b83811015610888578181015183820152602001610870565b505050509050016040525050509050815188889050146108d95760405162461bcd60e51b8152600401808060200182810382526022815260200180611d566022913960400191505060405180910390fd5b606082516001600160401b03811180156108f257600080fd5b5060405190808252806020026020018201604052801561091c578160200160208202803683370190505b509050606083516001600160401b038111801561093857600080fd5b50604051908082528060200260200182016040528015610962578160200160208202803683370190505b50905060005b8451811015610ad2576109a08685838151811061098157fe5b60200260200101516001600160801b03166119c990919063ffffffff16565b8382815181106109ac57fe5b60200260200101906001600160801b031690816001600160801b0316815250508a8a828181106109d857fe5b905060200201356001600160801b03166001600160801b03168382815181106109fd57fe5b60200260200101516001600160801b03161115610a50576040805162461bcd60e51b815260206004820152600c60248201526b22a9292fa624a6a4aa2fa4a760a11b604482015290519081900360640190fd5b8815610a9b57828181518110610a6257fe5b6020026020010151828281518110610a7657fe5b60200260200101906001600160801b031690816001600160801b031681525050610aca565b6000828281518110610aa957fe5b60200260200101906001600160801b031690816001600160801b0316815250505b600101610968565b50604051630ab0e98b60e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201818152336024840181905260a060448501908152885160a486015288516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001695631561d31695948b938a938a936064810191608482019160c401906020808a01910280838360005b83811015610b8d578181015183820152602001610b75565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610bcc578181015183820152602001610bb4565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610c0b578181015183820152602001610bf3565b5050505090500198505050505050505050600060405180830381600087803b158015610c3657600080fd5b505af1158015610c4a573d6000803e3d6000fd5b50505050610c578b611acd565b610c61878c611ad9565b50506001600655505050505050505050565b60025490565b6000336001600160a01b0385161480610cb557506001600160a01b03841660009081526001602090815260408083203384529091529020548211155b610cfe576040805162461bcd60e51b815260206004820152601560248201527422a9292fa12a27a5a2a72fa120a22fa1a0a62622a960591b604482015290519081900360640190fd5b610d09848484611ae7565b336001600160a01b03851614801590610d4757506001600160a01b038416600090815260016020908152604080832033845290915290205460001914155b15610dc9576001600160a01b0384166000908152600160209081526040808320338452909152902054610d7a9083611baf565b6001600160a01b0385811660009081526001602090815260408083203380855290835292819020859055805194855251928716939192600080516020611d988339815191529281900390910190a35b5060019392505050565b60055460ff1690565b7f000000000000000000000000000000000000000000000000000000000000000081565b3360009081526001602090815260408083206001600160a01b038616845290915281205480831115610e55573360009081526001602090815260408083206001600160a01b0388168452909152812055610e84565b610e5f8184611baf565b3360009081526001602090815260408083206001600160a01b03891684529091529020555b3360008181526001602090815260408083206001600160a01b038916808552908352928190205481519081529051929392600080516020611d98833981519152929181900390910190a35060019392505050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561049b5780601f106104705761010080835404028352916020019161049b565b6000610f61338484611ae7565b50600192915050565b60026006541415610fb0576040805162461bcd60e51b815260206004820152601f6024820152600080516020611d0f833981519152604482015290519081900360640190fd5b60026006556000610fbf610c73565b90506000610fd061055f888461186e565b90506001600160801b03811661101f576040805162461bcd60e51b815260206004820152600f60248201526e08aa4a4be9a82a890be82a0a0a49eb608b1b604482015290519081900360640190fd5b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f94d46687f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b1580156110a557600080fd5b505afa1580156110b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156110e257600080fd5b8101908080516040519392919084600160201b82111561110157600080fd5b90830190602082018581111561111657600080fd5b82518660208202830111600160201b8211171561113257600080fd5b82525081516020918201928201910280838360005b8381101561115f578181015183820152602001611147565b50505050905001604052505050905060607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fe8f2cb27f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156112165781810151838201526020016111fe565b50505050905001935050505060006040518083038186803b15801561123a57600080fd5b505afa15801561124e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561127757600080fd5b8101908080516040519392919084600160201b82111561129657600080fd5b9083019060208201858111156112ab57600080fd5b82518660208202830111600160201b821117156112c757600080fd5b82525081516020918201928201910280838360005b838110156112f45781810151838201526020016112dc565b505050509050016040525050509050815188889050146113455760405162461bcd60e51b8152600401808060200182810382526022815260200180611d566022913960400191505060405180910390fd5b606082516001600160401b038111801561135e57600080fd5b50604051908082528060200260200182016040528015611388578160200160208202803683370190505b509050606083516001600160401b03811180156113a457600080fd5b506040519080825280602002602001820160405280156113ce578160200160208202803683370190505b50905060005b8451811015611513576113ed8685838151811061098157fe5b8382815181106113f957fe5b60200260200101906001600160801b031690816001600160801b0316815250508a8a8281811061142557fe5b9050602002013583828151811061143857fe5b60200260200101516001600160801b03161015611491576040805162461bcd60e51b815260206004820152601260248201527109c9ea8408ab092a8929c8e408a9c9eaa8e960731b604482015290519081900360640190fd5b88156114dc578281815181106114a357fe5b60200260200101518282815181106114b757fe5b60200260200101906001600160801b031690816001600160801b03168152505061150b565b60008282815181106114ea57fe5b60200260200101906001600160801b031690816001600160801b0316815250505b6001016113d4565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d4c173e07f0000000000000000000000000000000000000000000000000000000000000000898786866040518663ffffffff1660e01b815260040180868152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156115d45781810151838201526020016115bc565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156116135781810151838201526020016115fb565b50505050905001848103825285818151815260200191508051906020019060200280838360005b8381101561165257818101518382015260200161163a565b5050505090500198505050505050505050600060405180830381600087803b15801561167d57600080fd5b505af1158015611691573d6000803e3d6000fd5b5050505061169f338c611bf1565b610c618b611bfb565b3360009081526001602090815260408083206001600160a01b03861684529091528120546116d69083611778565b3360008181526001602090815260408083206001600160a01b038916808552908352928190208590558051948552519193600080516020611d98833981519152929081900390910190a350600192915050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000828201838110156117d0576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b9392505050565b600081848411156118665760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561182b578181015183820152602001611813565b50505050905090810190601f1680156118585780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000816118b1576040805162461bcd60e51b815260206004820152600c60248201526b4552525f4449565f5a45524f60a01b604482015290519081900360640190fd5b670de0b6b3a764000083028315806118d95750670de0b6b3a76400008482816118d657fe5b04145b61191d576040805162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b604482015290519081900360640190fd5b6002830481018181101561196b576040805162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b604482015290519081900360640190fd5b600084828161197657fe5b049695505050505050565b6000600160801b82106119c55760405162461bcd60e51b8152600401808060200182810382526027815260200180611d2f6027913960400191505060405180910390fd5b5090565b60008282026001600160801b0384161580611a105750826001600160801b0316846001600160801b0316826001600160801b031681611a0457fe5b046001600160801b0316145b611a54576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b604482015290519081900360640190fd5b6706f05b59d3b2000081016001600160801b038083169082161015611ab3576040805162461bcd60e51b815260206004820152601060248201526f4552525f4d554c5f4f564552464c4f5760801b604482015290519081900360640190fd5b6000670de0b6b3a76400006001600160801b038316611976565b611ad681611c04565b50565b611ae38282611c67565b5050565b604080518082018252601481527311549497d25394d551919250d251539517d0905360621b6020808301919091526001600160a01b0386166000908152908190529190912054611b389183906117d7565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611b679082611778565b6001600160a01b03808416600081815260208181526040918290209490945580518581529051919392871692600080516020611d7883398151915292918290030190a3505050565b60006117d083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506117d7565b611ae38282611c72565b611ad681611c7d565b30600090815260208190526040902054611c1e9082611778565b30600090815260208190526040902055600254611c3b9082611778565b6002556040805182815290513091600091600080516020611d788339815191529181900360200190a350565b611ae3308383611ae7565b611ae3823083611ae7565b604080518082018252601481527311549497d25394d551919250d251539517d0905360621b602080830191909152306000908152908190529190912054611cc59183906117d7565b30600090815260208190526040902055600254611ce29082611baf565b6002556040805182815290516000913091600080516020611d788339815191529181900360200190a35056fe5265656e7472616e637947756172643a207265656e7472616e742063616c6c0053616665436173743a2076616c756520646f65736e27742066697420696e203132382062697473546f6b656e7320616e6420616d6f756e7473206c656e677468206d69736d61746368ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a2646970667358221220c2026adefb9aa53a4569aca6e4cbf60bfbdafc09e6a7fd4dfb525f69fdf408c964736f6c63430007010033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220eb1f149411b06f37b686e8b67a3aa4813b198f0e8f3758ca34249500cb95207d64736f6c63430007010033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}